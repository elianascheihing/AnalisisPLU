{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cargar un modelo Word2Vec pre-entrenado para el español\n",
    "\n",
    "ver: https://github.com/dccuchile/spanish-word-embeddings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from gensim.models import KeyedVectors\n",
    "\n",
    "model = KeyedVectors.load_word2vec_format(\"data/SBW-vectors-300-min5.bin.gz\", binary=True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "#from pandasql import sqldf #para utilizar una síntaxis SQL para consultar nuestros datos\n",
    "\n",
    "dataset=\"data/luis/FN_PLU_2017-2021_fbk_v1.csv\"\n",
    "df = pd.read_csv(dataset)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"LargeText\"] = df[\"LinkText\"]+\" \"+df[\"Message\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       Jugoso compilado: 15 tuits políticos del 2021 ...\n",
      "1       Antivacunas se tomó matinal de CHV para decir ...\n",
      "2       (empty) Otra fake news: Servel desmiente fraud...\n",
      "3       Antivacunas irrumpió en despacho de Contigo en...\n",
      "4       “Es información falsa”: Servel desmiente dupli...\n",
      "                              ...                        \n",
      "4651    (empty) [MEDIOS LIBRES/ México] MARCHA NO AL G...\n",
      "4652    Trump denuncia \"caza de brujas\" ante publicaci...\n",
      "4653    Trump asegura que información \"comprometedora\"...\n",
      "4654    Obama asume haber subestimado posible hackeo r...\n",
      "4655    Las falsas noticias del New York Times como ar...\n",
      "Name: LargeText, Length: 4656, dtype: object\n"
     ]
    }
   ],
   "source": [
    "noticias = df.LargeText\n",
    "print(noticias)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import spacy\n",
    "nlp = spacy.load(\"es_core_news_md\")\n",
    "\n",
    "def spacy_tokenizer(texto):\n",
    "    # crea lista de tokens a partir de un texto\n",
    "    mytokens = []\n",
    "    doc = nlp(texto.lower().strip())\n",
    "    for token in doc:\n",
    "        if not token.is_stop and not token.is_punct and not token.is_space and not token.is_digit and not token.like_num:\n",
    "            mytokens.append(token.lemma_)\n",
    "    return mytokens\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "documents=[]\n",
    "for noticia in noticias:\n",
    "    documents.append(spacy_tokenizer(noticia))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "etm_documents=[]\n",
    "for document in documents:\n",
    "    etm_documents.append(\" \".join(document))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['antivacuna',\n",
       " 'tomar',\n",
       " 'matinal',\n",
       " 'chv',\n",
       " 'fake',\n",
       " 'new',\n",
       " 'covid-19',\n",
       " 'persona',\n",
       " 'supermar',\n",
       " 'enfermar',\n",
       " 'mañana',\n",
       " 'extraño',\n",
       " 'conversación',\n",
       " 'persona',\n",
       " 'completar',\n",
       " 'esquema',\n",
       " 'vacunación']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "documents[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'antivacuna tomar matinal chv fake new covid-19 persona supermar enfermar mañana extraño conversación persona completar esquema vacunación'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "etm_documents[1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "myStopWords=['gnl','=','$','+','a','e','o','u','y',' ','  ','   ','    ']\n",
    "tf_vectorizer = CountVectorizer(max_df=0.95, min_df=2,\n",
    "                                stop_words=myStopWords,tokenizer=spacy_tokenizer, ngram_range=(1,1))\n",
    "tf = tf_vectorizer.fit_transform(etm_documents)\n",
    "diccionario= tf_vectorizer.get_feature_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['-avión', '-denuncian-', '-en', '-las', '-o', '-viñuela', '1%', '1.-', '10%', '100%', '11.15am', '11:00', '13c', '18%', '18,8%', '18:00', '1973-2017', '2.-te', '20%', '2021|', '24,9%', '24data', '24horascl', '25-o', '3.-', '30%', '42%', '45%', '48%', '5%', '50%', '51%', '53%', '58%', '65%', '70%', '76%', '77%', '96%', ':o', '>', '@biobio', '@bpoblete', '@elperiodista', '@polarbearby', 'abajo', 'abanderado', 'abandonar', 'abandono', 'abanico', 'abbott', 'abc1', 'abedrapo', 'abel', 'abiertamente', 'abierto', 'abogado', 'abogar', 'abordar', 'aborto', 'abrazar', 'abrazo', 'abril', 'abrir', 'absolución', 'absolutamente', 'absolver', 'absurdo', 'abuela', 'abultado', 'abundancia', 'abundar', 'aburrir', 'abusivo', 'abuso', 'acabar', 'académico', 'acaecido', 'acallar', 'acaparador', 'acaparar', 'acarreo', 'acaso', 'acceder', 'acceso', 'accidente', 'accionar', 'accionista', 'acción', 'accuracy', 'aceite', 'acelerado', 'aceptable', 'aceptar', 'aceptarer', 'acerca', 'acercar', 'aclar', 'aclaración', 'aclarado', 'aclarar', 'acobardastar', 'acoger', 'acomodar', 'acompañado', 'acompañar', 'aconcaguo', 'aconsejar', 'acontecimiento', 'acordar', 'acoso', 'acostar', 'acostumbrar', 'acrecentar', 'acreditar', 'actitud', 'activar', 'actividad', 'activista', 'activo', 'acto', 'actor', 'actriz', 'actuación', 'actual', 'actualidad', 'actualización', 'actualizado', 'actualizar', 'actualmente', 'actuar', 'actúar', 'acuartelamiento', 'acudar', 'acudir', 'acumular', 'acusación', 'acusado', 'acusar', 'acuñar', 'acá', 'acádemico', 'ad', 'adecuado', 'adelantar', 'adentro', 'adherent', 'adicción', 'adido', 'adiós', 'adjudicado', 'adjudicar', 'administración', 'administrador', 'administrar', 'administration', 'administrativo', 'admirar', 'admisible', 'admisión', 'admitir', 'adn', 'adn.cl', 'adolescente', 'adolfo', 'adoptado', 'adoptar', 'adscribíar', 'adulterado', 'adulto', 'adversario', 'adverso', 'advertencia', 'advertir', 'afectado', 'afectar', 'afectividades', 'afecto', 'affected', 'afilado', 'afiliado', 'afip', 'afirmación', 'afirmar', 'afp', 'afps', 'afp’s', 'afrontar', 'afán', 'afín', 'agencia', 'agencio', 'agenda', 'agendo', 'agente', 'agitación', 'aglomeración', 'agnosio', 'agonizar', 'agosto', 'agotar', 'agradecer', 'agradecimiento', 'agravar', 'agredir', 'agregado', 'agregar', 'agresividad', 'agresión', 'agresor', 'agressions', 'agricultura', 'agriculturo', 'agrupación', 'agrónomo', 'agua', 'aguantar', 'aguilar', 'aguinaldo', 'aguirre', 'aguo', 'agustín', 'ah', 'ahoraenduna', 'ahorro', 'aire', 'airefresco', 'aires', 'aislado', 'aislamiento', 'ajeno', 'alacer', 'alacrán', 'alameda', 'alarde', 'alarma', 'alarmante', 'alarmar', 'albergar', 'albert', 'alberto', 'albo', 'alcalde', 'alcaldesa', 'alcaldesar', 'alcaldía', 'alcance', 'alcanzar', 'alcohol', 'aldo', 'alegar', 'alegría', 'alejado', 'alejandra', 'alejandro', 'alemania', 'alemán', 'alentar', 'alero', 'alerta', 'alertaciper', 'alertar', 'alertat13', 'alerto', 'alessandri', 'alessia', 'alessiadro', 'aleuy', 'alex', 'alexandre', 'alfabetización', 'alfonso', 'alfredo', 'algoritmo', 'alguien', 'aliado', 'alianza', 'aliar', 'alien', 'alimentado', 'alimentar', 'alimento', 'alison', 'alista', 'aliviar', 'allegado', 'allende', 'allá', 'alma', 'almacén', 'almirante', 'alocución', 'alta', 'alter', 'alterado', 'alterar', 'alternativo', 'alternet', 'although', 'alto', 'altérer', 'altísimos', 'aludir', 'alumno', 'alusivo', 'alusión', 'alvear', 'alvin', 'alza', 'alzar', 'alzo', 'alí', 'amandar', 'amargo', 'amaule', 'amaya', 'amazona', 'amazonía', 'amazonío', 'ambassadeurs', 'ambiental', 'ambientalista', 'ambiente', 'amenaza', 'amenazante', 'amenazar', 'america', 'american', 'amigo', 'amlo', 'amnistir', 'amor', 'amparado', 'ampliamente', 'ampliar', 'amplio', 'ampuero', 'amputar', 'américa', 'américain', 'américo', 'an', 'ana', 'analista', 'analizar', 'analytico', 'analytics', 'anatel', 'anatomía', 'ancalao', 'and', 'andar', 'andino', 'andrea', 'andrew', 'android', 'andrés', 'anfp', 'angela', 'angelini', 'angustia', 'angustio', 'angélico', 'anillo', 'animado', 'animador', 'animadoro', 'animal', 'animar', 'aniquilación', 'aniversario', 'anoche', 'anonymous', 'anp', 'ansiedad', 'ansioso', 'antecedente', 'antena', 'anteponer', 'anterioridad', 'antesala', 'antesalo', 'anthony', 'anti', 'anti-facebook', 'anti-sexo', 'anti-vacuna', 'antiabuso', 'antibarricado', 'anticientífico', 'anticipar', 'anticovid', 'antidemocrático', 'antifeminismo', 'antiguo', 'antisaqueo', 'antisexo', 'antispam', 'antivacuna', 'antivacunar', 'antivacún', 'antofagasta', 'antoine', 'antonia', 'antonio', 'antorcha', 'antártico', 'antídoto', 'anular', 'anunciado', 'anunciar', 'anuncio', 'análisis', 'anónimo', 'apagar', 'apagón', 'aparato', 'aparecer', 'aparecido', 'aparición', 'apelación', 'apelar', 'apellido', 'apertura', 'aperturar', 'aplaudido', 'aplicación', 'aplicar', 'apocalipsis', 'apocalíptico', 'apoderado', 'apoderar', 'apolo', 'aportar', 'aporte', 'apostar', 'apoyado', 'apoyar', 'apoyo', 'app', 'apple', 'aprender', 'aprendizaje', 'aprobación', 'aprobado', 'aprobar', 'apropiación', 'apropiar', 'aprovechamiento', 'aprovechar', 'aproximar', 'apruebo', 'apuesta', 'apuntar', 'arancibia', 'arancibiar', 'arancibio', 'aranda', 'aranedar', 'araucanir', 'araucano', 'araucaníar', 'arauco', 'arauz', 'aravena', 'araya', 'araña', 'archi', 'archimedes', 'archivo', 'arder', 'ardiente', 'argandoña', 'argentina', 'argentino', 'argumentar', 'argumento', 'arico', 'arista', 'arkabas', 'arma', 'armado', 'armar', 'arquero', 'arrancar', 'arrasar', 'arrau', 'arreglo', 'arreglín', 'arremeteír', 'arremetido', 'arremetir', 'arrestar', 'arresto', 'arriagado', 'arribo', 'arriesgar', 'arrojar', 'art', 'arte', 'articulado', 'artificial', 'artificialmente', 'artillería', 'artillerío', 'artista', 'arturo', 'artículo', 'artístico', 'arén', 'asaltar', 'asalto', 'asamblea', 'asambleo', 'ascendencia', 'ascenso', 'asegurador', 'asegurar', 'asentamiento', 'asesinado', 'asesinar', 'asesinato', 'asesino', 'asesor', 'asesoramiento', 'asesorar', 'aseveración', 'aseverar', 'asia', 'asignatura', 'asimilación', 'asimilar', 'asimismo', 'asistencial', 'asistente', 'asistir', 'asiático', 'asociación', 'asociado', 'asociar', 'asociedad', 'asombrar', 'aspecto', 'aspirante', 'aspirir', 'assange', 'astrónoma', 'astudillo', 'asumir', 'asunto', 'asuntos', 'atacado', 'atacama', 'atacar', 'ataque', 'ataquesquimico', 'atención', 'atender', 'atentado', 'atentar', 'atenti', 'atento', 'aterrorizar', 'atleta', 'atmósfera', 'atochamiento', 'atractivo', 'atreveír', 'atrevir', 'atribución', 'atribuido', 'atribuir', 'atrás', 'au', 'audi', 'audiencia', 'audiencio', 'audio', 'audiovisual', 'auge', 'augusto', 'aulo', 'aumentar', 'aumento', 'aung', 'auru', 'ausencia', 'ausente', 'auspiciador', 'austral', 'australia', 'australiano', 'austríaco', 'autismo', 'auto', 'autocrítico', 'autodenunciar', 'autonomía', 'autoproclamación', 'autopsia', 'autor', 'autora', 'autoridad', 'autoritario', 'autoritarismo', 'autorización', 'autorizar', 'autoro', 'autoría', 'auténtico', 'autónomo', 'auxilio', 'avalar', 'avance', 'avanzado', 'avanzar', 'avenida', 'aventura', 'avisaje', 'avisar', 'aviso', 'avistamiento', 'avión', 'awards', 'axel', 'ayer', 'aysén', 'ayuda', 'ayudar', 'az', 'azotar', 'azote', 'azul', 'aéreo', 'añejo', 'año', 'b', 'bachelet', 'bad', 'baer', 'baeza-yates', 'bailar', 'baile', 'baja', 'bajar', 'bajo', 'balance', 'balmaceda', 'balotaje', 'baltolu', 'baluart', 'bancada', 'bancard', 'bancario', 'banco', 'bancoestado', 'banda', 'bandera', 'bandero', 'bannon', 'baquedano', 'barack', 'barbara', 'barbaridad', 'barcelona', 'barco', 'bardhy', 'barra', 'barraza', 'barrera', 'barriga', 'barrigar', 'barrio', 'basado', 'basar', 'basaure', 'base', 'bassa', 'bastar', 'basulto', 'basura', 'batalla', 'batallar', 'batería', 'bautizado', 'bañado', 'bbc', 'be', 'beatriz', 'beauvoir', 'beber', 'bebé', 'beca', 'being', 'bellavista', 'bellolio', 'ben', 'beneficiar', 'beneficio', 'benjamín', 'berkhoff', 'berly', 'berlín', 'bernardo', 'bianchi', 'biblia', 'bic', 'biden', 'bidir', 'bidón', 'bienvenides', 'bienvenido', 'big', 'bikini', 'bill', 'binario', 'bio', 'biobiochile.cl', 'biobío', 'biodiversidad', 'biografía', 'biológico', 'bioquímico', 'birmania', 'bit.ly/2dnj5iz', 'bit.ly/3oawlvj', 'bitcoins', 'blanca', 'blanco', 'blockchain', 'blog', 'bloguera', 'bloomberg', 'bloque', 'bloquea', 'bloquear', 'bloqueo', 'bloqueó', 'blu', 'blumel', 'bobadilla', 'bobadillo', 'boca', 'boicot', 'boicotear', 'bolivia', 'boliviano', 'bolsa', 'bolsonarista', 'bolsonaro', 'bomba', 'bombardeo', 'bombero', 'bono', 'borde', 'boric', 'boricpresidente', 'boricpresidentedechile', 'borrado', 'borrar', 'bosco', 'bot', 'botado', 'botar', 'botón', 'bousselham', 'braga|', 'brar', 'brasil', 'brasilero', 'brasileño', 'bravo', 'brazo', 'brecha', 'breitbart', 'brigada', 'brigadista', 'brigado', 'brindar', 'británico', 'broma', 'bromear', 'bromista', 'bronson', 'brote', 'bruja', 'bruno', 'brutal', 'brutalmente', 'bryan', 'brésil', 'buin', 'bullado', 'buln', 'bulo', 'burar', 'burbuja', 'burgués', 'burla', 'burlar', 'bursátil', 'burundi', 'bus', 'buscado', 'buscador', 'buscar', 'buscarir', 'bustamante', 'by', 'bárbaro', 'básico', 'bío', 'bío-bío', 'búsqueda', 'búsquedar', 'c+c', 'c-130', 'caballo', 'caber', 'cabeza', 'cable', 'cabo', 'cacería', 'cachagua', 'cachaguo', 'cadem', 'cadena', 'cadáver', 'cadén', 'caer', 'café', 'cagar', 'cahuín', 'caigas', 'caja', 'calama', 'calculadora', 'calcular', 'caldo', 'calendario', 'calentamiento', 'calidad', 'calificar', 'callar', 'calle', 'callí', 'calma', 'calmo', 'calor', 'calumnia', 'calumniós', 'calvo', 'cam', 'cama', 'camarada', 'cambiar', 'cambio', 'cambridge', 'camello', 'camila', 'camilar', 'camilia', 'camilo', 'camino', 'camionero', 'camión', 'campante', 'campaña', 'campesino', 'campeón', 'campillai', 'campo', 'camu', 'can', 'canadá', 'canal', 'canalla', 'cancelación', 'cancelar', 'cancha', 'canciller', 'cancillería', 'canción', 'candidata', 'candidato', 'candidatura', 'cangri', 'canibalismo', 'cannabis', 'cansancio', 'cantante', 'cantidad', 'cao', 'caos', 'capa', 'capacidad', 'capacity', 'capacités', 'capaz', 'capital', 'capitalismo', 'capitolio', 'capitán', 'captar', 'capítulo', 'car', 'cara', 'carabinero', 'caracas', 'caracterización', 'caracterizar', 'característico', 'carahue', 'carecer', 'carga', 'cargado', 'cargar', 'cargo', 'caribeño', 'caricatura', 'cariola', 'carlisiar', 'carlos', 'carmen', 'carmona', 'carnada', 'carne', 'carnir', 'caro', 'carolina', 'carrasco', 'carrera', 'carrete', 'carta', 'cartagena', 'cartel', 'carter', 'cartera', 'cartoni', 'cartón', 'carvativir', 'carácter', 'casa', 'casado', 'cascado', 'casino', 'caso', 'casona', 'castañedo', 'castellano', 'castigar', 'castigo', 'castillo', 'castrense', 'casualidad', 'catalina', 'catalogado', 'catalogar', 'catalán', 'catalún', 'catedral', 'categórico', 'cathy', 'catrillanca', 'catrillanco', 'catástrofe', 'católico', 'causa', 'causado', 'causal', 'causar', 'caused', 'causir', 'causéir', 'cautelar', 'cavado', 'caval', 'cazador', 'cazar', 'caída', 'caídar', 'caído', 'cañete', 'caótico', 'cc', 'cde', 'cecilia', 'celebración', 'celebrar', 'celebridad', 'celui', 'celular', 'cementerio', 'cencosud', 'censura', 'censurar', 'centrado', 'central', 'centralidad', 'centralizar', 'centrar', 'centro', 'ceo', 'cependant', 'cerca', 'cercado', 'cercano', 'cerco', 'cerda', 'cerebro', 'ceremonia', 'cereza', 'cerrado', 'cerrar', 'cerrillo', 'cerro', 'certificado', 'cesación', 'cesar', 'cesfam', 'cesáreo', 'cge', 'chaber', 'chadwick', 'chahuán', 'chahín', 'challenge', 'chanta', 'chaqueta', 'char', 'chat', 'chats', 'chavismo', 'checho', 'check', 'checking', 'chef', 'chelsea', 'chequea', 'chequeado', 'chequear', 'chequeo', 'chico', 'chile', 'chileelige', 'chileeligir', 'chileno', 'chilevamo', 'chilevisión', 'chilezuela', 'chilezuelar', 'chilezuelo', 'chillán', 'chillón', 'china', 'chino', 'chistoso', 'chocante', 'chofer', 'chong', 'choque', 'chuquicamata', 'chv', 'chvnoticia', 'ciber', 'cibercrimen', 'ciberdelincuent', 'cibernauta', 'cibernautar', 'ciberpatrullaj', 'ciberseguridad', 'cidh', 'ciega', 'ciego', 'cielo', 'ciencia', 'cientista', 'ciento', 'científico', 'cierre', 'cifra', 'cifrar', 'cifro', 'cigarrillo', 'cine', 'cineasta', 'cinta', 'ciper', 'circulación', 'circular', 'circunscribir', 'circunstancia', 'citado', 'citar', 'citir', 'ciudad', 'ciudadan@s', 'ciudadano', 'ciudadanoadn', 'ciudadanía', 'civil', 'civilizado', 'clamar', 'clandestino', 'claramente', 'clarin', 'clarín', 'clase', 'claudia', 'claudio', 'clave', 'clero', 'clic', 'click', 'clickbait', 'clicks', 'cliente', 'clima', 'climático', 'clinic', 'clinton', 'clip', 'cloaca', 'club', 'clásico', 'clínico', 'cmf', 'cnn', 'cntv', 'co2', 'coalición', 'coartar', 'cobarde', 'cobertura', 'coberturo', 'cobrar', 'coddou', 'coincidenciar', 'coincidir', 'cola', 'colaboración', 'colaborador', 'colaboradoro', 'colaborar', 'colación', 'colapso', 'colectivero', 'colectividad', 'colectivo', 'colega', 'colegio', 'colgado', 'colgar', 'colo', 'colocar', 'coloma', 'colombia', 'colombiano', 'colombio', 'colombo', 'colosal', 'columna', 'columnar', 'columnista', 'colusión', 'colún', 'comandancia', 'comandante', 'comando', 'combat', 'combate', 'combatir', 'combattrar', 'combien', 'comediante', 'comentado', 'comentar', 'comentario', 'comentarista', 'comenzar', 'comer', 'comercial', 'comercialización', 'comercio', 'cometer', 'cometido', 'comicio', 'comida', 'comienzo', 'comisario', 'comisaría', 'comisionado', 'comisión', 'comité', 'compadre', 'company', 'comparación', 'comparar', 'compartar', 'compartido', 'compartir', 'compatriota', 'compañera', 'compañero', 'compañía', 'compañío', 'competencia', 'competente', 'competir', 'compilado', 'complejidad', 'complejo', 'complementario', 'completamente', 'completar', 'completo', 'complicación', 'complicado', 'complicar', 'complot', 'componer', 'comportamiento', 'compra', 'comprar', 'comprensión', 'comprobabl', 'comprobado', 'comprobar', 'comprometedor', 'comprometido', 'compromiso', 'compuerta', 'compulsión', 'comuna', 'comunal', 'comunero', 'comunicacional', 'comunicación', 'comunicado', 'comunicador', 'comunicar', 'comunidad', 'comunidadesconstituyent', 'comunismo', 'comunista', 'comunitario', 'común', 'conacional', 'conaf', 'conce', 'conceder', 'concedido', 'concejal', 'concejala', 'concejo', 'concentración', 'concentrar', 'concepción', 'concepto', 'conciencia', 'concluir', 'conclusión', 'concretar', 'concreto', 'concurrir', 'concurso', 'concón', 'condecir', 'condena', 'condenado', 'condenar', 'condes', 'condicionar', 'condición', 'conducir', 'conducta', 'conducto', 'conductor', 'conectado', 'conectar', 'conexión', 'conexiónt13', 'confección', 'confech', 'conferencia', 'confesar', 'confesión', 'confiabilidad', 'confiable', 'confianza', 'confianzo', 'confiar', 'configurar', 'confinamiento', 'confirmación', 'confirmado', 'confirmar', 'conflicto', 'conflicts', 'conflits', 'conformar', 'conforme', 'confrontación', 'confrontar', 'confundir', 'confusión', 'confíar', 'congelado', 'congelar', 'conglomerado', 'congresista', 'congreso', 'congresofuturo2021', 'conjuntamente', 'conjunto', 'conllevar', 'conmemoración', 'conmemorar', 'conocer', 'conocido', 'conocimiento', 'conocíar', 'consciente', 'consecuencia', 'consejero', 'consejo', 'conservador', 'considerado', 'considerar', 'consignar', 'consistir', 'conspiración', 'conspiranoia', 'conspirativo', 'constante', 'constantemente', 'constanza', 'constar', 'constatar', 'constitucional', 'constitución', 'constituido', 'constituir', 'constituyent', 'constituyente', 'constituyente:\"están', 'construcción', 'construir', 'consuelo', 'consulta', 'consultado', 'consultar', 'consultora', 'consumidor', 'consumir', 'consumo', 'contactar', 'contacto', 'contagiado', 'contagiar', 'contagio', 'contaminación', 'contaminado', 'contar', 'contemplado', 'contemplar', 'contención', 'contendor', 'contener', 'contenido', 'contenidoesencial', 'conteo', 'contestar', 'contexto', 'conti', 'continente', 'contingencia', 'contingente', 'continuación', 'continuar', 'continuo', 'continúar', 'contraataco', 'contradecir', 'contradicción', 'contradictorio', 'contradizar', 'contraloría', 'contralorío', 'contrario', 'contrarrestar', 'contraseña', 'contrastar', 'contratación', 'contrato', 'contrera', 'contribución', 'contribuir', 'contrincante', 'control', 'controlado', 'controlador', 'controlar', 'controversia', 'controvertido', 'contundente', 'convencional', 'convencionconstitucional', 'convención', 'convenciónconstitucional', 'conveniencia', 'convenio', 'convenir', 'convergencia', 'conversación', 'conversar', 'conversatorio', 'convertir', 'convicción', 'convivencia', 'convivir', 'convocado', 'cook', 'cooperación', 'cooperar', 'cooperativo', 'coordinación', 'coordinado', 'coordinador', 'coordinadora', 'coordinar', 'cop26', 'copec', 'copiapó', 'copés', 'coquimbo', 'corazón', 'corea', 'corona', 'coronar', 'coronavirus', 'coronel', 'coronials', 'corp', 'corpesca', 'corporación', 'correa', 'correctamente', 'corredoro', 'corregir', 'correo', 'correr', 'corresponder', 'correspondiente', 'corroborar', 'corrupción', 'corrupto', 'cortar', 'corte', 'cortir', 'corto', 'cosa', 'cossio', 'costa', 'costado', 'costanera', 'costar', 'costero', 'costo', 'cotidiano', 'cotización', 'covid', 'covid-19', 'covid19', 'covidiota', 'coyhaique', 'coyuntura', 'cpc', 'cplt', 'creación', 'creado', 'creador', 'crear', 'crecer', 'creciente', 'crecimiento', 'credibilidad', 'creencia', 'creer', 'creser', 'creíble', 'creíste', 'crimen', 'criminal', 'criminalidad', 'criminalización', 'criminalizar', 'criollo', 'criptomoneda', 'crisis', 'cristian', 'cristiano', 'cristina', 'cristián', 'cristo', 'cristóbal', 'criterio', 'criticado', 'criticar', 'croacio', 'cross', 'cruce', 'crucero', 'crucial', 'cruel', 'cruz', 'cruzado', 'cruzar', 'crédito', 'crítica', 'críticamente', 'crítico', 'cs', 'cualquiera', 'cuarentena', 'cuba', 'cubano', 'cubil', 'cubillo', 'cubrir', 'cuerpo', 'cuestionabl', 'cuestionado', 'cuestionamiento', 'cuestionar', 'cuestión', 'cueva', 'cuidado', 'cuidar', 'cuidémonostodostvn', 'culpa', 'culpable', 'culpar', 'cultivo', 'culto', 'cultura', 'cultural', 'cultura|', 'culturo', 'cumpleaños', 'cumplido', 'cumplimiento', 'cumplir', 'cunningham', 'cupo', 'cupón', 'cura', 'curar', 'curicar', 'curioso', 'curir', 'currículo', 'cursar', 'curso', 'cuyo', 'cuán', 'cv', 'cámara', 'cámaro', 'cáncer', 'cárcel', 'cárcer', 'cátedrar', 'cédula', 'célebre', 'césar', 'cívico', 'código', 'cómplice', 'córdova', 'córners', 'cós', 'cúmulo', 'd', \"d'entrar\", 'dair', 'dama', 'daniel', 'daniela', 'dar', 'dardo', 'darnton', 'datafolha', 'datar', 'dato', 'datoseiar', 'dave', 'day', 'dañado', 'dañar', 'dañino', 'daño', 'dc', 'dcc', 'dd', 'dd.hh', 'ddhh', 'debatar', 'debate', 'debatido', 'debatir', 'debenedetti', 'deber', 'debilitar', 'debilitir', 'debut', 'decano', 'decencia', 'deceso', 'decidir', 'decisivo', 'decisión', 'declaración', 'declarar', 'declarir', 'declinar', 'decretar', 'decreto', 'decálogo', 'decén', 'dedicado', 'dedicar', 'dedo', 'deep', 'deepfake', 'deepfakes', 'defendar', 'defender', 'defensa', 'defensor', 'definición', 'definir', 'definitivo', 'dejar', 'dejser', 'delegación', 'deliberadamente', 'deliberado', 'delictivo', 'delincuente', 'delito', 'demagogio', 'demanda', 'demandar', 'democracia', 'democracio', 'democratización', 'democrático', 'demoledor', 'demorar', 'demostrar', 'demre', 'demócrata', 'denigrar', 'denis', 'denisse', 'denominado', 'denominador', 'denominar', 'denostar', 'denotar', 'denuncia', 'denunciado', 'denunciante', 'denunciar', 'departamento', 'dependencia', 'deportación', 'deportar', 'deporte', 'deportista', 'derbez', 'derecha', 'derechamente', 'derechista', 'derecho', 'derechos', 'derivado', 'derivar', 'derribar', 'derrota', 'des', 'desabastecimiento', 'desacreditado', 'desacreditar', 'desactivar', 'desacuerdo', 'desafío', 'desagradable', 'desagradecido', 'desalojo', 'desaparecer', 'desaparecido', 'desaparición', 'desarrollado', 'desarrollar', 'desarrollo', 'desastre', 'desastroso', 'desatado', 'desatar', 'desbord', 'desbordes', 'descalificación', 'descalificado', 'descansar', 'descarga', 'descargo', 'descartar', 'desconcentrado', 'desconcierto', 'desconfianza', 'desconfinamiento', 'descongestionar', 'desconocer', 'desconocido', 'desconocimiento', 'descontrolado', 'describir', 'descubierto', 'descubrir', 'desear', 'desechable', 'desembolsar', 'desempleo', 'desencadenar', 'desenfrenado', 'desenfrenar', 'desenmascarar', 'desenvolver', 'desesperación', 'desesperado', 'desestabilización', 'desestabilizar', 'desestimar', 'deshonesto', 'deshonroso', 'desierto', 'designación', 'designado', 'designar', 'desigualdad', 'desinformacion', 'desinformación', 'desinformar', 'desinterés', 'desiréesagarnagadurante', 'deslizar', 'desmantelar', 'desmantelir', 'desmarquir', 'desmentido', 'desmentir', 'desmentir él', 'desmenuzar', 'desmitificar', 'desmontar', 'desmonte', 'desmotiven', 'desmán', 'desnudamiento', 'desnudo', 'desorden', 'despedido', 'despedir', 'despejar', 'despenalización', 'despertar', 'despido', 'desplegado', 'desplegar', 'despliegue', 'despolitizar', 'despreciable', 'desprecio', 'desprestigiar', 'desprestigio', 'destacado', 'destacado|', 'destacar', 'destapar', 'desterrar', 'destinado', 'destinatario', 'destitución', 'destituir', 'destrozado', 'destrozo', 'destrucción', 'destruido', 'destruir', 'destruyan', 'desviar', 'desvincular', 'desvirtuar', 'desvío', 'detallado', 'detallar', 'detalle', 'detección', 'detectado', 'detectar', 'detector', 'detención', 'detener', 'detenido', 'deteriorar', 'determinado', 'determinar', 'detractor', 'devastado', 'devastar', 'develar', 'devolución', 'devolver', 'df', 'dfconstitucional', 'diadelperiodista', 'diagnosticar', 'diagnóstico', 'diario', 'diario@ladiscusion.cl', 'diarioantofagasta.cl', 'dicaprio', 'diciembre', 'dictador', 'dictadura', 'dictamen', 'dictaminar', 'dictar', 'didi', 'diego', 'dieta', 'difamación', 'difamar', 'difamatorio', 'difame', 'diferencia', 'diferenciar', 'diferido', 'difficile', 'difficult', 'dificultad', 'difunde', 'difundes ', 'difundido', 'difundir', 'difusión', 'difícil', 'digital', 'dignidad', 'digno', 'diligencia', 'dilma', 'dimensión', 'dimisión', 'dina', 'dinero', 'dineros', 'dinosaurio', 'dinámico', 'dios', 'diplomacia', 'diplomático', 'diputada', 'diputado', 'dirección', 'directamente', 'directivo', 'directo', 'director', 'directora', 'directorio', 'director|', 'directriz', 'dirigenta', 'dirigente', 'dirigido', 'dirigir', 'disciplina', 'discriminación', 'discriminar', 'discriminatorio', 'disculpa', 'disculpar', 'disculpo', 'disculpó', 'discurso', 'discusión', 'discutir', 'diseminación', 'diseminado', 'diseminar', 'disent', 'diseñado', 'diseño', 'disidente', 'disminución', 'disminuir', 'disney', 'disparar', 'disparo', 'dispersar', 'disponer', 'disponible', 'disposición', 'dispositivo', 'dispuesto', 'disputa', 'disputar', 'distanciamiento', 'diste', 'distinguir', 'distinto', 'distorsionado', 'distorsionar', 'distribución', 'distribuir', 'distrito', 'diversidad', 'diverso', 'dividido', 'dividir', 'división', 'divorcio', 'divulgación', 'divulgado', 'divulgador', 'divulgar', 'diálogo', 'dmitripolikárpov', 'doble', 'docena', 'docente', 'doctor', 'doctora', 'doctoro', 'documentación', 'documental', 'documento', 'doler', 'dolo', 'dolor', 'doloroso', 'domiciliario', 'dominación', 'dominado', 'dominante', 'domingo', 'dominio', 'don', 'donación', 'donald', 'donaldtrump', 'données', 'dorio', 'dosis', 'dotar', 'dr', 'dra', 'drama', 'dramático', 'dro', 'droga', 'drogaba', 'drogadicto', 'drogar', 'drogo', 'dser', 'dt', 'du', 'duda', 'dudar', 'dudoso', 'duelo', 'duer', 'dueña', 'dueño', 'dunaenpunto', 'duplicación', 'duque', 'duramente', 'durar', 'dureza', 'duro', 'durísima', 'durísimo', 'dw', 'débil', 'década', 'décado', 'déficit', 'détiennent', 'díaz', 'díaz-araujo', 'dínamo', 'dólar', 'dólares', 'eastmar', 'echar', 'echenique', 'echeverer', 'eclipse', 'eco', 'ecologista', 'economista', 'economía', 'económico', 'ecuador', 'ed', 'edad', 'edición', 'edificio', 'edil', 'edimburgo', 'editado', 'editar', 'editar|', 'editor', 'editorial', 'editorial|', 'eduardo', 'educacional', 'educación', 'educar', 'educativo', 'edwards', 'ee', 'ee.uu', 'eeff', 'eeuu', 'efectivamente', 'efectividad', 'efectivo', 'efecto', 'eficacia', 'eficaz', 'egipcio', 'egipto', 'eguigurar', 'einstein', 'ejecución', 'ejecutado', 'ejecutivo', 'ejemplar', 'ejemplificadoro', 'ejemplificar', 'ejemplo', 'ejercer', 'ejercicio', 'ejercito', 'ejerzo', 'ejército', 'elaborado', 'elaborar', 'elciudadano', 'elciudadano.com', 'elciudadanobiobío', 'eldíainforma', 'eldíainformar', 'eleccionario', 'elecciones2021', 'elecciones2021cl', 'eleccioneschvcnn', 'eleccioneseeuu', 'elección', 'electa', 'electo', 'elector', 'electoral', 'electos', 'electrónico', 'elegir', 'elemento', 'elevar', 'elguedar', 'eligeelpaísquequier', 'eliminación', 'eliminado', 'eliminar', 'eliminir', 'elisa', 'eliseo', 'elite', 'elle', 'elmostradorenlaclave', 'elogio', 'elon', 'elpinguino.com', 'eléctrico', 'emanado', 'emanar', 'embajada', 'embajado', 'embajador', 'embalse', 'embarazado', 'embarazo', 'embarcación', 'emblema', 'emergencia', 'emilia', 'emiliano', 'emilio', 'emisión', 'emisor', 'emisora', 'emitido', 'emitir', 'emmanuel', 'emocional', 'emocionalidad', 'emoción', 'emol.com', 'empañar', 'empezar', 'emplazamiento', 'emplazar', 'empleado', 'emplear', 'empleo', 'emprender', 'emprendido', 'empresa', 'empresariado', 'empresarial', 'empresario', 'empty', 'emular', 'ena', 'enano', 'enap', 'encabezado', 'encabezar', 'encaminado', 'encaminar', 'encapuchado', 'encarar', 'encargado', 'encargar', 'encender', 'encerrado', 'encerrar', 'encontrado', 'encontrar', 'encore', 'encubrimiento', 'encubrir', 'encuentro', 'encuesta', 'encuestado', 'encuestadoro', 'endurecer', 'enel', 'enemigo', 'energía', 'enero', 'enfatizar', 'enfermedad', 'enfocado', 'enfocar', 'enfoque', 'enfrançais', 'enfrascado', 'enfrascar', 'enfrentamiento', 'enfrentar', 'enfático', 'engañado', 'engañar', 'engaño', 'engañoso', 'enlace', 'enlalinea.cl', 'enlazar', 'enlodar', 'enmarcar', 'enmienda', 'enoja', 'enojar', 'enorme', 'enredar', 'enrique', 'ensayo', 'enseñar', 'ensuciar', 'ente', 'entender', 'enterar', 'enterprís', 'entidad', 'entorno', 'entorpecer', 'entrar', 'entrega', 'entregado', 'entregar', 'entrelazado', 'entretelón', 'entretener', 'entretenimiento', 'entrevista', 'entrevistar', 'entrevistascnn', 'entératir', 'envejecer', 'envenenar', 'enviado', 'enviar', 'envideo', 'envuelto', 'envíar', 'envío', 'eparte', 'epicentro', 'epidemia', 'epidemiar', 'epidemiólogo', 'episodio', 'equidad', 'equidistancia', 'equipo', 'equivocado', 'equivocar', 'eric', 'ernesto', 'erosionar', 'erradicar', 'error', 'errázuriz', 'erróneamente', 'erróneo', 'erupción', 'escala', 'escalado', 'escalofriante', 'escandaloso', 'escapar', 'escape', 'escasez', 'escaso', 'escena', 'escenario', 'escobar', 'escombro', 'esconder', 'escondido', 'escribir', 'escrito', 'escritor', 'escritora', 'escuchado', 'escuchar', 'escudo', 'escuela', 'escultura', 'escupir', 'escándalo', 'escéptico', 'esfuerzo', 'esgrimido', 'esgrimir', 'espacio', 'espaldo', 'espantoso', 'esparcido', 'esparcir', 'españa', 'español', 'especial', 'especialista', 'especializado', 'especializar', 'especialmemoria|', 'especialmente', 'especie', 'especificar', 'especulación', 'especulador', 'especular', 'específicamente', 'específico', 'espejo', 'esperado', 'esperanza', 'esperar', 'espiar', 'espina', 'espionaje', 'esplendor', 'espontáneo', 'esposa', 'esposo', 'espía', 'espíritu', 'esquema', 'esquivar', 'essal', 'est', 'estabilidad', 'estable', 'establecer', 'establecido', 'establecimiento', 'estacionamiento', 'estación', 'estadio', 'estadosunido', 'estadounidense', 'estafa', 'estallar', 'estallido', 'estarer', 'estatal', 'estigma', 'estigmatización', 'estilo', 'estimado', 'estimar', 'estipulado', 'estrangular', 'estratega', 'estrategia', 'estrategio', 'estratégico', 'estrecho', 'estrella', 'estrenar', 'estreno', 'estricto', 'estructura', 'estructural', 'estrés', 'estudiante', 'estudiantil', 'estudiar', 'estudio', 'estupidez', 'estupro', 'estándar', 'estés', 'et', 'etapa', 'etc', 'etc.', 'etcétera', 'eterno', 'etiquetacer', 'etiquetar', 'eugenio', 'eugenioderbez', 'europa', 'europea', 'europeo', 'eutanasia', 'eux', 'evacuar', 'evaluación', 'evaluar', 'evangélico', 'even', 'evento', 'eventual', 'evidencia', 'evidenciar', 'evidente', 'evidentemente', 'evitar', 'evo', 'evolucionar', 'evolución', 'evomoral', 'evópoli', 'ex', 'exabogado', 'exabrupto', 'exacerbar', 'exactamente', 'exacto', 'exagerado', 'exalmirante', 'examen', 'examinar', 'excandidato', 'excepción', 'excesivo', 'exceso', 'exclusivo', 'excomandante', 'excusa', 'excusar', 'exdiputado', 'exento', 'exgerente', 'exigencia', 'exigir', 'exintegrante', 'existencia', 'existir', 'exists', 'exitoso', 'exministra', 'exministro', 'expandir', 'expansión', 'experiencia', 'experimental', 'experimentar', 'experimento', 'experto', 'explicación', 'explicar', 'explicativo', 'explorar', 'explosión', 'explotar', 'explícito', 'exponencial', 'exponencialmente', 'exponente', 'exponer', 'exportación', 'exportar', 'exportir', 'expresado', 'expresar', 'expreser', 'expresidenta', 'expresidente', 'expresión', 'expreso', 'express', 'expuesto', 'expulsión', 'exsubsecretario', 'extender', 'extenso', 'exterior', 'externalidad', 'externo', 'extinguir', 'extranjero', 'extraordinario', 'extraterrestre', 'extraño', 'extrañísimo', 'extremar', 'extremismo', 'extremista', 'extremo', 'fa', 'fabiola', 'fabián', 'fabricación', 'fabricado', 'fabricar', 'facebook', 'fach', 'facilidad', 'facilitar', 'fact', 'fact-checking', 'factcheckinglt', 'factor', 'factual', 'facultad', 'fail', 'fair', 'fairness', 'fake', 'fakenew', 'fakenews', 'fakes', 'fakesnews', 'falacia', 'falla', 'fallar', 'fallecer', 'fallecido', 'fallecimiento', 'fallido', 'fallo', 'falsamente', 'falseamiento', 'falsear', 'falsedad', 'falsificación', 'falsificar', 'falso', 'faltar', 'fama', 'familia', 'familiar', 'familio', 'famoso', 'fantasma', 'farmacia', 'fascismo', 'fascista', 'fase', 'fast', 'faster', 'fatal', 'fatigar', 'fauci', 'fauna', 'faure', 'favor', 'favorecer', 'favorito', 'faz', 'fbi', 'fe', 'febrero', 'fecha', 'fechaber', 'federación', 'federal', 'federico', 'fedesur', 'feigl-ding', 'felipe', 'feliz', 'feminazi', 'feminismo', 'feminista', 'fenómeno', 'feria', 'feriado', 'fernando', 'fernández', 'festival', 'feuc', 'ff.aa', 'ffrench-davis', 'fi', 'fiabilidad', 'fiable', 'fianza', 'ficha', 'ficticio', 'fidedigno', 'fideicomiso', 'fiebre', 'fiel', 'fiesta', 'figura', 'figurar', 'fila', 'filial', 'filipino', 'filmado', 'filmar', 'filosofía', 'filtración', 'filtrado', 'filtrar', 'filtro', 'filósofa', 'finalizar', 'finalmente', 'financiado', 'financiamiento', 'financiar', 'financiero', 'fingir', 'finlandia', 'fiordo', 'firma', 'firmado', 'firmar', 'firme', 'first', 'fiscal', 'fiscalía', 'fiscalío', 'fisurar', 'flojo', 'flor', 'florencia', 'flores', 'florida', 'florido', 'flota', 'floyd', 'flujo', 'fne', 'foco', 'folha', 'fomentar', 'fomento', 'fondo', 'fontaine', 'for', 'forch', 'forestal', 'forma', 'formación', 'formador', 'formal', 'formalizar', 'formar', 'formateo', 'formato', 'formular', 'foro', 'forrado', 'fortalecer', 'fortnite', 'fortín', 'forzado', 'fosa', 'foto', 'fotografiar', 'fotografía', 'fotográfico', 'foto|', 'fox', 'fpmr', 'fracasar', 'fracaso', 'fragilidad', 'francia', 'francisca', 'francisco', 'franco', 'francés', 'franja', 'frase', 'fraude', 'fraudulento', 'frecuencia', 'frecuente', 'frei', 'freire', 'freixas', 'frenar', 'freno', 'frente', 'frenteamplista', 'from', 'frontal', 'frontera', 'frontero', 'frustrado', 'fruta', 'fruto', 'frágil', 'fría', 'frío', 'fsln', 'fuad', 'fuego', 'fuente', 'fuente-alba', 'fuerte', 'fuertemente', 'fuerza', 'fumador', 'funa', 'funar', 'funcionamiento', 'funcionar', 'funcionario', 'función', 'fundación', 'fundado', 'fundador', 'fundamental', 'fundamentalismo', 'fundamento', 'fundamentos', 'furgón', 'furia', 'furioso', 'fusión', 'fustigar', 'futbolista', 'futuro', 'futuro360', 'fácil', 'fácilmente', 'fármaco', 'félix', 'fértil', 'físico', 'fórmula', 'fútbol', 'g', 'gabinete', 'gabriel', 'gajardo', 'galardonado', 'galardonar', 'galguero', 'galli', 'gam', 'ganado', 'ganador', 'ganancia', 'ganar', 'garabato', 'garantizado', 'garantizar', 'garantía', 'garay', 'garcía', 'gas', 'gaseslacrimogeno', 'gasolina', 'gastar', 'gasto', 'gay-comunista', 'gazmuri', 'gc', 'gel', 'gendarmería', 'generación', 'generado', 'general', 'generalizado', 'generar', 'genio', 'gente', 'genómico', 'geographic', 'geológico', 'geopolítico', 'george', 'gerente', 'gestar', 'gestionar', 'gestión', 'gigante', 'gimnasta', 'gino', 'giorgio', 'giovanna', 'gira', 'girardi', 'gitanos', 'giuliani', 'glaciación', 'global', 'globo', 'gloria', 'glosario', 'go', 'gobernación', 'gobernador', 'gobernante', 'gobernar', 'gobierno', 'goce', 'godoy', 'golear', 'golf', 'golpe', 'golpear', 'golpiza', 'gomez', 'gonzalez', 'gonzalo', 'gonzález', 'google', 'gouvernement', 'gouvernements', 'grabación', 'grabado', 'grabar', 'gracia', 'gracias', 'grado', 'grandón', 'granja', 'gratis', 'gratuito', 'grave', 'gravedad', 'gravemente', 'gravísima', 'grayzonar', 'grayzone', 'gremial', 'gremialista', 'gremio', 'greta', 'gritar', 'grosero', 'group', 'grupo', 'gráfico', 'guagua', 'guaidó', 'guardar', 'guardia', 'guardian', 'guardián', 'gubernamental', 'guede', 'guerr', 'guerra', 'guerrar', 'guerrero', 'guiado', 'guillermo', 'guillier', 'guion', 'guiño', 'guión', 'gustar', 'gustavo', 'gusto', 'gutiérrez', 'guzmán', 'guía', 'gánster', 'gárgar', 'género', 'génesis', 'gómez', 'habilidad', 'habilita', 'habilitado', 'habilitar', 'habitacional', 'habitado', 'habitante', 'habitar', 'habitual', 'hablar', 'hablarer', 'hablemosenoff', 'hacienda', 'hackear', 'hackeo', 'hacker', 'haddad', 'hair', 'haitiano', 'haitián', 'haití', 'hallazgo', 'halpern', 'hang', 'harboe', 'harry', 'harvard', 'hashtag', 'hater', 'hbo', 'hectárea', 'hediondo', 'hegemonía', 'hegemónico', 'helicóptero', 'heredero', 'herido', 'herir', 'herm', 'herman', 'hermano', 'hernán', 'hernández', 'herramienta', 'herramientar', 'herrera', 'hertz', 'hervidero', 'hh', 'hidroxicloroquina', 'hielo', 'higienir', 'hija', 'hijo', 'hilarante', 'hilbert', 'hilfiger', 'hillary', 'hilo', 'himno', 'hincho', 'hiranar', 'hirane', 'hiriart', 'hispanoamérico', 'historia', 'historiador', 'historiadora', 'historio', 'históricamente', 'histórico', 'hito', 'hogar', 'hombre', 'homenajear', 'homicidio', 'homologar', 'homosexual', 'honesto', 'hong', 'honor', 'honrar', 'hora', 'horario', 'horrendo', 'horrible', 'hospedar', 'hospicio', 'hospital', 'hospitalizar', 'hotel', 'however', 'hrs', 'http://bit.ly/2aed1x4', 'http://bit.ly/2gspub4', 'http://bit.ly/2jhgp9y', 'http://bit.ly/2jwzlhq', 'http://bit.ly/2km9fgd', 'http://bit.ly/2mmolwm', 'http://bit.ly/2tkunpz', 'http://bit.ly/2yotbcr', 'http://bit.ly/319apqz', 'http://bit.ly/35azxs7', 'http://bit.ly/3683let', 'http://bit.ly/3tajupv', 'http://lt.cl/hcnc308zv0a', 'http://ow.ly/6op950c1j3n', 'http://ow.ly/dwch308xsot', 'http://ow.ly/gkce30ob5yq', 'http://ow.ly/keuz30nv7xq', 'http://ow.ly/keyq30lnzzb', 'http://ow.ly/qgqq308nmeh', 'http://ow.ly/szjo308o2', 'http://ow.ly/t0vw30mcut4', 'http://ow.ly/uk1a30pn3vs', 'http://ow.ly/v2ci308st8j', 'http://ow.ly/yyyw30lxltd', 'http://www.elsiglo.cl/2019/01/08/el-servicio-que-prestan-las-fake-news/', 'https://bit.ly/2fwspjc', 'https://bit.ly/2g0lz7', 'https://bit.ly/2inzbf8', 'https://bit.ly/2jzadkx', 'https://bit.ly/2lkviky', 'https://bit.ly/2nnsasw', 'https://bit.ly/2nrf14q', 'https://bit.ly/2pdfv9u', 'https://bit.ly/2scti24', 'https://bit.ly/2tuqyop', 'https://bit.ly/2up42ed', 'https://bit.ly/2yajf5', 'https://bit.ly/2yotbcr', 'https://bit.ly/2zqrtdx', 'https://bit.ly/31e6diq', 'https://bit.ly/31xvafw', 'https://bit.ly/32ac8lq', 'https://bit.ly/368wc6u', 'https://bit.ly/37eu1hh', 'https://bit.ly/39enz14', 'https://bit.ly/3bji7ux', 'https://bit.ly/3ecf1lk', 'https://bit.ly/3glzz1j', 'https://bit.ly/3ifjuq1', 'https://bit.ly/3ijojfw', 'https://bit.ly/3knmv5v', 'https://bit.ly/3nrnmxq', 'https://bit.ly/3pg0fxi', 'https://bit.ly/3qioo8', 'https://bit.ly/3rekq4u', 'https://bit.ly/3swfvm8', 'https://bit.ly/3xaddvh', 'https://bit.ly/3yya6jg', 'https://goo.gl/3qbswc', 'https://goo.gl/d8tt3v', 'https://goo.gl/ecmxdt', 'https://goo.gl/wch22z', 'https://radiolaclave.cl/politica/lo-que-se-encontro-el-indh-tratos-inhumanos-degradantes-crueles-y-en-particular-heridas-de-perdigones-y-desnudamiento-de-mujeres/', 'https://t.co/hvb1yjk23q', 'https://t.co/q51z86miv5', 'https://www.duna.cl/noticias/2021/05/25/efecto-infodemia-el-exceso-de-informacion-durante-la-pandemia-que-ha-generado-un-apagon-mental/', 'https://www.duna.cl/programa/ahora-en-duna/2021/05/19/nicolas-castellano-es-verdad-que-la-sociedad-espanola-como-la-sociedad-europea-esta-muy-polarizada-con-la-realidad-migratoria-porque-la-manipulacion-y-las-noticias-falsas-hacen-que-la-gente-crea-l/', 'https://www.elciudadano.com/actualidad/el-fracaso-de-la-ultraderecha-chilena-con-su-manual-bannon-y-los-fake-news-en-la-eleccion-presidencial/12/20/', 'hualpén', 'huasco', 'huelga', 'huepe', 'hugo', 'huir', 'human', 'humanidad', 'humanista', 'humanitario', 'humano', 'humanos', 'humo', 'humor', 'hungría', 'huracán', 'huérfano', 'hágasar', 'héctor', 'hércul', 'hígado', 'hörnle', 'i', 'ibuprofeno', 'ibáñez', 'icónico', 'idea', 'ideal', 'identidad', 'identificación', 'identificado', 'identificar', 'ideo', 'ideología', 'ideológico', 'idoín', 'iglesia', 'iglesio', 'ignacia', 'ignacio', 'ignorancia', 'ignoranciar', 'ignorancio', 'ignorar', 'ii', 'il', 'ilegal', 'ilegalidad', 'ilegalmente', 'iluminar', 'ilustrar', 'ilícito', 'imagen', 'imaginaccion', 'immanuel', 'impactar', 'impacto', 'imparcial', 'impartir', 'impedir', 'imperdible', 'imperio', 'implementación', 'implementar', 'implicado', 'implicancia', 'implicar', 'imponer', 'importado', 'importancia', 'importante', 'importar', 'imposible', 'imprecisión', 'impreciso', 'impresentable', 'impresionante', 'impresión', 'impuesto', 'impulsado', 'impulsar', 'impunidad', 'imputación', 'imputado', 'imputar', 'imss', 'in', 'inacabado', 'inacap', 'inaceptable', 'inadmisible', 'inauguración', 'incendiar', 'incendiario', 'incendio', 'incentivar', 'incertidumbre', 'incesante', 'incidencia', 'incidente', 'incidir', 'incierto', 'incitación', 'incitar', 'incluido', 'incluir', 'inclusive', 'inclusión', 'incompleto', 'incomprensible', 'inconclusa', 'incongruente', 'incorrecto', 'incrementar', 'incremento', 'increpar', 'increíble', 'incriminar', 'inculpar', 'incumplimiento', 'incumplir', 'incurrir', 'incursionar', 'incursión', 'incógnita', 'incómodo', 'indagación', 'indagar', 'indagatoria', 'indagatorio', 'indebido', 'indecoroso', 'indefenso', 'indemnización', 'indemnizar', 'independencia', 'independiente', 'indeseable', 'indh', 'india', 'indicación', 'indicar', 'indiferente', 'indignación', 'indignado', 'indignante', 'indio', 'individuo', 'indonesia', 'inducir', 'indultar', 'industria', 'industrio', 'indígén', 'ineficiencia', 'inenglish', 'inescrupuloso', 'infante', 'infantil', 'infect', 'infectar', 'infecter', 'infertilidad', 'infestado', 'infidelidad', 'infiltración', 'infiltrado', 'influencer', 'influencers', 'influencia', 'influenciado', 'influir', 'influyente', 'info', 'infobae', 'infodemia', 'infodemiar', 'información', 'informaconectaconstruir', 'informaconectaconstruye', 'informado', 'informar', 'informarte', 'information', 'informativo', 'informe', 'informefalso', 'informir', 'informático', 'infracción', 'infringir', 'infundado', 'infórmate', 'ingeniero', 'ingenuidad', 'ingenuo', 'inglés', 'ingresado', 'ingresar', 'ingreso', 'inhabilitado', 'inhd', 'iniciado', 'iniciar', 'iniciativa', 'iniciativo', 'inicio', 'injerencia', 'injurio', 'injurioso', 'injusto', 'inmediatamente', 'inmediato', 'inmediato|', 'inmigración', 'inmigrante', 'inminente', 'inmobiliario', 'inmune', 'inmunización', 'inmunólogo', 'innecesario', 'innovación', 'innumerable', 'inocencia', 'inocente', 'inoculación', 'inocular', 'inolvidable', 'inquietante', 'inquieto', 'inscrito', 'inseguridad', 'insinuar', 'insistencia', 'insistente', 'insistir', 'inspiración', 'instagram', 'instalación', 'instalado', 'instalar', 'instancia', 'instante', 'instantáneo', 'instar', 'instaurar', 'institucional', 'institucionalidad', 'institución', 'institute', 'instituto', 'instructivo', 'instrumento', 'insultar', 'insulto', 'insumiso', 'insumo', 'insólito', 'integrante', 'integridad', 'intelectual', 'inteligencia', 'inteligente', 'intencionadamente-', 'intencionado', 'intencional', 'intencionalidad', 'intencionalmente', 'intención', 'intendencia', 'intendente', 'intenso', 'intentar', 'intento', 'interacción', 'interamericán', 'intercambio', 'interdisciplinario', 'interesado', 'interesante', 'interferencia', 'interferencia.cl', 'interino', 'interior', 'interlocutor', 'interminable', 'internacional', 'internacionalmente', 'internación', 'internet', 'interno', 'interpelar', 'interponer', 'interpretación', 'interrogar', 'interrumpir', 'interruptor', 'intervalor', 'intervención', 'intervenir', 'interés', 'intoxicación', 'intoxicadoro', 'intoxicar', 'intrascendente', 'introducir', 'inundar', 'inusual', 'invadir', 'invasión', 'invención', 'inventado', 'inventar', 'inventor', 'inversión', 'invertir', 'investigación', 'investigado', 'investigador', 'investigar', 'invisibilización', 'invitación', 'invitado', 'invitar', 'invocar', 'involucrado', 'involucramiento', 'involucrar', 'involucró', 'inédito', 'iphone', 'ipso', 'iquique', 'ir', 'ira', 'iraní', 'irlandés', 'ironizar', 'irracional', 'irreal', 'irregular', 'irregularidad', 'irrelevante', 'irrenunciable', 'irresponsabilidad', 'irresponsable', 'irreversible', 'irrumpir', 'irrupción', 'is', 'isabel', 'isapre', 'isl', 'islam', 'isp', 'israel', 'israelí', 'ist', 'it', 'italia', 'italiano', 'its', 'iturra', 'ivette', 'iván', 'izikson', 'izkia', 'izquierda', 'izquierdo', 'ja', 'jackie', 'jackson', 'jadue', 'jaime', 'jair', 'jairbolsonaro', 'jak', 'jamás', 'japonés', 'japón', 'jaque', 'jara', 'jaraquemado', 'jardín', 'jasson', 'javier', 'javiero', 'jean', 'jear', 'jefa', 'jefe', 'jefferson', 'jennifer', 'jerez', 'jessica', 'jesús', 'jil', 'jimmy', 'joao', 'joaquín', 'jocoso', 'jodar', 'joe', 'jofré', 'johannes', 'john', 'jong', 'jong-un', 'jonás', 'jorge', 'jornada', 'jornadar', 'jornado', 'jose', 'josele', 'josé', 'journal', 'journalism', 'journalisme', 'joven', 'joyita', 'juan', 'jubilado', 'judicial', 'juego', 'juegos', 'jueves', 'juez', 'jugada', 'jugador', 'jugar', 'jugoso', 'juicio', 'julian', 'julio', 'julián', 'junio', 'juniors', 'junta', 'juntar', 'jurado', 'jurista', 'jurídico', 'justamente', 'justicia', 'justicio', 'justificación', 'justificar', 'justo', 'juzgado', 'juzgar', 'k-pop', 'kaiser', 'kar', 'kardashian', 'karinasoza', 'karol', 'kast', 'katherine', 'kb', 'kdm', 'kgb', 'khalifa', 'kike', 'kim', 'king', 'kiosco', 'kirchner', 'ko', 'koala', 'kong', 'kremlin', 'kurdistán', 'kurdo', 'kyi', \"l'exemple\", \"l'ultra-droite\", 'l@s', 'labor', 'laboral', 'laboratorio', 'laborista', 'labot', 'lacomunidaddelcontenido', 'lacrimógeno', 'lady', 'lago', 'lagos', 'laguna', 'lamentable', 'lamentablemente', 'lamentar', 'lamento', 'lamesa13', 'lancir', 'lanza', 'lanzado', 'lanzar', 'laprensaaustral', 'largo', 'largometraje', 'larraín', 'larrondo', 'larroulet', 'latercerapm', 'latina', 'latino', 'latinoamericano', 'latinoamérica', 'latinoamérico', 'lautaro', 'lavrov', 'lavín', 'law', 'ldp', 'league', 'lección', 'leche', 'lector', 'lectura', 'leer', 'lees', 'legado', 'legal', 'legalizar', 'legislación', 'legislador', 'legisladora', 'legislar', 'legislativo', 'legitimación', 'legitimir', 'legítimo', 'leiva', 'lejano', 'lejos', 'lema', 'lenguaje', 'lento', 'leonardo', 'lepra', 'lesa', 'lescornez', 'lesionado', 'lesión', 'lesvolamoslarajar', 'letelier', 'letra', 'levantar', 'lewin', 'ley', 'leyenda', 'leído', 'león', 'lgtb', 'li', 'liberación', 'liberal', 'liberar', 'libertad', 'librar', 'libre', 'libreto', 'libro', 'libérate', 'licencia', 'liceo', 'licitación', 'lider', 'liderado', 'liderar', 'liderazgo', 'lidiar', 'lienzo', 'ligado', 'ligar', 'lilia', 'limitar', 'limpiar', 'limón', 'linchado', 'linchamiento', 'linconao', 'lingüístico', 'link', 'lionel', 'lirar', 'lista', 'listado', 'listar', 'listo', 'litro', 'live', 'living', 'llama', 'llamado', 'llamar', 'llamativo', 'llamárar', 'llebul', 'llegado', 'llegar', 'lleno', 'llorar', 'llorón', 'llover', 'lo+leer', 'lo+leído', 'lobo', 'local', 'localidad', 'loco', 'locura', 'locutor', 'logo', 'logrado', 'lograr', 'lollapalooza', 'lomásleído', 'loncon', 'loncon ', 'loncón', 'londres', 'longaví', 'loquedebessaberhoy', 'loslago', 'lotus', 'loveday', 'lt.cl/hpko309b99n', 'ltda', 'ltdomingo', 'luca', 'lucero', 'lucha', 'luchador', 'luchar', 'lucho', 'luciano', 'lucir', 'lucrar', 'lucrativo', 'lucro', 'lugar', 'luis', 'luksic', 'lumaco', 'luna', 'lunes', 'luz', 'lvdm', 'lácteo', 'lápido', 'lápiz', 'léelo', 'líbero', 'líder', 'límite', 'línea', 'línear', 'líneo', 'lógico', 'lópez', 'l’homme', 'm', 'm.', 'macabro', 'macarena', 'macarén', 'macaya', 'macer', 'machi', 'machista', 'macri', 'macron', 'macías', 'madonna', 'madre', 'madrina', 'madrugada', 'maduro', 'maestra', 'magallanes', 'magallán', 'magdalena', 'magistrado', 'magna', 'magnate', 'magnetismo', 'magnitud', 'magnífico', 'mago', 'mahmud', 'maillet', 'maipú', 'maite', 'maitén', 'mal-información', 'malabarista', 'malasia', 'maldonado', 'maleducado', 'malestar', 'maletero', 'maliciosamente', 'maliciós', 'malintencionado', 'malleco', 'malo', 'maltrato', 'mamadera', 'mamá', 'manchar', 'manchester', 'mandar', 'mandatario', 'mandato', 'mandel', 'mando', 'manejar', 'manejo', 'manifestación', 'manifestante', 'manifestar', 'manipulación', 'manipulado', 'manipular', 'mano', 'mantener', 'mantenernos', 'mantenimiento', 'manto', 'manual', 'manuel', 'manzano', 'mapocho', 'mapu', 'mapuche', 'mapuches', 'mapuexpress', 'maquillaje', 'mar', 'maradona', 'maradonar', 'marca', 'marcado', 'marcar', 'marcela', 'marcelar', 'marcelo', 'marcha', 'marchar', 'marcial', 'marciales', 'marcianeke', 'marco', 'marga', 'marianelapaco', 'mariano', 'marido', 'marielle', 'marina', 'marinivoc', 'marinovic', 'mario', 'marité', 'mark', 'marketing', 'marlene', 'marte', 'martes', 'martin', 'martín', 'martínez', 'marxista', 'maryland', 'marzo', 'maría', 'marín', 'marítimo', 'masa', 'mascarilla', 'mascarillar', 'masificación', 'masificar', 'masivamente', 'masivo', 'massaro', 'masvida', 'masvido', 'matamala', 'matamalo', 'matanza', 'matar', 'matemático', 'materia', 'material', 'materio', 'maternidad', 'matinal', 'mato', 'matrimonio', 'matrix', 'matriz', 'matus', 'matutino', 'matías', 'maule', 'mauricio', 'mauriciomacri', 'mauro', 'max', 'mayo', 'mayol', 'mayoritariamente', 'mayoría', 'mañalich', 'mañana', 'mcclenaghan', 'me-o', 'mecanismo', 'mecánico', 'mediado', 'medianoche', 'medicamento', 'medicina', 'medición', 'medida', 'medidar', 'medido', 'medidor', 'medieval', 'medir', 'mediático', 'mega', 'megaincendio', 'mejorar', 'melania', 'melipilla', 'melnick', 'mem', 'meme', 'memoria', 'memoriar', 'memorio', 'mencionado', 'mencionar', 'mención', 'mendoza', 'menor', 'menosprecio', 'mensaje', 'mensajeer', 'mensajería', 'mensajerío', 'mental', 'mentar', 'mente', 'mentholatum', 'mentir', 'mentira', 'mentirar', 'mentirita', 'mentiro', 'mentiroso', 'mentirós', 'merc', 'mercado', 'mercados|', 'mercurio', 'merecer', 'merkel', 'mero', 'mery', 'mes', 'mesa', 'mesacentral', 'messi', 'meteorito', 'metido', 'metodología', 'metro', 'metropolitana', 'metropolitano', 'mevacuno', 'mevacuno.gob.cl', 'mexicano', 'mexico', 'mezcla', 'miami', 'micco', 'michael', 'michel', 'michelle', 'micrófono', 'miedo', 'miembro', 'mienta', 'miente', 'migración', 'migrant', 'migrante', 'migratorio', 'miguel', 'mike', 'milagro', 'milagroso', 'milenio', 'milicia', 'militante', 'militar', 'million', 'millions', 'millonario', 'millones-', 'milton', 'mimo', 'mineduc', 'mineduc ', 'minero', 'minimizar', 'ministerio', 'ministra', 'ministrar', 'ministro', 'minoritario', 'minoría', 'minsal', 'minsal.cl', 'minuto', 'minvu', 'mir', 'mira', 'mirada', 'mirado', 'miranda', 'miranda ', 'mirar', 'mire', 'mirosevic', 'misiir', 'misil', 'misión', 'misterio', 'misógino', 'mit', 'mitad', 'mito', 'mivoz', 'mix', 'mixto', 'miércoles', 'moción', 'moda', 'modatima', 'modatimo', 'modelo', 'moderación', 'moderado', 'moderno', 'modero', 'modificación', 'modificar', 'moisés', 'molar', 'moldear', 'molestar', 'molestia', 'molesto', 'molina', 'molotov', 'momento', 'moncada', 'monckeberg', 'mondo', 'moneda', 'monitoreo', 'monopolio', 'monserrat', 'monstruo', 'montaje', 'montar', 'monte', 'montealegre', 'montecinos', 'montenegro', 'monto', 'mop', 'mora', 'moraes', 'moral', 'morales', 'morbo', 'morboso', 'more', 'moreira', 'morel', 'morir', 'mortal', 'mortalidad', 'mosciatti', 'moscú', 'mosqueó', 'mostrador', 'mostrar', 'motel', 'motivación', 'motivar', 'motivo', 'motor', 'motta', 'mouse', 'mover', 'movilidad', 'movilización', 'movilizar', 'movimiento', 'msnbc', 'muchísima', 'muchísimo', 'muerte', 'muerto', 'mujer', 'mujica', 'multa', 'multar', 'multimedia', 'multimillonario', 'multiplicar', 'multitudinario', 'mundial', 'mundo', 'mundo|', 'municipal', 'municipalidad', 'municipio', 'murciélago', 'muro', 'museo', 'musical', 'musk', 'mutación', 'muén', 'muñeca', 'muñoz', 'myanmar', 'mª', 'máquina', 'máquinar', 'máximo', 'médico', 'método', 'méxico', 'même', 'mínimo', 'mónico', 'móvil', 'mönckeberg', 'múltiple', 'música', 'músico', 'nacer', 'nacido', 'nacimiento', 'nacional', 'nacionalidad', 'nacionalista', 'naciones', 'nación', 'nadapersonal', 'name', 'napoleón', 'narcisismo', 'narco', 'narcoterrorismo', 'narrativo', 'narváez', 'nasa', 'natalia', 'national', 'natural', 'naturaleza', 'naturalizar', 'naufragar', 'navalni', 'navarro', 'navegar', 'navia', 'navidad', 'nazifascista', 'ne', 'necesario', 'necesidad', 'necesitar', 'negacionismo', 'negacionista', 'negación', 'negar', 'negativo', 'negociación', 'negocio', 'negro', 'netanyahu', 'netflix', 'network', 'neumann', 'neumonía', 'neurocirugía', 'neurocirujano', 'neurorocirugía', 'neurotóxico', 'neutralizar', 'new', 'news', 'newton', 'nicaragua', 'nicaraguo', 'nicola', 'nicolás', 'nieguir', 'nieta', 'nieto', 'nigeria', 'ninguneo', 'nino', 'nius', 'nivel', 'niña', 'niño', 'no+afp', 'noche', 'nom', 'nombrado', 'nombramiento', 'nombrar', 'nombre', 'nono', 'norma', 'normal', 'normalidad', 'normalizar', 'normalmente', 'normativa', 'norte', 'norteamericano', 'norton', 'noruego', 'nostradamu', 'nota', 'notable', 'notar', 'noticia', 'noticiar', 'noticias-', 'noticiasdeldir', 'noticiasdeldía', 'noticiasdeverdad', 'noticiasfalsasmv', 'noticiasfalso', 'noticiero', 'noticioso', 'notificar', 'noto', 'notoriedad', 'nova', 'novedad', 'novia', 'novichok', 'noviembre', 'novio', 'nube', 'nuclear', 'nuevamente', 'nulo', 'numeroso', 'nuncama', 'nuyado', 'n°', 'número', 'núñez', \"o'higgins\", 'obama', 'obedecer', 'obispo', 'objeción', 'objetivo', 'objeto', 'obligación', 'obligado', 'obligar', 'obligatorio', 'obra', 'observación', 'observador', 'observar', 'observatorio', 'observo', 'obstaculizar', 'obstante', 'obstrucción', 'obstáculo', 'obtener', 'obviamente', 'obvio', 'ocasión', 'occidental', 'occidente', 'ocioso', 'octavio', 'octubre', 'ocular', 'ocultamiento', 'ocultar', 'ocupación', 'ocupar', 'ocurrido', 'ocurrir', 'odio', 'odiosidad', 'oea', 'of', 'ofensivo', 'oferta', 'ofertar', 'oficia', 'oficial', 'oficialismo', 'oficialista', 'oficialmente', 'oficiar', 'oficina', 'oficio', 'ofiuco', 'ofrecer', 'ofrecimiento', 'oir', 'ojalá', 'ojo', 'ola', 'oligarquía', 'olivar', 'olivia', 'olvidar', 'olímpico', 'olímpicos', 'omisión', 'omitir', 'oms', 'on', 'onda', 'one', 'onemi', 'ong', 'ong´s', 'online', 'onu', 'opaq', 'opción', 'openai', 'operación', 'operador', 'operar', 'operativo', 'opinar', 'opinion', 'opinión', 'opinión|', 'opiñón', 'oponente', 'oponer', 'oportunidad', 'oportuno', 'oposición', 'opositor', 'optar', 'optimista', 'orden', 'ordenanza', 'ordenar', 'orellán', 'organismo', 'organización', 'organizado', 'organizador', 'organizar', 'orgía', 'orientación', 'orientado', 'orientar', 'oriente', 'origen', 'originado', 'original', 'originar', 'originario', 'orina', 'orquestado', 'orrego', 'orsini', 'ortega', 'orthusteguy', 'oscuridad', 'oscuro', 'oso', 'osorio', 'osornino', 'osorno', 'ossa', 'ossandón', 'otorgado', 'otorgar', 'otroro', 'outil', 'oxford', 'oxiquim', 'oxígeno', 'oyarzún', 'o’higgins', 'p.i', 'pablo', 'pacer', 'paciente', 'pacto', 'pacífico', 'padilla', 'padre', 'pagado', 'pagar', 'pago', 'paillaco', 'paine', 'palabra', 'palabrar', 'palacio', 'palestino', 'palestra', 'palestro', 'palito', 'palizo', 'palma', 'palo', 'pamela', 'pamelar', 'panamericán', 'pancho', 'pandemia', 'pandemiar', 'pandemic', 'pandemio', 'pandémie', 'panel', 'panelista', 'paneque', 'panfleto', 'panguipulli', 'pantalla', 'pantallazo', 'paolo', 'papa', 'papel', 'papeleta', 'papeleto', 'papelón', 'papers', 'papá', 'paquete', 'par', 'paracetamol', 'paradero', 'paradigma', 'paralelo', 'paralización', 'paranoia', 'parar', 'parasito', 'parche', 'parcialidad', 'parecer', 'pareciero', 'pareja', 'pari', 'paris', 'parisi', 'parived', 'parlamentario', 'parlamento', 'paro', 'parodia', 'parodio', 'parque', 'participación', 'participante', 'participar', 'particular', 'particularmente', 'partidario', 'partidista', 'partido', 'parís', 'pasaje', 'pasajero', 'pasaporte', 'pasar', 'pasear', 'paseo', 'pasivo', 'paso', 'pasoapaso', 'pasquín', 'pasta', 'pastor', 'pata', 'patagonia', 'patipelado', 'patologizar', 'patricia', 'patricio', 'patrio', 'patriota', 'patrioto', 'patrocinar', 'patrulla', 'patrón', 'patético', 'paul', 'paula', 'paulina', 'paulo', 'paulsen', 'paulín', 'pauta', 'pays', 'paz', 'país', 'país|', 'pc', 'pcr', 'pdi', 'pebre', 'pecado', 'pederastía', 'pedido', 'pedir', 'pedofilia', 'pedofilio', 'pedro', 'pegar', 'pekeka', 'pelea', 'pelear', 'peligro', 'peligrosidad', 'peligroso', 'peligrosísimo', 'pellegrini', 'película', 'pena', 'penal', 'penalizar', 'penar', 'pendiente', 'pene', 'penquista', 'pensado', 'pensador', 'pensamiento', 'pensar', 'pensión', 'people', 'pequeñez', 'pequeño', 'percatar', 'percepción', 'perder', 'perdido', 'perdón', 'perfeccionar', 'perfecto', 'perfil', 'pericial', 'periodismo', 'periodista', 'periodo', 'periodístico', 'perito', 'periódicamente', 'periódico', 'perjudicado', 'perjudicar', 'perjuicio', 'permanecer', 'permanencia', 'permanente', 'permanentemente', 'permisividad', 'permiso', 'permitido', 'permitir', 'permitiéremo', 'perro', 'persecución', 'persecutor', 'perseguir', 'persistir', 'persona', 'personaje', 'personal', 'personalidad', 'personalización', 'personar', 'personero', 'personn', 'persuasión', 'persón', 'pertenecer', 'perteneciente', 'pertinente', 'perturbador', 'peruano', 'perversión', 'período', 'perú', 'pescador', 'pese', 'peso', 'pesos', 'petición', 'petista', 'pettrar', 'peuco', 'peumo', 'peut', 'peut-il', 'pez', 'peña', 'peñuelar', 'pfizer', 'picado', 'pichilemu', 'pie', 'piel', 'pierdar', 'pikachu', 'pilar', 'pillar', 'piloto', 'pingüino', 'pino', 'pinochet', 'pinochetismo', 'pinocho', 'pinto', 'pio', 'pionero', 'piquero', 'pisar', 'piso', 'pista', 'pit', 'pizarro', 'piñera', 'piñero', 'placer', 'plaga', 'plan', 'planeta', 'planificación', 'planificar', 'plano', 'planpasoapaso', 'plantación', 'plantar', 'planteado', 'planteamiento', 'plantear', 'plantel', 'plasma', 'plata', 'plataforma', 'plataformar', 'plate', 'plato', 'plaza', 'plazo', 'plebiscito', 'plebiscito2020', 'pleno', 'pleuriti', 'plr', 'pluralismo', 'pluralista', 'plurinacional', 'plus', 'pnud', 'población', 'poblador', 'poblete', 'pobre', 'pobreza', 'podcast', 'poderoso', 'podio', 'podrar', 'point', 'polar', 'polarización', 'polarizado', 'policial', 'policía', 'political', 'politicamente', 'politico', 'politika', 'politiko', 'politiqu', 'polo', 'polola', 'polémica', 'polémicar', 'polémico', 'polígrafo', 'política', 'políticamente', 'política|', 'político', 'político-policial', 'pompeo', 'ponencia', 'pontificia', 'pontífice', 'popular', 'populismo', 'populista', 'populistainment', 'porcentaje', 'porno', 'porqué', 'portada', 'portadasdeladictadurar', 'portado', 'portal', 'portar', 'portavoz', 'porteño', 'porto', 'portuario', 'portugal', 'portugués', 'pos', 'poseer', 'posesión', 'posibilidad', 'posibilitar', 'posicionamiento', 'posicionar', 'posición', 'positivamente', 'positivo', 'posponer', 'post', 'post-verdad', 'posteado', 'postear', 'posteo', 'postergar', 'posterior', 'posteriormente', 'postulación', 'postulant', 'postulante', 'postular', 'postura', 'posverdad', 'potable', 'potencia', 'potencial', 'potencialmente', 'potenciar', 'poto', 'pour', 'pourquoi', 'poñén', 'ppd', 'practicar', 'precandidato', 'precedente', 'precio', 'precisamente', 'precisar', 'precisión', 'preciso', 'predecir', 'preexistent', 'preferencia', 'preferenciar', 'preferido', 'preferir', 'pregunta', 'preguntar', 'prejuicio', 'preliminar', 'preller', 'premeditado', 'premiar', 'premier', 'premio', 'premisa', 'prensa', 'prensar', 'prenso', 'preocupación', 'preocupado', 'preocupante', 'preocupar', 'preparación', 'preparado', 'preparar', 'presencia', 'presenciado', 'presencial', 'presenciar', 'presentación', 'presentado', 'presentamos', 'presentar', 'presente', 'presidencia', 'presidencial', 'president', 'presidenta', 'presidentar', 'presidente', 'presidio', 'presionar', 'presión', 'preso', 'presse', 'prestar', 'prestigioso', 'presunto', 'presupuesto', 'pretender', 'prevención', 'prevenir', 'preventivo', 'previamente', 'previo', 'previsional', 'primar', 'primaria', 'primario', 'prime', 'primicia', 'primordial', 'principal', 'principalmente', 'principio', 'priori', 'prioridad', 'prisión', 'privacidad', 'privación', 'privado', 'privilegiado', 'privilegio', 'pro', 'pro-trump', 'probabilidad', 'probable', 'probar', 'probidad', 'problema', 'procedencia', 'proceder', 'procedimiento', 'procesar', 'proceso', 'proclive', 'procurar', 'producción', 'producir', 'productividad', 'producto', 'productor', 'proferir', 'profesional', 'profesionalidad', 'profesionalismo', 'profesión', 'profesor', 'profesora', 'profundo', 'profusamente', 'programa', 'programación', 'programado', 'prohibamos', 'prohibición', 'prohibido', 'prohibir', 'prohíbir', 'proliferación', 'proliferar', 'promedio', 'promesa', 'prometer', 'promocionar', 'promoción', 'promover', 'promovido', 'promulgar', 'pronosticar', 'pronunciar', 'propacer', 'propagación', 'propagado', 'propagador', 'propaganda', 'propagar', 'propenso', 'propiciar', 'propiedad', 'propietario', 'proponer', 'proporcionado', 'proporcionar', 'propuesta', 'propuesto', 'propósito', 'protagonista', 'protagonizado', 'protagonizar', 'protección', 'proteger', 'protegido', 'protesta', 'protestar', 'protocolo', 'protégetar', 'provecho', 'proveer', 'provenir', 'provincia', 'provocado', 'provocar', 'provocativo', 'provoquer', 'provoste', 'proyectado', 'proyecto', 'prueba', 'práctica', 'práctico', 'príncipe', 'prófugo', 'ps', 'psicología', 'psicológicamente', 'psicológico', 'psicosis', 'psicólogo', 'psl', 'psu', 'pt', 'ptb', 'publicación', 'publicado', 'publicar', 'publicidad', 'publicitar', 'publicitario', 'pucv', 'pucón', 'puebla', 'pueblo', 'puente', 'puerta', 'puerto', 'puesto', 'pugh', 'pugna', 'pulgar', 'pulmón', 'pulso', 'punta', 'puntaarén', 'puntar', 'punto', 'puq', 'puro', 'putin', 'pyme', 'página', 'página13', 'páginar', 'págín', 'pánico', 'pérdida', 'pérdido', 'pérez', 'pérez-acle', 'públicamente', 'público', 'qanon', 'qualifier', 'quedar', 'quehacer', 'quejar', 'quelques', 'quema', 'quemado', 'quemar', 'querella', 'querellacer', 'querellante', 'querellar', 'querer', 'question', 'qui', 'quiebra', 'quiebre', 'quilpué', 'quintero', 'quirúrgico', 'quisir', 'quitar', 'quédateenradar', 'químico', 'qu’il', 'r', 'rabio', 'rachel', 'racional', 'racismo', 'racista', 'radial', 'radio', 'radiodifusión', 'radiografía', 'radiolaclave', 'radiolaclave.cl', 'rafa', 'rafael', 'ramírez', 'ramón', 'rancagua', 'ranking', 'rapidez', 'raptar', 'raquel', 'raro', 'rascar', 'rasgo', 'rastrear', 'ratificar', 'rating', 'rato', 'rayar', 'razón', 'raíz', 'raúl', 'rd', 're-share', 'reaccionar', 'reacción', 'reafirmar', 'real', 'realicer', 'realidad', 'realización', 'realizador', 'realmente', 'reaparecer', 'rebaja', 'rebajar', 'rebelar', 'rebelde', 'rebolledo', 'recalcar', 'recepción', 'rechazar', 'rechazo', 'recibir', 'reciclar', 'reciente', 'recientemente', 'recinto', 'recién', 'reclamación', 'reclamar', 'reclamo', 'recluir', 'recoger', 'recoleta', 'recoletar', 'recoleto', 'recomendación', 'recomendar', 'reconnaissent', 'reconnaître', 'reconocer', 'reconocido', 'reconocimiento', 'reconstruir', 'recopilación', 'recopilar', 'recordado', 'recordar', 'recorte', 'recrudecer', 'recta', 'rectificar', 'rector', 'recuento', 'recuperación', 'recuperar', 'recurrencia', 'recurrente', 'recurrir', 'recurso', 'red', 'redacción', 'redactor', 'redessocial', 'redes|', 'redsocial', 'reducción', 'reducir', 'reelección', 'reemplazar', 'reenviado', 'reenviar', 'reenvío', 'referencia', 'referente', 'referido', 'referir', 'reflejar', 'reflexionar', 'reflexión', 'reforma', 'reformalizar', 'reforzado', 'reforzar', 'refugiado', 'refugiar', 'refutar', 'regalar', 'regar', 'reginato', 'region', 'regional', 'regir', 'registrado', 'registrar', 'registro', 'región', 'regla', 'reglamento', 'regresar', 'regreso', 'regulación', 'regulador', 'regular', 'regularización', 'rehusar', 'reina', 'reinado', 'reino', 'reinounido', 'reinserción', 'reis', 'reiteradamente', 'reiterado', 'reiterar', 'reivindicar', 'relacionado', 'relacionar', 'relación', 'relajar', 'relatar', 'relativizar', 'relativo', 'relato', 'relevancia', 'relevante', 'relevar', 'religioso', 'religión', 'reloaded', 'reloj', 'relucir', 'remarcar', 'remecido', 'remecir', 'remedio', 'remitir', 'remo', 'remoción', 'remover', 'remuneración', 'remède', 'rencor', 'rendición', 'rendir', 'renovación', 'rentar', 'renuncia', 'renunciar', 'reo', 'reparación', 'reparar', 'repartir', 'repasar', 'repatriar', 'repentino', 'repercusión', 'repercutir', 'repetidamente', 'repetido', 'repetir', 'replicado', 'replicar', 'report', 'reportaje', 'reportajeeldía', 'reportar', 'reporte', 'reportear', 'reporteo', 'reportera', 'reportero', 'reporting', 'reportir', 'reposición', 'reprendir', 'represalia', 'representación', 'representado', 'representante', 'representar', 'represión', 'reprimido', 'reproducir', 'republicano', 'repudiar', 'repuertero', 'reputación', 'república', 'repúblico', 'requerido', 'requerimiento', 'requerir', 'requisito', 'resaltar', 'rescate', 'rescatista', 'reserva', 'reservista', 'resguardo', 'residencia', 'resistencia', 'resistir', 'resolución', 'resolver', 'respaldado', 'respaldar', 'respaldo', 'respectivamente', 'respectivo', 'respetar', 'respeto', 'respirar', 'respiratorio', 'responder', 'responsabilidad', 'responsabilizar', 'responsable', 'responsablemente', 'respuesta', 'respuestar', 'respuesto', 'restar', 'restaurante', 'restricción', 'restringir', 'resultado', 'resultar', 'resumen', 'resumen.cl', 'retener', 'retirado', 'retiran', 'retirar', 'retiro', 'reto', 'retorno', 'retractar', 'retransmisión', 'retrasar', 'retraso', 'retrato', 'retroceder', 'retuitear', 'retuiteó', 'reunir', 'reunión', 'reuters', 'revelación', 'revelar', 'reventar', 'revertir', 'revisado', 'revisar', 'revisión', 'revista', 'revivir', 'revocar', 'revolucionario', 'revolución', 'revuelo', 'revuelta', 'revés', 'rey', 'reyes', 'rezar', 'reçoivent', 'reúnir', 'rhys', 'ricardo', 'rico', 'ridículo', 'riesgo', 'rifa', 'rigor', 'riguroso', 'rincón', 'riot', 'ripley', 'riquelme', 'risa', 'riva', 'rival', 'river', 'riñón', 'rm', 'rn', 'robar', 'robert', 'roberto', 'robertojefferson', 'robo', 'rociar', 'rockaxi', 'rocío', 'rodar', 'rodear', 'rodeo', 'rodrigo', 'rodríguez', 'rojo', 'rol', 'romance', 'romper', 'ronaldinho', 'ronaldo', 'rondar', 'ropa', 'rostro', 'rotundamente', 'round', 'rr.ee', 'rrss', 'rtve', 'rubilar', 'rubio', 'rubro', 'rueda', 'ruiz-tagle', 'rumbo', 'rumor', 'rural', 'rusia', 'ruso', 'ruta', 'rvf', 'rápidamente', 'rápido', 'récord', 'régimen', 'répandre', 'réplico', 'réunions', 'río', 'ríos', 's', 'saavedra', 'sabienda', 'sabroso', 'sacado', 'sacar', 'sacerdote', 'sacudir', 'sailor', 'sal', 'sala', 'salario', 'salazar', 'saldaña', 'saldañar', 'salida', 'salido', 'salina', 'salir', 'salmonera', 'salmonero', 'salon', 'saltar', 'salud', 'saludar', 'saludo', 'salvaje', 'salvar', 'san', 'sancionar', 'sanción', 'sandinista', 'sandra', 'sangre', 'sanitario', 'sano', 'santa', 'santamacer', 'santana', 'santander', 'santiago', 'santiaguino', 'santo', 'sao', 'saquear', 'saqueo', 'sarampión', 'sarawinter', 'sarcasmo', 'sars-cov-2', 'sartor', 'saturado', 'schalper', 'schmidt', 'school', 'schwarcz', 'seas', 'sebastián', 'sección', 'seco', 'secondes', 'seconds', 'secretacer', 'secretaria', 'secretario', 'secreto', 'sector', 'secuestrador', 'secuestrar', 'secuestro', 'secundario', 'sede', 'seg', 'segmento', 'segpr', 'seguidillar', 'seguidor', 'seguimiento', 'seguir', 'seguramente', 'seguridad', 'seguro', 'selección', 'selena', 'sellado', 'semana', 'semidisculpar', 'semillero', 'seminario', 'senado', 'senador', 'senadora', 'senadoro', 'sename', 'sensacionalista', 'sensación', 'sensatez', 'sentado', 'sentencia', 'sentenciar', 'sentido', 'sentir', 'sepa', 'sepa+', 'separación', 'separado', 'separar', 'septiembre', 'sepúlveda', 'seremi', 'sergio', 'seriamente', 'serie', 'seriedad', 'serio', 'sernapesca', 'serpiente', 'servel', 'servel ', 'servicio', 'servil', 'servir', 'serviu', 'serviu ', 'serén', 'sesgo', 'sesión', 'sexo', 'sexual', 'señal', 'señalado', 'señalar', 'señor', 'sharp', 'show', 'siberio', 'sichel', 'siches', 'sida', 'sifup', 'siglo', 'significado', 'significar', 'significativo', 'signo', 'sii', 'silber', 'silencio', 'sillón', 'silva', 'silvia', 'similar', 'simone', 'simpatizante', 'simple', 'simplemente', 'simultáneo', 'sindicar', 'singular', 'siniestrado', 'sinnúmero', 'sinofobio', 'sinovac', 'sinónimo', 'sip', 'siquiera', 'siria', 'sirio', 'sismo', 'sismóloga', 'sistema', 'sistemo', 'sistemáticamente', 'sistemático', 'sistémico', 'sitio', 'situación', 'sketch', 'smith', 'sml', 'snapchat', 'soberanía', 'sobreabundancia', 'sobrecarga', 'sobrepasado', 'sobreseimiento', 'social', 'socialcristianismo', 'socialista', 'sociedad', 'socio', 'sociólogo', 'sociópata', 'software', 'sofía', 'sohr', 'sol', 'solabarrieta', 'solar', 'soledad', 'solemne', 'soler', 'solicitado', 'solicitar', 'solicitud', 'solidaridad', 'soltar', 'soltero', 'solucionar', 'solución', 'solífugo', 'someter', 'sonado', 'sonar', 'sondeo', 'sonido', 'sopa', 'soro', 'soros', 'sorprendente', 'sorprender', 'sorprendido', 'sorpresa', 'sorpresar', 'sorpresivo', 'soscuba', 'sospechar', 'sospechoso', 'sostenedor', 'sostener', 'soto', 'soto-retamal', 'southern', 'spam', 'spread', 'sputnik', 'sqm', 'sr', 'stello', 'stephen', 'steve', 'stock', 'streaming', 'street', 'subir', 'subrayar', 'subregistro', 'subsecretaria', 'subsecretario', 'subsidio', 'subterráneo', 'subvencionado', 'subversión', 'suceder', 'sucedido', 'sucesivo', 'suceso', 'sucio', 'sucursal', 'sudafricano', 'sudamericano', 'sueco', 'sueldo', 'suero', 'suerte', 'sueño', 'suficiente', 'suficientemente', 'sufragar', 'sufragio', 'sufrido', 'sufrimiento', 'sufrir', 'sugerencia', 'sugerir', 'sugierar', 'suit', 'sujeto', 'sumamente', 'sumar', 'sumario', 'suministro', 'sumo', 'super', 'superar', 'supergeek', 'superintendencia', 'superintendenciar', 'superintendente', 'superior', 'supermercado', 'supertanker', 'supervisión', 'suplantación', 'suplantar', 'suponer', 'supple', 'suprema', 'supremo', 'suprimir', 'supuestamente', 'supín', 'sur', 'suramericano', 'surcoreano', 'surgido', 'surgimiento', 'surgir', 'suscribir', 'suscribir tú', 'suscríbetir', 'suspender', 'suspendido', 'suspensión', 'sustancial', 'sustentado', 'sustento', 'susto', 'sutil', 'suu', 'svs', 'swell', 'swett', 'symmes', 'sábado', 'sánchez', 'símbolo', 'síntoma', 'síntomar', 'súper', 't', 't13', 't13cl', 't13móvil', 'tabaco', 'tachar', 'tacto', 'tagua', 'taguar', 'taguo', 'tajante', 'tajantemente', 'talca', 'talcahuano', 'talibán', 'taltal', 'tarapacá', 'tardanza', 'tardar', 'tardía', 'tarifa', 'tasa', 'tatita', 'tatján', 'taxi', 'tdlc', 'teatro', 'techo', 'tecnología', 'tecnologío', 'tecnológico', 'tele', 'tele13', 'tele13radio.cl', 'telecomunicación', 'telefónico', 'telenor', 'televidente', 'televisar', 'televisivo', 'televisión', 'teléfono', 'tema', 'temer', 'temor', 'temporada', 'temuco', 'temática', 'tendencia', 'tendenciar', 'tendencioso', 'tendenciós', 'tender', 'tener', 'tengas', 'teniente', 'tensión', 'tenso', 'teodoro', 'teoría', 'tercer', 'tere', 'teresa', 'tergiversado', 'tergiversar', 'terminar', 'terremoto', 'terreno', 'terrible', 'terriblemente', 'territorial', 'territorio', 'terror', 'terrorismo', 'terrorista', 'tesis', 'test', 'testigo', 'testimonio', 'teuber', 'texto', 'teórico', 'than', 'that', 'the', 'theguardiar', 'them', 'there', 'thewashingtonpost', 'thiare', 'this', 'thunberg', 'tibiezo', 'tiempo', 'tienda', 'tierra', 'tierrar', 'tikitakas', 'tiktok', 'tildar', 'tim', 'times', 'tinto', 'tip', 'tipificación', 'tipificar', 'tipo', 'tiposmóvil', 'tirar', 'tiraste', 'tiro', 'titulado', 'titular', 'to', 'tocar', 'todosesabextwitter', 'tokio', 'tolerancia', 'toleranciacero', 'tolerar', 'tomar', 'tomicic', 'tommasso', 'tommy', 'tomás', 'tonka', 'tontón', 'tool', 'top', 'topic', 'tormenta', 'tornado', 'torno', 'torre', 'torres', 'tortura', 'toscano', 'totalitario', 'totalmente', 'touché', 'tours', 'toute', 'tpp', 'tpp-11', 'tpp11', 'trabajador', 'trabajar', 'trabajo', 'tradicional', 'tradición', 'traer', 'tragedia', 'trama', 'tramitación', 'tramitar', 'tramo', 'trampa', 'trampir', 'trampó', 'tranquilidad', 'tranquilo', 'trans', 'transantiago', 'transcurrido', 'transcurrir', 'transexual', 'transeúnte', 'transformación', 'transformador', 'transformar', 'transgénero', 'transitar', 'transmisión', 'transmitido', 'transmitir', 'transparencia', 'transparentar', 'transparente', 'transporte', 'transversal', 'trar', 'trasladar', 'traslado', 'tratado', 'tratamiento', 'tratar', 'trato', 'travels', 'trazabilidad', 'treceavo', 'tremendamente', 'tremendo', 'tren', 'trending', 'tribuna', 'tribunal', 'tributario', 'triple', 'triplicar', 'triste', 'triunfo', 'trolear', 'troleo', 'troll', 'trollear', 'trolls', 'troy', 'troy/', 'troya', 'trucado', 'trucha', 'trucho', 'trump', 'tráfico', 'trágico', 'trámite', 'tse', 'tsunami', 'tuga', 'tuit', 'tuitear', 'tuiteo', 'tuitero', 'tumba', 'tumbar', 'turba', 'turco', 'turismo', 'turista', 'turquía', 'turístico', 'tv', 'tvn', 'tvuinforma', 'tvuinformo', 'tvunoticia', 'tv|', 'twdc', 'tweet', 'twitteo', 'twitter', 'táctico', 'técnica', 'técnico', 'término', 'tía', 'tío', 'típico', 'título', 'tónico', 'tópico', 'tóxico', 'túnel', 'u.', 'uc', 'uchile', 'uci', 'ucrania', 'udec', 'udi', 'udp', 'ue', 'uigur', 'ulloa', 'ultra', 'ultraconservador', 'ultraderecha', 'ultraderechista', 'ultraderecho', 'umek', 'undurraga', 'unesco', 'unidad', 'unidas', 'unidireccional', 'unido', 'unidos', 'unificación', 'unified', 'uniformado', 'unilateral', 'unilever', 'unir', 'universidad', 'universitario', 'universo', 'unión', 'unánime', 'urbano', 'urenda', 'urgencia', 'urgente', 'uribe', 'urna', 'urruticoechea', 'uruguay', 'us$', 'us$4', 'usado', 'usg', 'usuario', 'utilero', 'utilización', 'utilizado', 'utilizar', 'utm', 'uu', 'uzegbu', 'v', 'vacanudo', 'vacuna', 'vacuna ', 'vacunacer', 'vacunación', 'vacunado', 'vacunar', 'vacunar ', 'vacunar él', 'vacunarse', 'vacunatorio', 'vacunir', 'vacuno', 'vacunología', 'vacío', 'valdivia', 'valdés', 'valentín', 'valenzuela', 'valer', 'validar', 'valle', 'vallejo', 'vallenar', 'valor', 'valoración', 'valorar', 'valparaíso', 'varado', 'vargas', 'variable', 'variado', 'vaticano', 'vear', 'vecino', 'veganismo', 'vegano', 'vehículo', 'velar', 'velocidad', 'vencer', 'vender', 'venecia', 'venenoso', 'venezolano', 'venezuela', 'venezuelo', 'venir', 'venta', 'ventaja', 'ventar', 'ventilador', 'ventura', 'veracidad', 'verano', 'veraz', 'verbal', 'verde', 'vergar', 'vergara', 'vergonzoso', 'vergüenza', 'verificación', 'verificado', 'verificador', 'verificar', 'verosímil', 'versión', 'versus', 'verídico', 'vestir', 'vetar', 'veterano', 'veto', 'via', 'viajar', 'viaje', 'vial', 'vicente', 'vicepresidenta', 'vicepresidente', 'victima', 'victoria', 'vida', 'vidal', 'video', 'video|', 'vidiello', 'viejo', 'viera-gallo', 'viernes', 'vietnamita', 'vigente', 'vigilancia', 'vih', 'villa', 'villager', 'villalobos', 'villán', 'vinculación', 'vinculado', 'vincular', 'violación', 'violar', 'violencia', 'violencio', 'violentar', 'violentista', 'violento', 'viral', 'viraliza', 'viralización', 'viralizado', 'viralizar', 'virginia', 'virtual', 'virtualidad', 'viruela', 'virulencia', 'virus', 'visa', 'visceral', 'visibilidad', 'visibilizar', 'visible', 'visita', 'visitante', 'visitar', 'visión', 'visto', 'vit', 'vitacura', 'vital', 'vitamina', 'vite', 'vitnamito', 'viuda', 'vivido', 'vivienda', 'vivir', 'vivo', 'vocal', 'vocera', 'vocero', 'vocessinfrontera', 'voces|', 'volante', 'volar', 'volcán', 'voluntario', 'volver', 'von', 'votación', 'votante', 'votar', 'voto', 'vox', 'voyage', 'voz', 'vraiment', 'vs', 'vuelo', 'vuelta', 'vuelto', 'vulnerable', 'vulneración', 'vulnerar', 'vía', 'víar', 'víctima', 'víctimar', 'víctor', 'vídeo', 'vínculo', 'vío', 'waiver', 'wales', 'walker', 'wall', 'wallmapu', 'walt', 'ward', 'wars', 'washington', 'web', 'webserie', 'week', 'wenliang', 'weón', 'whatsapp', 'why', 'wi', 'wikileaks', 'wikipedia', 'will', 'william', 'winter', 'words', 'wt', 'wuhan', 'www.biobiochile.cl', 'www.enlalinea.cl', 'www.interferencia.cl/suscribete', 'wyllys', 'xenofobio', 'xenófobo', 'xinjiang', 'xviii', 'yasna', 'year', 'yeon-chul', 'yerno', 'york', 'youtube', 'youtubers', 'yumbel', 'z', 'zaldívar', 'zaliasnik', 'zamora', 'zamorano', 'zelanda', 'zodiacal', 'zona', 'zoom', 'zozobra', 'zuckerberg', 'zurdo', '|', '| ', '°', 'à', 'áfrica', 'álvarez', 'álvaro', 'ámbito', 'ángel', 'ángela', 'ángulo', 'ánimo', 'árabe', 'área', 'áreo', 'áspero', 'élite', 'émeut', 'énfasis', 'época', 'épocar', 'époque', 'ésto', 'ética', 'ético', 'éxodo', 'être', 'ímpetu', 'índice', 'íntegramente', 'íntimo', 'ñuble', 'ñuñoa', 'órgano', 'últimamente', 'único', 'útil', '\\u200d', '→', '►', '☝', '♀', '♂', '⚠', '⚽', '✅', '✋', '✍', '✏', '✔', '❌', '❗', '➡', '⬇', '⭕', '️', '𝐦𝐚́𝐬', '🇦', '🇧', '🇨', '🇪', '🇬', '🇱', '🇲', '🇳', '🇷', '🇸', '🇺', '🇻', '🇽', '🌎', '🌐', '🎙', '🎥', '🏆', '🏥', '🏻', '🏻\\u200d', '🏼', '🏼https://bit.ly/2dt6bsc', '👀', '👁', '👆', '👇', '👉', '👌', '👏', '💉', '💪', '💬', '💵', '💻', '📌', '📍', '📚', '📡', '📢', '📣', '📰', '📱', '📲', '📷', '📹', '📺', '📻', '🔊', '🔍', '🔒', '🔴', '🔵', '🔶', '🔷', '🔸', '🔹', '🗞', '🗣', '🗳', '😂', '😅', '😔', '😕', '😡', '😧', '😨', '😬', '😮', '😯', '😰', '😱', '😲', '😳', '😷', '🙃', '🙄', '🚨', '🚫', '🤔', '🤣', '🤦', '🤨', '🤭', '🤷', '🦂', '🦠', '🧐']\n"
     ]
    }
   ],
   "source": [
    "print(diccionario)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from embedded_topic_model.utils import preprocessing\n",
    "import json\n",
    "\n",
    "# Preprocessing the dataset\n",
    "diccionario, train_dataset,test_dataset, = preprocessing.create_etm_datasets(\n",
    "    etm_documents, \n",
    "    min_df=0.01, \n",
    "    max_df=0.75, \n",
    "    train_size=0.85, \n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'test': {'tokens': array([array([ 10,  11,  32, 197, 210, 237, 272], dtype=int32),\n",
      "       array([ 35,  51,  86,  92,  99, 146, 176, 187, 197, 202, 218], dtype=int32),\n",
      "       array([ 31,  99, 122, 146, 166, 202, 212, 238], dtype=int32),\n",
      "       array([  2,  44,  74, 123, 145, 180, 200], dtype=int32),\n",
      "       array([ 42,  99, 111, 149, 202, 230], dtype=int32),\n",
      "       array([ 99, 202, 254, 265, 294], dtype=int32),\n",
      "       array([  5,  52,  78, 210, 272], dtype=int32),\n",
      "       array([ 42, 115, 118, 123, 284], dtype=int32),\n",
      "       array([132, 171, 210, 258, 261, 269, 272, 314], dtype=int32),\n",
      "       array([ 54, 104, 145, 153, 202, 232, 288], dtype=int32),\n",
      "       array([ 33, 123, 221], dtype=int32),\n",
      "       array([ 76,  89, 118, 123, 144, 147, 190, 304], dtype=int32),\n",
      "       array([ 99, 123, 144, 207, 214, 246, 299, 305], dtype=int32),\n",
      "       array([159, 210, 245, 272], dtype=int32),\n",
      "       array([ 53,  99, 202], dtype=int32),\n",
      "       array([ 11,  13,  17,  32,  39,  67, 179, 210, 214, 237, 258, 268, 272],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 11,  32,  81, 191, 197, 202, 222], dtype=int32),\n",
      "       array([ 40,  62,  78, 126, 151, 190, 203, 210, 221, 272, 299], dtype=int32),\n",
      "       array([118, 210, 246, 252, 272, 309], dtype=int32),\n",
      "       array([ 61,  80,  99, 149, 192, 202, 231, 260], dtype=int32),\n",
      "       array([  6,  17,  44,  51,  55,  69,  73,  75,  86,  89,  93,  99, 114,\n",
      "              137, 139, 145, 146, 169, 185, 190, 192, 194, 200, 202, 246, 253,\n",
      "              257, 258, 261, 269, 276, 281], dtype=int32)                     ,\n",
      "       array([  0,  89, 117, 123, 133, 212, 236, 308], dtype=int32),\n",
      "       array([ 25,  31,  44,  64,  71,  72,  88, 111, 121, 123, 126, 139, 153,\n",
      "              164, 165, 173, 175, 181, 182, 192, 199, 210, 236, 239, 241, 258,\n",
      "              263, 269, 272, 301, 306, 311, 312, 314], dtype=int32)           ,\n",
      "       array([ 11,  15,  32,  34,  45,  99, 202, 227, 270, 289, 304, 310],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 88, 145, 170, 198, 202, 225, 299], dtype=int32),\n",
      "       array([ 37, 118, 123, 128, 224, 294, 298], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([111, 159, 210, 246, 272], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([ 32,  50,  83, 118, 123, 134, 137, 250, 264, 286], dtype=int32),\n",
      "       array([123, 144], dtype=int32),\n",
      "       array([ 11,  32,  99, 110, 122, 202, 208, 210, 272], dtype=int32),\n",
      "       array([ 82,  90, 102, 145, 202, 245], dtype=int32),\n",
      "       array([ 82, 123, 152, 233, 248, 269], dtype=int32),\n",
      "       array([ 99, 136, 202], dtype=int32),\n",
      "       array([108, 123, 128, 155, 181, 190], dtype=int32),\n",
      "       array([ 52,  98, 107, 155, 198, 210, 247, 259, 261, 272, 284], dtype=int32),\n",
      "       array([ 31,  39,  40,  71,  73,  95, 117, 145, 160, 176, 184, 190, 198,\n",
      "              202, 206, 221, 243, 245, 246, 261, 262, 269, 294, 306], dtype=int32),\n",
      "       array([ 11,  32,  58, 145, 172, 202, 210, 225, 227, 272, 275], dtype=int32),\n",
      "       array([ 22,  40,  77,  82,  95, 117, 123, 246, 266, 269], dtype=int32),\n",
      "       array([ 44, 144, 181, 210, 212, 223, 272, 283, 301], dtype=int32),\n",
      "       array([192, 210, 230, 242, 246, 272], dtype=int32),\n",
      "       array([  9,  73,  77,  99, 106, 154, 202, 242, 256, 299], dtype=int32),\n",
      "       array([ 23,  99, 114, 162, 202, 210, 228, 258, 272, 297], dtype=int32),\n",
      "       array([ 11,  32,  34,  37,  59, 118, 210, 225, 259, 272], dtype=int32),\n",
      "       array([ 11,  32, 150, 162, 202, 210, 227, 250, 272], dtype=int32),\n",
      "       array([ 18,  27,  58,  62,  69,  99, 138, 145, 191, 202, 252, 277, 298],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 11,  20,  32,  77, 164, 167, 210, 225, 246, 272, 285, 301],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 10,  37,  99, 202, 246], dtype=int32),\n",
      "       array([ 15,  34, 175, 202, 210, 272], dtype=int32),\n",
      "       array([ 52, 210, 225, 258, 272, 283], dtype=int32),\n",
      "       array([ 54,  62,  71,  90, 126, 145, 202, 280], dtype=int32),\n",
      "       array([ 34,  99, 202], dtype=int32),\n",
      "       array([ 52,  58, 210, 241, 257], dtype=int32),\n",
      "       array([ 11,  32,  34,  65, 108, 149, 215, 217, 220], dtype=int32),\n",
      "       array([ 11,  32,  54,  58,  99, 102, 139, 145, 202, 236, 265, 290],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 35,  47,  75, 110, 123, 178, 217, 293], dtype=int32),\n",
      "       array([ 69,  99, 103, 131, 174, 191, 286], dtype=int32),\n",
      "       array([ 23,  30,  76, 123, 142, 148, 155, 307], dtype=int32),\n",
      "       array([132, 171, 210, 258, 261, 269, 272, 314], dtype=int32),\n",
      "       array([ 25,  63, 175, 196, 210, 246, 272, 301, 302], dtype=int32),\n",
      "       array([  5,  35,  78,  86,  92,  99, 137, 187, 202, 210, 211, 218, 252,\n",
      "              272], dtype=int32)                                              ,\n",
      "       array([  1,   6,  54,  62,  76, 118, 150, 158, 210, 240, 272], dtype=int32),\n",
      "       array([ 15,  23,  48,  77, 123, 287, 297], dtype=int32),\n",
      "       array([ 77, 106, 116, 123, 134], dtype=int32),\n",
      "       array([  8,  73,  80, 190, 210, 241, 272], dtype=int32),\n",
      "       array([ 56,  71,  97,  99, 137, 145, 202, 235], dtype=int32),\n",
      "       array([ 62,  74,  89,  91,  97, 102, 139, 145, 182, 202, 205], dtype=int32),\n",
      "       array([ 22,  29,  74, 118, 123, 172, 225, 234, 288], dtype=int32),\n",
      "       array([ 99, 114, 124, 145, 173, 202, 237, 293], dtype=int32),\n",
      "       array([ 68, 123, 246], dtype=int32),\n",
      "       array([ 22,  34,  36,  37,  50, 149, 210, 269, 272, 289, 301], dtype=int32),\n",
      "       array([ 26,  63, 144, 210, 214, 246, 251, 269, 272, 301], dtype=int32),\n",
      "       array([  1,  43, 158], dtype=int32),\n",
      "       array([ 32,  50, 123, 243], dtype=int32),\n",
      "       array([112, 133, 156, 210, 272, 305, 311], dtype=int32),\n",
      "       array([ 13,  17, 210, 257, 272], dtype=int32),\n",
      "       array([ 43, 158, 159, 210, 272, 299], dtype=int32),\n",
      "       array([ 93, 115, 118, 123, 148], dtype=int32),\n",
      "       array([ 41,  78,  95,  99, 116, 180, 202, 203, 242, 250, 262, 275],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 62,  99, 188, 198, 202, 208, 221, 294], dtype=int32),\n",
      "       array([ 11,  16,  32,  45,  65,  73,  76,  98,  99, 150, 154, 198, 202,\n",
      "              246, 270], dtype=int32)                                         ,\n",
      "       array([  3,  86,  93, 100, 123, 139, 182, 190, 212, 221, 253, 258, 275],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([  8,  11,  35,  63, 144, 147, 173, 196, 210, 239, 258, 272, 283,\n",
      "              301, 302], dtype=int32)                                         ,\n",
      "       array([ 11,  32,  66,  99, 103, 202, 203], dtype=int32),\n",
      "       array([ 64, 123, 194, 199, 210, 272], dtype=int32),\n",
      "       array([123, 211, 246, 304], dtype=int32),\n",
      "       array([ 11,  32,  45,  62, 141, 145, 210, 225, 272, 294], dtype=int32),\n",
      "       array([123, 136, 149, 202], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([ 26,  78, 118, 210, 216, 220, 231, 232, 272, 275, 299, 306],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 43, 210, 241], dtype=int32),\n",
      "       array([ 56, 105, 123, 144, 185, 225], dtype=int32),\n",
      "       array([ 31,  72, 110, 123, 136, 144, 147, 210, 247, 249, 258, 266, 272,\n",
      "              313], dtype=int32)                                              ,\n",
      "       array([ 89,  98,  99, 116, 150, 202, 225], dtype=int32),\n",
      "       array([123, 136, 238, 246], dtype=int32),\n",
      "       array([ 11,  32,  99, 145, 174, 200, 202, 212, 228, 294, 299], dtype=int32),\n",
      "       array([ 11,  32,  33, 118, 145, 192, 194, 197, 202, 255, 309], dtype=int32),\n",
      "       array([ 47, 116, 123, 226, 227, 236, 252, 296], dtype=int32),\n",
      "       array([ 31,  89, 123, 151, 179, 209, 226, 270, 288, 289], dtype=int32),\n",
      "       array([ 25,  32,  63,  69,  86,  99, 137, 144, 145, 165, 185, 196, 202,\n",
      "              248, 277, 301], dtype=int32)                                    ,\n",
      "       array([ 10,  11,  32,  45,  58, 145, 197, 202, 210, 237, 272], dtype=int32),\n",
      "       array([ 11,  32,  89, 145, 150, 208, 210, 272], dtype=int32),\n",
      "       array([113, 180, 210, 246, 272], dtype=int32),\n",
      "       array([ 11,  32,  38,  40,  46,  98, 102, 141, 145, 202], dtype=int32),\n",
      "       array([  8,  99, 202, 246], dtype=int32),\n",
      "       array([ 88, 118, 198, 210, 220, 232, 236, 241, 311], dtype=int32),\n",
      "       array([ 48,  99, 123, 153, 184, 202, 258, 294], dtype=int32),\n",
      "       array([  9,  56,  85,  97,  99, 123, 131, 134, 136, 144, 145, 167, 195,\n",
      "              202, 204, 221, 251, 256, 258], dtype=int32)                     ,\n",
      "       array([  8,  12, 210, 272], dtype=int32),\n",
      "       array([ 32,  40,  85,  99, 176, 182, 202, 250, 258, 312], dtype=int32),\n",
      "       array([210, 272, 288], dtype=int32),\n",
      "       array([ 25,  28,  57,  82,  93,  99, 118, 168, 174, 182, 202, 239, 296],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 11,  32,  43,  45,  99, 103, 121, 162, 202, 207, 210, 229, 234,\n",
      "              272, 307], dtype=int32)                                         ,\n",
      "       array([118, 123, 231, 250, 305], dtype=int32),\n",
      "       array([  5,  99, 145, 164, 202], dtype=int32),\n",
      "       array([  5,  35,  78,  86,  92,  99, 137, 187, 197, 202, 211, 218],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 62,  97, 131, 139, 145, 201, 202, 205, 255], dtype=int32),\n",
      "       array([  8,  97, 139, 145, 202, 231, 233, 282], dtype=int32),\n",
      "       array([ 30,  44,  85,  99, 117, 189, 202, 209], dtype=int32),\n",
      "       array([ 75,  93, 123, 144, 146, 221, 239], dtype=int32),\n",
      "       array([ 49,  58,  94, 145, 168, 174, 190, 197, 202, 229, 252], dtype=int32),\n",
      "       array([ 77,  98, 107, 210, 225, 272, 289, 308], dtype=int32),\n",
      "       array([  2,   8,  80, 108, 111, 118, 149, 157, 210, 231, 272], dtype=int32),\n",
      "       array([ 11,  22,  32,  79, 150, 210, 264, 272], dtype=int32),\n",
      "       array([118, 190, 210, 272], dtype=int32),\n",
      "       array([ 11,  44,  63,  99, 144, 164, 165, 167, 202, 207, 269], dtype=int32),\n",
      "       array([ 22,  99, 151, 202, 246, 265, 277], dtype=int32),\n",
      "       array([ 99, 122, 202, 210, 272], dtype=int32),\n",
      "       array([ 58,  99, 145, 172, 185, 202, 236, 275, 290, 294, 309], dtype=int32),\n",
      "       array([ 17,  78,  99, 109, 132, 153, 184, 202, 205, 210, 244, 269, 272,\n",
      "              278], dtype=int32)                                              ,\n",
      "       array([ 99, 107, 122, 139, 149, 170, 202, 253, 269, 271, 284], dtype=int32),\n",
      "       array([ 13,  41,  82,  99, 163, 202, 266, 271, 299], dtype=int32),\n",
      "       array([ 75,  99, 202, 246, 299], dtype=int32),\n",
      "       array([  0,  72,  73,  99, 118, 202, 298, 305], dtype=int32),\n",
      "       array([ 34,  94, 210, 246, 272, 283], dtype=int32),\n",
      "       array([ 11,  32,  45,  80, 133, 210, 272, 288], dtype=int32),\n",
      "       array([ 43, 210, 225, 272], dtype=int32),\n",
      "       array([ 73,  87,  98, 133, 137, 210, 245, 258, 270, 272], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([ 75,  80,  99, 175, 197, 202, 209, 246], dtype=int32),\n",
      "       array([ 32, 101, 133, 155, 162, 210, 245, 248, 272], dtype=int32),\n",
      "       array([ 99, 136, 190, 202, 230, 246], dtype=int32),\n",
      "       array([ 62, 145, 202, 246, 280], dtype=int32),\n",
      "       array([ 99, 111, 149, 202, 204, 222, 249, 266, 294], dtype=int32),\n",
      "       array([  3,   7,  56,  79,  81,  99, 126, 145, 173, 175, 191, 202, 212,\n",
      "              236, 238, 239, 258, 299, 301], dtype=int32)                     ,\n",
      "       array([143, 210, 238, 241, 260, 272], dtype=int32),\n",
      "       array([ 11,  32,  45,  99, 145, 202, 261, 315], dtype=int32),\n",
      "       array([  5,  10,  34, 192, 202, 210, 264, 272], dtype=int32),\n",
      "       array([ 17,  82, 210, 269, 272, 288, 289], dtype=int32),\n",
      "       array([ 99, 116, 188, 202, 210, 272, 288], dtype=int32),\n",
      "       array([ 11,  32, 150, 176, 210, 272, 300], dtype=int32),\n",
      "       array([  4,   8,  19,  54,  70, 102, 139, 145, 202, 280], dtype=int32),\n",
      "       array([123, 157, 185, 201, 233], dtype=int32),\n",
      "       array([ 11,  32,  45,  52, 114, 210, 225, 246, 269, 272], dtype=int32),\n",
      "       array([ 11,  32,  45,  82,  99, 202], dtype=int32),\n",
      "       array([  0,  25,  95, 117, 133, 145, 156, 185, 202, 305, 314], dtype=int32),\n",
      "       array([ 80,  93,  97,  99, 202], dtype=int32),\n",
      "       array([118, 123, 193], dtype=int32),\n",
      "       array([ 10,  62,  89,  97, 118, 138, 145, 202, 205], dtype=int32),\n",
      "       array([ 65, 145, 202, 225, 298, 303], dtype=int32),\n",
      "       array([  9,  44, 210, 240, 241, 269, 305], dtype=int32),\n",
      "       array([ 29,  36,  46,  48,  50, 123, 128, 141, 144, 146, 167, 227, 269,\n",
      "              283, 288, 289], dtype=int32)                                    ,\n",
      "       array([ 30,  52,  53, 111, 134, 147, 210, 212, 272, 289], dtype=int32),\n",
      "       array([103, 104, 121, 123, 270], dtype=int32),\n",
      "       array([  0, 101, 112, 144, 210, 272, 305], dtype=int32),\n",
      "       array([107, 114, 145, 210, 272], dtype=int32),\n",
      "       array([ 65, 103, 210, 225, 272, 288], dtype=int32),\n",
      "       array([  8,  97, 145, 231, 246, 258, 282], dtype=int32),\n",
      "       array([ 12, 115, 123, 137, 144, 221, 264, 270, 306], dtype=int32),\n",
      "       array([ 81, 145, 202, 222], dtype=int32),\n",
      "       array([ 11,  32,  82, 160, 202, 203, 210, 232, 240, 261, 269, 272, 273,\n",
      "              294], dtype=int32)                                              ,\n",
      "       array([ 49,  56,  99, 146, 190, 202, 277, 307], dtype=int32),\n",
      "       array([  3,  15,  58,  90,  99, 123, 202, 252, 269, 298], dtype=int32),\n",
      "       array([ 11,  19,  32,  34,  35,  73,  86, 145, 210, 242, 272], dtype=int32),\n",
      "       array([ 57,  69,  89,  97, 100, 114, 119, 145, 197, 202, 267], dtype=int32),\n",
      "       array([ 29,  36,  50,  65,  99, 202, 225, 227, 286], dtype=int32),\n",
      "       array([ 43,  70,  99, 197, 202, 210, 272, 289, 292], dtype=int32),\n",
      "       array([ 14, 123, 176, 182, 183, 189, 207, 210, 223, 258, 272, 308],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([  4, 123, 139, 141, 226, 250, 258], dtype=int32),\n",
      "       array([ 35,  78,  86,  92,  99, 142, 177, 187, 198, 202, 210, 272, 276],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 22,  65, 102, 117, 123, 130, 197, 220, 243, 244, 274], dtype=int32),\n",
      "       array([  5,  98,  99, 155, 164, 169, 210, 272], dtype=int32),\n",
      "       array([145, 177, 202, 270], dtype=int32),\n",
      "       array([  8,  99, 202, 246], dtype=int32),\n",
      "       array([ 43, 104, 123, 145, 147, 202, 305, 315], dtype=int32),\n",
      "       array([  5, 120, 145, 202], dtype=int32),\n",
      "       array([200, 210, 272, 277, 312], dtype=int32),\n",
      "       array([ 58, 145, 149, 172, 202, 228, 291, 295], dtype=int32),\n",
      "       array([ 11,  22,  32,  38,  45,  46,  75,  82,  93,  99, 148, 202, 217,\n",
      "              225, 303], dtype=int32)                                         ,\n",
      "       array([ 12, 144, 162, 210, 212, 238, 241, 244, 254, 258, 261, 312],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([  5,  35,  86, 210, 214, 246, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 11,  32,  82,  99, 202, 210, 272], dtype=int32),\n",
      "       array([225, 303], dtype=int32),\n",
      "       array([ 24,  35,  86,  99, 210, 246, 272], dtype=int32),\n",
      "       array([ 61,  73,  99, 202, 204], dtype=int32),\n",
      "       array([ 99, 192, 202, 255, 293], dtype=int32),\n",
      "       array([ 26,  63, 144, 210, 214, 246, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 11,  32,  51,  52, 159, 210, 241, 298], dtype=int32),\n",
      "       array([ 14,  24,  35,  53,  86,  99, 118, 175, 176, 198, 202, 253, 263,\n",
      "              264, 295], dtype=int32)                                         ,\n",
      "       array([  7, 145, 202], dtype=int32),\n",
      "       array([ 99, 202, 246], dtype=int32),\n",
      "       array([189, 210, 254, 256, 258, 259, 272, 306], dtype=int32),\n",
      "       array([ 32,  93, 123, 185, 192, 236, 269, 296], dtype=int32),\n",
      "       array([ 11,  32,  99, 122, 202, 210, 220, 272, 304], dtype=int32),\n",
      "       array([ 99, 179, 202, 227], dtype=int32),\n",
      "       array([186, 210, 246, 269, 272, 301], dtype=int32),\n",
      "       array([ 31, 186, 210, 270, 272, 314], dtype=int32),\n",
      "       array([114, 210, 241, 281], dtype=int32),\n",
      "       array([ 21,  99, 138, 155, 202, 256, 267, 306], dtype=int32),\n",
      "       array([ 31, 117, 132, 176, 210, 219, 240, 248, 269, 272, 296], dtype=int32),\n",
      "       array([ 15,  24,  91,  99, 110, 120, 159, 202, 210, 240, 246, 258, 272],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 47, 100, 118, 123, 258], dtype=int32),\n",
      "       array([ 11,  32, 210, 260, 272], dtype=int32),\n",
      "       array([ 99, 117, 134, 163, 176, 202, 205], dtype=int32),\n",
      "       array([ 11,  32,  34,  45, 202, 261], dtype=int32),\n",
      "       array([ 99, 152, 202, 276], dtype=int32),\n",
      "       array([ 99, 155, 202, 214, 238, 299], dtype=int32),\n",
      "       array([ 26,  63, 144, 210, 214, 246, 251, 269, 272, 301], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([  5,  35,  86, 210, 214, 246, 251, 269, 272, 301], dtype=int32),\n",
      "       array([123, 136, 238, 246], dtype=int32),\n",
      "       array([ 11,  32, 103, 120, 123, 146, 228, 266, 289, 299], dtype=int32),\n",
      "       array([ 13,  22,  39,  55,  56,  63,  72,  75,  82,  83,  95,  97, 113,\n",
      "              115, 133, 134, 135, 139, 155, 165, 173, 175, 190, 192, 196, 210,\n",
      "              226, 229, 234, 236, 239, 246, 252, 258, 264, 268, 269, 272, 283,\n",
      "              292, 301, 302], dtype=int32)                                    ,\n",
      "       array([210, 221, 246, 272], dtype=int32),\n",
      "       array([ 14,  43, 129, 192, 210, 241, 272, 314], dtype=int32),\n",
      "       array([111, 204, 210, 256, 272], dtype=int32),\n",
      "       array([ 13,  38,  42,  43,  65,  99, 158, 202, 210, 246, 272, 294],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 14,  53,  65,  99, 125, 134, 174, 197, 202, 232, 254, 269, 275,\n",
      "              281, 287, 300], dtype=int32)                                    ,\n",
      "       array([ 11,  32, 116, 155, 210, 246, 258, 272], dtype=int32),\n",
      "       array([  6,  13,  82, 161, 210, 215, 272, 279], dtype=int32),\n",
      "       array([ 15,  32, 115, 134, 181, 190, 210, 228, 258, 269, 272], dtype=int32),\n",
      "       array([ 99, 202, 204, 299, 315], dtype=int32),\n",
      "       array([ 32,  63,  67, 113, 138, 144, 167, 175, 197, 210, 220, 258, 272,\n",
      "              301], dtype=int32)                                              ,\n",
      "       array([ 38,  61,  89, 106, 123, 188, 193], dtype=int32),\n",
      "       array([ 11,  67,  78,  99, 115, 118, 137, 140, 185, 197, 202, 210, 261,\n",
      "              264, 269, 272], dtype=int32)                                    ,\n",
      "       array([ 43,  70,  99, 122, 129, 145, 202, 225], dtype=int32),\n",
      "       array([ 62,  74,  89,  91,  97, 102, 139, 145, 182, 202, 205], dtype=int32),\n",
      "       array([ 11,  32,  99, 145, 153, 195, 199, 202, 210, 241, 261, 265, 272],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([  4,  93, 122, 153, 166, 176, 189, 210, 251, 272, 294], dtype=int32),\n",
      "       array([ 82,  99, 197, 202], dtype=int32),\n",
      "       array([ 11,  30,  32,  99, 121, 145, 202, 299], dtype=int32),\n",
      "       array([ 41,  82,  99, 113, 144, 146, 160, 167, 197, 202, 203, 227, 231,\n",
      "              236, 256, 299], dtype=int32)                                    ,\n",
      "       array([  6,  11,  29,  32,  45,  52,  98, 119, 149, 186, 208, 210, 259,\n",
      "              272], dtype=int32)                                              ,\n",
      "       array([ 17,  42,  57,  99, 100, 134, 142, 202, 269], dtype=int32),\n",
      "       array([ 99, 202, 246, 258], dtype=int32),\n",
      "       array([ 73, 210, 246, 264, 272], dtype=int32),\n",
      "       array([112, 210, 224, 272, 305], dtype=int32),\n",
      "       array([ 54,  62, 145, 149, 202], dtype=int32),\n",
      "       array([ 30,  43, 123, 158, 202, 232, 289], dtype=int32),\n",
      "       array([ 53,  99, 118, 137, 146, 174, 188, 202, 229, 233, 255, 287],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([210, 241], dtype=int32),\n",
      "       array([ 70, 118, 201, 210, 246, 272, 276], dtype=int32),\n",
      "       array([ 34,  35,  38,  40,  86,  92, 125, 210, 272], dtype=int32),\n",
      "       array([  8,  17,  95, 123, 144, 145, 208, 222], dtype=int32),\n",
      "       array([ 56,  58,  77,  99, 116, 138, 197, 202, 226, 258, 306], dtype=int32),\n",
      "       array([136, 150, 190, 210, 272], dtype=int32),\n",
      "       array([  8, 123, 214, 224], dtype=int32),\n",
      "       array([  8,  27,  43,  54,  82, 108, 118, 123, 144, 191, 240, 259, 283,\n",
      "              305, 307], dtype=int32)                                         ,\n",
      "       array([  5,  11,  12,  17,  32,  66,  85, 198, 224, 242], dtype=int32),\n",
      "       array([ 38,  43,  56,  67,  97, 120, 123, 124, 144, 145, 236, 269, 278],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 18,  36,  39,  50,  99, 173, 184, 194, 202, 225, 240], dtype=int32),\n",
      "       array([  2,  11,  29,  32,  37,  42,  45,  79,  99, 153, 202, 253],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 14,  99, 202, 231], dtype=int32),\n",
      "       array([ 11,  23,  57, 100, 123, 133, 156, 180, 215, 236, 250], dtype=int32),\n",
      "       array([ 26,  63,  99, 135, 144, 175, 191, 196, 202, 237], dtype=int32),\n",
      "       array([  5,  35,  86, 210, 214, 246, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 53,  57,  65,  79, 188, 197, 210, 272, 287], dtype=int32),\n",
      "       array([  7,  14,  34,  88, 144, 176, 190, 192, 201, 210, 227, 241, 248,\n",
      "              272], dtype=int32)                                              ,\n",
      "       array([123, 152, 190, 264, 288], dtype=int32),\n",
      "       array([  6,  36, 163, 174, 210, 211, 272, 277], dtype=int32),\n",
      "       array([ 10,  65, 118, 202, 225, 258], dtype=int32),\n",
      "       array([ 31,  36,  72, 110, 123, 128, 136, 144, 147, 158, 210, 247, 249,\n",
      "              258, 266, 272, 313], dtype=int32)                               ,\n",
      "       array([ 11,  32,  55,  65,  99, 180, 185, 202, 210, 269, 272], dtype=int32),\n",
      "       array([ 39,  60,  63, 118, 175, 202, 210, 269, 272], dtype=int32),\n",
      "       array([ 32,  37,  82,  99, 104, 126, 162, 202, 205, 232], dtype=int32),\n",
      "       array([ 17,  78, 116, 149, 188, 210, 272, 288], dtype=int32),\n",
      "       array([ 19, 145, 188, 202, 220, 249, 295], dtype=int32),\n",
      "       array([ 13,  14,  18,  76,  90, 133, 134, 155, 160, 190, 210, 236, 241,\n",
      "              249, 258, 272], dtype=int32)                                    ,\n",
      "       array([  5,  31,  53,  72, 118, 127, 165, 173, 175, 176, 196, 210, 239,\n",
      "              272, 276, 301], dtype=int32)                                    ,\n",
      "       array([ 11,  16,  32,  99, 136, 150, 190, 194, 202, 208, 225], dtype=int32),\n",
      "       array([ 21,  40,  47,  82,  99, 136, 170, 176, 184, 202, 258, 263, 281,\n",
      "              298], dtype=int32)                                              ,\n",
      "       array([ 11,  13,  32,  69,  99, 138, 190, 197, 202], dtype=int32),\n",
      "       array([ 53, 123, 176, 299], dtype=int32),\n",
      "       array([ 97, 145, 202, 246, 252, 255], dtype=int32),\n",
      "       array([ 48, 199, 210, 241, 243, 277], dtype=int32),\n",
      "       array([  6,  11,  32,  75, 123, 144, 203, 216, 246, 299], dtype=int32),\n",
      "       array([ 11,  32,  58,  77,  99, 110, 145, 200, 202, 237, 269, 271, 294],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([123, 245, 246, 300], dtype=int32),\n",
      "       array([ 13,  77, 179, 182, 210, 240, 249, 269, 272], dtype=int32),\n",
      "       array([ 31,  72, 113, 162, 210, 240, 272, 273], dtype=int32),\n",
      "       array([202, 210, 241, 275], dtype=int32),\n",
      "       array([ 10,  65, 210, 246, 269, 272], dtype=int32),\n",
      "       array([  7,  82,  99, 176, 190, 197, 202, 210, 227, 236, 245, 269, 272],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 54,  62, 145, 149, 202], dtype=int32),\n",
      "       array([133, 136, 210, 225, 246, 272, 285], dtype=int32),\n",
      "       array([  0,  37,  47, 123, 185, 191, 258], dtype=int32),\n",
      "       array([ 10,  11,  32,  45,  58, 145, 197, 202, 210, 237, 272], dtype=int32),\n",
      "       array([  3,  10,  24,  52,  98, 137, 151, 210, 264, 269, 272, 310],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([  5,  45, 145, 149, 182, 185, 202, 236], dtype=int32),\n",
      "       array([ 10,  11,  32, 202, 210, 227, 272], dtype=int32),\n",
      "       array([ 43,  80, 148, 157, 210, 272], dtype=int32),\n",
      "       array([ 13,  28,  35,  51,  86,  92,  99, 116, 187, 197, 202, 208, 210,\n",
      "              218, 258, 272], dtype=int32)                                    ,\n",
      "       array([ 35,  69,  72,  86,  89, 116, 118, 210, 258, 272], dtype=int32),\n",
      "       array([210, 247, 266, 272], dtype=int32),\n",
      "       array([ 11,  23,  57, 100, 123, 133, 156, 180, 215, 236, 250], dtype=int32),\n",
      "       array([ 10,  11,  32,  37,  82,  89, 210, 272], dtype=int32),\n",
      "       array([ 28,  80,  96, 176, 209, 210, 246, 272], dtype=int32),\n",
      "       array([ 11,  32,  43,  79, 162, 210, 238, 246, 272], dtype=int32),\n",
      "       array([ 99, 202, 246, 304], dtype=int32),\n",
      "       array([162, 210, 272, 303], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([  7,  11,  32,  97, 144, 145, 182, 202, 276, 282], dtype=int32),\n",
      "       array([ 82,  97, 145, 192, 202, 246], dtype=int32),\n",
      "       array([ 11,  32, 210, 225, 227, 272, 277], dtype=int32),\n",
      "       array([ 99, 142, 145, 157, 202, 231, 256], dtype=int32),\n",
      "       array([ 78, 121, 124, 133, 210, 241, 245, 300], dtype=int32),\n",
      "       array([  7,  11,  32,  43,  45,  66,  70,  85, 110, 123, 145, 158, 246],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 11,  32,  58,  99, 202, 205, 246], dtype=int32),\n",
      "       array([ 11,  99, 119, 186, 202, 232, 250, 268], dtype=int32),\n",
      "       array([  8,  67,  98,  99, 131, 134, 176, 202, 210, 213, 233, 272, 282,\n",
      "              308], dtype=int32)                                              ,\n",
      "       array([ 13,  47, 111, 168, 210, 242, 272, 275], dtype=int32),\n",
      "       array([ 99, 111, 149, 157, 192, 202, 242, 306], dtype=int32),\n",
      "       array([ 16,  18,  45,  52, 145, 154, 162, 174, 176, 177, 197, 199, 202,\n",
      "              210, 225, 241, 246, 258, 294, 296, 297], dtype=int32)           ,\n",
      "       array([ 55,  65, 145, 153, 202, 210, 225, 272], dtype=int32),\n",
      "       array([145, 197, 202, 246, 312], dtype=int32),\n",
      "       array([  0,  56, 184, 210, 236, 246, 272], dtype=int32),\n",
      "       array([  3,  15,  58,  90,  99, 123, 202, 252, 269, 298], dtype=int32),\n",
      "       array([  5,  11,  20,  32,  44,  48,  75, 210, 242, 272, 299, 313],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 11,  32,  75,  81,  99, 115, 194, 202, 209, 210, 229, 235, 272],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 38,  54,  62,  69, 145, 162, 202, 231, 280], dtype=int32),\n",
      "       array([ 10,  11,  32,  99, 192, 208, 225, 310], dtype=int32),\n",
      "       array([ 16,  26,  75,  99, 103, 114, 123, 136, 202, 217, 266, 285, 298,\n",
      "              299, 313], dtype=int32)                                         ,\n",
      "       array([123, 181, 246, 300], dtype=int32),\n",
      "       array([ 99, 149, 188, 198, 202, 208, 237, 287], dtype=int32),\n",
      "       array([ 44, 117, 210, 241, 246], dtype=int32),\n",
      "       array([  2,  76,  91,  99, 121, 202, 209, 275, 313], dtype=int32),\n",
      "       array([  5,  11,  32, 210, 272], dtype=int32),\n",
      "       array([ 25, 144, 210, 272, 292], dtype=int32),\n",
      "       array([  7,  35,  63,  86, 106, 208, 210, 272, 301], dtype=int32),\n",
      "       array([ 43, 111, 123, 149], dtype=int32),\n",
      "       array([  1,   6,  54,  62,  76, 118, 150, 158, 210, 240, 272], dtype=int32),\n",
      "       array([ 35,  69,  86, 189, 210, 272, 277], dtype=int32),\n",
      "       array([ 16,  33, 210, 272, 311], dtype=int32),\n",
      "       array([ 11,  31,  45,  73, 123, 215, 299], dtype=int32),\n",
      "       array([  8,  12, 210, 246, 272], dtype=int32),\n",
      "       array([ 43, 110, 120, 123, 189, 312], dtype=int32),\n",
      "       array([ 99, 118, 198, 202, 216, 252], dtype=int32),\n",
      "       array([ 32,  33,  56, 102, 123, 144, 246], dtype=int32),\n",
      "       array([ 11,  32,  54,  94,  99, 134, 145, 202], dtype=int32),\n",
      "       array([ 99, 140, 144, 180, 202], dtype=int32),\n",
      "       array([ 11,  32, 137, 210, 246, 272], dtype=int32),\n",
      "       array([118, 210, 241, 281], dtype=int32),\n",
      "       array([145, 202], dtype=int32), array([210, 272], dtype=int32),\n",
      "       array([ 35,  92, 177, 187, 200, 205, 210, 241, 291], dtype=int32),\n",
      "       array([ 31,  35,  86, 118, 210, 214, 246, 251, 269, 272], dtype=int32),\n",
      "       array([101, 123, 156, 215, 225, 305], dtype=int32),\n",
      "       array([  7,  39,  55,  76,  83,  89, 109, 123, 152, 269], dtype=int32),\n",
      "       array([ 11,  32,  75,  99, 202, 210, 221, 241, 258, 272, 299, 313],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 43,  70,  99, 118, 197, 202, 221], dtype=int32),\n",
      "       array([ 13,  31,  44,  56,  57,  82, 121, 160, 200, 206, 210, 223, 232,\n",
      "              238, 272, 283], dtype=int32)                                    ,\n",
      "       array([  4, 145, 185, 190, 197, 202], dtype=int32),\n",
      "       array([ 10,  48,  53,  72,  97, 145, 188, 202, 209, 248, 258, 306, 311],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 28,  63,  82, 100, 144, 173, 175, 210, 227, 239, 272, 301, 309],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 33,  99, 202, 225, 258, 288, 292], dtype=int32),\n",
      "       array([ 99, 152, 202, 276], dtype=int32),\n",
      "       array([200, 210, 272, 277, 312], dtype=int32),\n",
      "       array([ 11,  32,  56, 107, 123, 204, 242, 299], dtype=int32),\n",
      "       array([ 99, 143, 144, 202, 232, 299], dtype=int32),\n",
      "       array([ 41, 113, 144, 210, 215, 272, 299], dtype=int32),\n",
      "       array([21, 23], dtype=int32),\n",
      "       array([ 35,  99, 113, 141, 167, 174, 175, 202, 221, 262], dtype=int32),\n",
      "       array([ 53,  99, 202, 246], dtype=int32),\n",
      "       array([ 52,  67,  73,  80,  99, 101, 202, 257, 275], dtype=int32),\n",
      "       array([ 11,  17,  25,  32,  36, 113, 128, 143, 180, 197, 210, 220, 223,\n",
      "              232, 247, 265, 269, 272], dtype=int32)                          ,\n",
      "       array([ 18, 210, 272], dtype=int32),\n",
      "       array([129, 145, 202, 269, 293, 298, 312], dtype=int32),\n",
      "       array([ 11,  32, 123, 149, 252, 266, 271, 299, 306], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([ 99, 164, 210, 241, 272], dtype=int32),\n",
      "       array([ 11,  32,  62, 145, 210, 225, 246, 269, 272], dtype=int32),\n",
      "       array([ 99, 131, 155, 202, 210, 246, 272], dtype=int32),\n",
      "       array([ 15, 118, 120, 123, 133, 156, 158, 186], dtype=int32),\n",
      "       array([ 11,  32, 149, 268, 292, 303], dtype=int32),\n",
      "       array([ 13,  60, 120, 122, 148, 210, 220, 230, 241, 267], dtype=int32),\n",
      "       array([ 17,  63,  95, 103, 135, 175, 178, 196, 210, 252, 272], dtype=int32),\n",
      "       array([ 62,  74,  89,  91,  97, 102, 139, 145, 182, 202, 205], dtype=int32),\n",
      "       array([ 99, 138, 174, 202, 210, 262, 272, 303], dtype=int32),\n",
      "       array([104, 210, 233, 236, 266, 272, 299], dtype=int32),\n",
      "       array([ 13,  65, 118, 123, 167, 185, 204, 212, 270], dtype=int32),\n",
      "       array([  8,  11,  31,  32,  44,  49,  56,  82, 115, 194, 198, 200, 210,\n",
      "              235, 264, 272, 282], dtype=int32)                               ,\n",
      "       array([ 31,  35,  86, 118, 210, 214, 246, 251, 269, 272], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([ 32,  99, 123, 202, 210, 272, 273], dtype=int32),\n",
      "       array([ 38,  61, 128, 134, 144, 154, 210, 272], dtype=int32),\n",
      "       array([  5,  34,  44, 180, 210, 241], dtype=int32),\n",
      "       array([ 11,  22,  32,  38,  45, 145, 202, 246, 263, 312], dtype=int32),\n",
      "       array([111, 149, 204, 207, 210, 241, 246], dtype=int32),\n",
      "       array([118, 134, 143, 145, 176, 202, 269, 308], dtype=int32),\n",
      "       array([ 11,  32,  44,  65,  99, 133, 176, 190, 200, 202], dtype=int32),\n",
      "       array([ 11,  28,  32,  44,  75, 118, 123, 144, 146, 197, 200], dtype=int32),\n",
      "       array([ 57,  77, 100, 123, 257, 258, 281], dtype=int32),\n",
      "       array([ 17,  45,  48,  99, 139, 143, 210, 227, 241, 284], dtype=int32),\n",
      "       array([210, 241, 246, 264], dtype=int32),\n",
      "       array([ 34,  99, 122, 210, 237, 272], dtype=int32),\n",
      "       array([ 11,  32,  45,  99, 123, 129, 131, 148, 158, 202, 223, 303],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 17,  56,  69, 123, 145, 189, 212, 233, 275, 277], dtype=int32),\n",
      "       array([ 11,  32,  73,  99, 202, 252, 269], dtype=int32),\n",
      "       array([ 14,  80,  99, 132, 133, 162, 185, 202, 240, 258, 260, 276],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 45,  99, 114, 143, 146, 202, 210, 256, 272], dtype=int32),\n",
      "       array([111, 141, 145, 185, 202, 208, 269], dtype=int32),\n",
      "       array([ 26,  31,  89, 123, 215, 238], dtype=int32),\n",
      "       array([115, 133, 145, 155, 202, 215, 295, 305], dtype=int32),\n",
      "       array([ 90,  93, 145, 202, 268], dtype=int32),\n",
      "       array([ 16,  27,  34,  60,  66,  75,  97, 116, 120, 141, 145, 202, 207,\n",
      "              246, 266, 271, 293, 294, 306], dtype=int32)                     ,\n",
      "       array([ 11,  32,  34,  82, 113, 117, 178, 210, 272, 300], dtype=int32),\n",
      "       array([ 99, 136, 190, 202, 230, 246], dtype=int32),\n",
      "       array([  8,  17,  38,  68,  82,  99, 124, 174, 202, 229], dtype=int32),\n",
      "       array([ 13, 184, 185, 227], dtype=int32),\n",
      "       array([ 14,  43, 129, 210, 272], dtype=int32),\n",
      "       array([  2,  38,  43,  87, 103, 107, 139, 303], dtype=int32),\n",
      "       array([ 27, 118, 123, 287, 312, 313], dtype=int32),\n",
      "       array([ 11,  28,  32,  69, 123, 207, 231, 289], dtype=int32),\n",
      "       array([ 85,  91, 129, 145, 202, 226, 246], dtype=int32),\n",
      "       array([ 11,  16,  32,  99, 202, 271, 288, 299, 315], dtype=int32),\n",
      "       array([  3,  17, 123, 144, 217, 225, 227, 278], dtype=int32),\n",
      "       array([210, 246, 272, 311], dtype=int32),\n",
      "       array([ 11,  32,  60,  69,  80, 130, 133, 145, 158, 202, 203, 260],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 35,  86,  92,  97,  99, 176, 197, 202, 210, 219, 228, 269, 272],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 81, 107, 162, 190, 210, 236, 241, 281], dtype=int32),\n",
      "       array([ 15,  17, 104, 132, 139, 210, 272, 299], dtype=int32),\n",
      "       array([ 10,  37,  99, 202, 246], dtype=int32),\n",
      "       array([ 11,  32,  34,  73,  99, 103, 210, 214, 228, 272], dtype=int32),\n",
      "       array([ 25,  63,  69, 179, 180, 194, 195, 196, 204, 210, 236, 258, 264,\n",
      "              268, 272], dtype=int32)                                         ,\n",
      "       array([ 43,  45,  99, 111, 145, 157, 202, 266, 290], dtype=int32),\n",
      "       array([ 24,  99, 135, 200, 202], dtype=int32),\n",
      "       array([  2,  76,  91,  99, 121, 202, 209, 275, 313], dtype=int32),\n",
      "       array([ 47,  75,  80,  99, 101, 125, 197, 202, 205, 213, 260], dtype=int32),\n",
      "       array([  7,  30,  70,  71,  74, 139, 210, 211, 269, 272, 293, 300],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 58,  99, 145, 172, 185, 202, 236, 275, 290, 294, 309], dtype=int32),\n",
      "       array([ 73, 210, 246, 264, 272], dtype=int32),\n",
      "       array([ 12,  65, 123, 129, 158, 206, 225, 227, 293, 297], dtype=int32),\n",
      "       array([ 58,  99, 139, 168, 202, 246, 252, 277], dtype=int32),\n",
      "       array([ 34, 193, 210, 222, 254, 272], dtype=int32),\n",
      "       array([ 31,  35,  86, 118, 210, 214, 246, 251, 269, 272], dtype=int32),\n",
      "       array([135, 210, 212, 272], dtype=int32),\n",
      "       array([ 11,  32, 113, 123, 186, 193, 201, 215, 223, 236], dtype=int32),\n",
      "       array([ 89, 145, 169, 202, 211, 282], dtype=int32),\n",
      "       array([136, 210, 272], dtype=int32),\n",
      "       array([178, 210, 272, 299], dtype=int32),\n",
      "       array([101, 123, 180, 271, 299], dtype=int32),\n",
      "       array([ 99, 123, 164], dtype=int32),\n",
      "       array([ 11,  32, 145, 150, 202], dtype=int32),\n",
      "       array([ 73,  82,  96, 171, 210, 246, 272, 314], dtype=int32),\n",
      "       array([ 17,  20,  35,  77,  86,  99, 173, 202, 218, 225, 291], dtype=int32),\n",
      "       array([ 22,  40,  67, 123, 206, 236, 246], dtype=int32),\n",
      "       array([ 65,  78,  80, 123, 133, 144, 203, 205, 260, 299], dtype=int32),\n",
      "       array([ 73,  98, 133, 202, 210, 252, 264, 272], dtype=int32),\n",
      "       array([ 13,  43,  73,  99, 108, 158, 202, 294, 299], dtype=int32),\n",
      "       array([ 32,  46,  61, 108, 123, 152, 227, 231, 273], dtype=int32),\n",
      "       array([ 99, 104, 147, 197, 202, 252, 315], dtype=int32),\n",
      "       array([ 99, 123, 140, 156, 183, 190, 197, 202, 220, 225, 304], dtype=int32),\n",
      "       array([ 61,  68,  99, 123, 134, 139, 188, 242], dtype=int32),\n",
      "       array([ 25,  63, 145, 151, 202, 270], dtype=int32),\n",
      "       array([ 12,  28,  45,  48,  65,  99, 126, 150, 202, 225, 238, 303],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 56,  64, 111, 197, 207, 210, 272, 298], dtype=int32),\n",
      "       array([  7,  91, 100, 210, 272], dtype=int32),\n",
      "       array([  5,  35,  86, 210, 214, 246, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 31,  47,  82, 113, 210, 272], dtype=int32),\n",
      "       array([ 41, 123, 125, 143, 146, 207, 231, 242, 258, 271, 274, 298, 299],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 99, 157, 174, 202], dtype=int32),\n",
      "       array([ 11,  32,  42,  45, 105, 117, 123, 129, 130, 204, 210, 220, 272,\n",
      "              274], dtype=int32)                                              ,\n",
      "       array([ 99, 149, 202, 242, 256, 271, 299], dtype=int32),\n",
      "       array([ 18,  68,  82, 112, 144, 151, 180, 190, 196, 210, 215, 272, 302,\n",
      "              305, 306], dtype=int32)                                         ,\n",
      "       array([ 99, 145, 202, 225, 264], dtype=int32),\n",
      "       array([ 11,  32,  57,  99, 123, 195, 202, 254, 294], dtype=int32),\n",
      "       array([  4,  35,  86,  92,  99, 144, 176, 189, 196, 202, 229, 263],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([126, 173, 175, 196, 202, 210, 236, 239, 272, 301, 307], dtype=int32),\n",
      "       array([ 32,  76,  99, 132, 142, 162, 202, 269], dtype=int32),\n",
      "       array([ 34, 167, 210, 225, 272, 285], dtype=int32),\n",
      "       array([ 38,  61,  99, 122, 142, 150, 202, 225, 303], dtype=int32),\n",
      "       array([ 11,  19,  32,  69, 103, 137, 162, 166, 195, 210, 229, 272, 297],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 50,  56,  83, 137, 146, 182, 197, 210, 264, 272, 298], dtype=int32),\n",
      "       array([ 58,  62, 145, 202, 233, 246, 300], dtype=int32),\n",
      "       array([ 80, 111, 113, 203, 210, 260, 272], dtype=int32),\n",
      "       array([ 11,  32, 116, 155, 210, 246, 258, 272], dtype=int32),\n",
      "       array([ 99, 105, 118, 145, 202, 225], dtype=int32),\n",
      "       array([  9,  66,  98,  99, 128, 136, 143, 157, 202, 210, 236, 247, 265,\n",
      "              269, 272, 280], dtype=int32)                                    ,\n",
      "       array([ 78,  99, 197, 199, 202], dtype=int32),\n",
      "       array([123, 204, 230], dtype=int32),\n",
      "       array([ 56,  63, 139, 191, 210, 272, 300], dtype=int32),\n",
      "       array([ 11,  32,  35,  86,  92,  99, 117, 146, 174, 187, 198, 202, 218],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 11,  32,  54,  80, 101, 125, 151, 167, 169, 197, 205, 210, 213,\n",
      "              260, 272], dtype=int32)                                         ,\n",
      "       array([ 34,  35,  39,  52,  63, 202, 210, 246, 264, 272, 295, 301, 311],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 44, 145, 146, 166, 210, 262, 272], dtype=int32),\n",
      "       array([ 69, 103, 210, 246, 264, 272, 300], dtype=int32),\n",
      "       array([ 59, 123, 144, 220, 277, 278], dtype=int32),\n",
      "       array([ 13,  43,  99, 202, 210, 225, 227, 250, 272], dtype=int32),\n",
      "       array([ 11,  32,  78,  99, 197, 202, 203, 223, 242], dtype=int32),\n",
      "       array([  5, 210, 215, 272, 289], dtype=int32),\n",
      "       array([ 99, 122, 176, 202, 219, 220, 230, 258, 269], dtype=int32),\n",
      "       array([ 82,  99, 202, 210, 272], dtype=int32),\n",
      "       array([133, 145, 202, 213, 233, 252, 280, 282], dtype=int32),\n",
      "       array([ 43,  61, 198, 202, 221, 293], dtype=int32),\n",
      "       array([ 17,  32,  37,  45,  99, 104, 116, 147, 162, 200, 202, 210, 212,\n",
      "              215, 232, 236, 246, 258, 272, 278], dtype=int32)                ,\n",
      "       array([145, 153, 155, 202, 231, 296], dtype=int32),\n",
      "       array([  7,  34,  55,  69, 145, 167, 202], dtype=int32),\n",
      "       array([104, 123, 128, 134, 190, 311], dtype=int32),\n",
      "       array([ 17,  28,  92,  99, 125, 187, 202, 218, 262, 291], dtype=int32),\n",
      "       array([ 15,  89, 141, 145, 202, 302, 309], dtype=int32),\n",
      "       array([102, 139, 142, 210, 220, 225, 272], dtype=int32),\n",
      "       array([ 43, 145, 202, 236, 294, 303], dtype=int32),\n",
      "       array([ 72, 155, 165, 210, 214, 246, 251, 264, 269, 272, 301], dtype=int32),\n",
      "       array([ 15,  77, 210, 272, 303], dtype=int32),\n",
      "       array([ 47,  57,  94, 103, 123, 128, 131, 133, 136, 144, 286, 294],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([  6,  74,  79, 118, 133, 135, 137, 145, 174, 202, 277, 302],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 99, 111, 149, 160, 202, 204, 207, 214, 311], dtype=int32),\n",
      "       array([ 17,  43,  99, 104, 157, 202, 210, 236, 269, 272, 311], dtype=int32),\n",
      "       array([ 16,  76,  89, 123, 144, 147, 190, 221, 304], dtype=int32),\n",
      "       array([ 64, 112, 176, 198, 210, 219, 258, 272, 305, 308], dtype=int32),\n",
      "       array([123, 136, 238, 246], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([ 22,  36,  99, 202, 246, 302], dtype=int32),\n",
      "       array([ 99, 186, 202], dtype=int32),\n",
      "       array([ 11,  32,  53,  71,  80, 112, 144, 176, 180, 181, 190, 210, 212,\n",
      "              215, 220, 223, 260, 268, 269, 270, 272, 273, 294, 305], dtype=int32),\n",
      "       array([ 17, 145, 151, 202, 247], dtype=int32),\n",
      "       array([149, 150, 210, 227, 272], dtype=int32),\n",
      "       array([ 18,  26,  49,  63,  65,  70,  72, 121, 133, 134, 210, 225, 227,\n",
      "              258, 272, 302], dtype=int32)                                    ,\n",
      "       array([ 17,  82, 180, 210, 224, 258, 272, 283], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([ 50, 123, 184], dtype=int32),\n",
      "       array([157, 186, 210, 226, 270, 272], dtype=int32),\n",
      "       array([ 21,  60,  95,  99, 120, 202, 258, 270], dtype=int32),\n",
      "       array([ 11,  32,  79, 210, 220, 272, 303], dtype=int32),\n",
      "       array([133, 147, 189, 210, 272], dtype=int32),\n",
      "       array([ 57,  77,  81,  82, 100, 122, 123, 163, 168, 170, 246, 250, 263,\n",
      "              268, 275, 310], dtype=int32)                                    ,\n",
      "       array([ 51,  69,  92,  99, 118, 187, 194, 202, 220, 288, 291], dtype=int32),\n",
      "       array([ 27,  73,  82,  88,  89,  99, 145, 192, 197, 202, 205, 206, 210,\n",
      "              213, 246, 253, 272, 275, 309], dtype=int32)                     ,\n",
      "       array([ 34,  43,  76,  79,  81, 127, 202, 222, 225, 311], dtype=int32),\n",
      "       array([ 11,  32,  63, 118, 134, 144, 150, 173, 197, 210, 220, 225, 227,\n",
      "              231, 239, 250, 258, 272, 301, 302], dtype=int32)                ,\n",
      "       array([ 99, 111, 202], dtype=int32),\n",
      "       array([ 28,  38, 108, 123, 158, 177, 206, 238, 269], dtype=int32),\n",
      "       array([  2,   9,  60,  63,  95,  99, 144, 194, 198, 202, 225, 230],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 15,  96, 123, 176, 246], dtype=int32),\n",
      "       array([ 39,  98, 198, 202, 210, 230, 272], dtype=int32),\n",
      "       array([ 11,  27,  31,  41, 210, 214, 269, 272, 299], dtype=int32),\n",
      "       array([  3,  15,  58,  90,  99, 123, 202, 252, 269, 298], dtype=int32),\n",
      "       array([  8,  17,  38,  68,  82,  99, 124, 174, 202, 229], dtype=int32),\n",
      "       array([210, 225, 227, 272], dtype=int32),\n",
      "       array([  3,  29, 123, 144, 269, 288], dtype=int32),\n",
      "       array([ 11,  32,  99, 143, 146, 170, 198, 202, 242, 299], dtype=int32),\n",
      "       array([ 11,  23,  57, 100, 123, 133, 156, 180, 215, 236, 250], dtype=int32),\n",
      "       array([  1,  11,  21,  27,  32,  37,  39,  54,  57,  69,  78,  82,  97,\n",
      "               99, 103, 114, 121, 122, 146, 169, 170, 188, 202, 213, 217, 222,\n",
      "              224, 232, 233, 236, 246, 258, 266, 269, 270, 273, 277, 284, 288,\n",
      "              289, 292, 294, 299, 304], dtype=int32)                          ,\n",
      "       array([ 11,  32,  45, 111, 145, 150, 202, 237], dtype=int32),\n",
      "       array([  8,  36,  47, 128, 136, 140, 144, 145, 210, 217, 225, 236, 237,\n",
      "              241, 242, 249, 256, 299], dtype=int32)                          ,\n",
      "       array([ 93, 118, 123, 144, 309], dtype=int32),\n",
      "       array([ 13,  42,  96,  99, 171, 202, 314], dtype=int32),\n",
      "       array([ 20,  65, 143, 175, 183, 202, 210, 251, 272, 287], dtype=int32),\n",
      "       array([ 80,  99, 111, 167, 174, 176, 202, 221, 260], dtype=int32),\n",
      "       array([ 80,  99, 111, 167, 174, 176, 202, 221, 260], dtype=int32),\n",
      "       array([ 11,  32,  34,  58,  99, 148, 188, 202, 208, 236, 246, 261, 270,\n",
      "              284, 289, 298], dtype=int32)                                    ,\n",
      "       array([210, 272, 275], dtype=int32),\n",
      "       array([ 10,  29,  69,  99, 100, 126, 190, 202, 227, 258, 264], dtype=int32),\n",
      "       array([123, 134, 144, 220, 221, 236], dtype=int32),\n",
      "       array([ 80,  99, 174, 202, 210, 260, 272], dtype=int32),\n",
      "       array([ 58,  62, 145, 202, 233, 246, 300], dtype=int32),\n",
      "       array([  1,  22,  43,  99, 202], dtype=int32),\n",
      "       array([  3,  10,  12,  66,  86,  89,  90, 102, 126, 139, 140, 145, 202,\n",
      "              252], dtype=int32)                                              ,\n",
      "       array([ 60, 141, 182, 192, 210, 222, 246, 267, 269, 272], dtype=int32),\n",
      "       array([ 11,  32,  45,  78,  99, 145, 202, 227, 257, 264, 287], dtype=int32),\n",
      "       array([  0,  56,  57,  73, 100, 106, 126, 139, 141, 145, 192, 202, 212,\n",
      "              276, 313], dtype=int32)                                         ,\n",
      "       array([ 49,  74, 140, 210, 272, 312], dtype=int32),\n",
      "       array([ 11,  32,  43,  60,  77, 158, 162, 210, 236, 247, 269, 272],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([  9, 210, 272], dtype=int32),\n",
      "       array([  1,  11,  30,  32,  38,  61,  70,  82, 123, 139, 145, 158, 185,\n",
      "              186, 194, 210, 217, 240, 246, 258, 272, 278, 294], dtype=int32) ,\n",
      "       array([210, 245, 272], dtype=int32),\n",
      "       array([ 11,  32,  45, 126, 145, 149, 202, 227], dtype=int32),\n",
      "       array([ 99, 197, 210, 235, 272, 282], dtype=int32),\n",
      "       array([ 31,  49,  72, 138, 139, 141, 145, 148, 191, 197, 202, 212, 264],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 43, 204, 210, 272], dtype=int32),\n",
      "       array([ 99, 109, 118, 123, 125, 141, 144, 174, 190, 202], dtype=int32),\n",
      "       array([ 18,  93, 107, 115, 173, 190, 210, 225, 258, 272], dtype=int32),\n",
      "       array([  8,  13,  82,  89, 122, 123, 193], dtype=int32),\n",
      "       array([ 11,  17,  27,  31,  32,  44,  50,  63,  68,  79,  81, 110, 140,\n",
      "              166, 175, 185, 196, 200, 210, 224, 237, 246, 263, 272, 275, 294,\n",
      "              302, 310], dtype=int32)                                         ,\n",
      "       array([ 14,  42,  44,  98,  99, 190, 200, 202, 220], dtype=int32),\n",
      "       array([ 24,  32,  94, 115, 123, 134, 246, 249, 258], dtype=int32),\n",
      "       array([ 99, 202, 246], dtype=int32),\n",
      "       array([ 99, 202, 232, 246], dtype=int32),\n",
      "       array([ 11,  32,  45,  96, 150, 151, 210, 217, 266, 272], dtype=int32),\n",
      "       array([ 99, 164, 210, 272], dtype=int32),\n",
      "       array([  5,  99, 103, 111, 149, 202, 204, 224, 256, 266, 273, 312],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 11,  32, 123, 133, 244, 252, 312], dtype=int32),\n",
      "       array([ 99, 123, 202, 210, 272, 299, 313], dtype=int32),\n",
      "       array([ 61,  78,  99, 140, 145, 167, 202, 225, 285], dtype=int32),\n",
      "       array([ 44, 109, 150, 210, 272], dtype=int32),\n",
      "       array([  2,  11,  29,  32,  37,  42,  45,  79,  99, 153, 202, 253],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 93, 157, 173, 210, 220, 272, 296], dtype=int32),\n",
      "       array([ 32, 210, 246, 272], dtype=int32),\n",
      "       array([ 23,  47, 190, 210, 236, 245, 263, 264, 272], dtype=int32),\n",
      "       array([ 75, 115, 128, 167, 207, 210, 223, 229, 235, 272], dtype=int32),\n",
      "       array([  1,   5,  11,  23,  32,  34,  37,  40,  44,  56,  62,  76,  78,\n",
      "               85,  87,  98,  99, 105, 111, 114, 121, 141, 145, 153, 170, 188,\n",
      "              197, 202, 221, 223, 225, 233, 246, 251, 259, 294, 298, 303],\n",
      "             dtype=int32)                                                     ,\n",
      "       array([  2, 139, 145, 202, 212, 231, 281, 297], dtype=int32),\n",
      "       array([ 16,  23,  59, 145, 202, 225, 236], dtype=int32),\n",
      "       array([  5,  35,  86, 210, 214, 246, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 93, 123, 173, 175, 300], dtype=int32),\n",
      "       array([  9, 210, 272], dtype=int32),\n",
      "       array([ 17,  34, 109, 123, 134, 144, 219, 253, 284], dtype=int32),\n",
      "       array([ 10,  26,  59, 145, 150, 202, 258], dtype=int32),\n",
      "       array([  0,  44, 123, 139, 178, 199, 258], dtype=int32),\n",
      "       array([ 25,  57, 123, 132, 139, 144, 220, 244, 254], dtype=int32),\n",
      "       array([115, 181, 190, 210, 225, 236, 269, 272], dtype=int32),\n",
      "       array([ 11,  32, 117, 178, 210, 272], dtype=int32),\n",
      "       array([117, 128, 130, 158, 167, 189, 210, 212, 238, 258, 272, 274],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 11,  32, 210, 241, 246], dtype=int32),\n",
      "       array([ 15,  99, 104, 202, 232, 261], dtype=int32),\n",
      "       array([  5,  35,  86, 210, 214, 246, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 51,  99, 118, 187, 202], dtype=int32),\n",
      "       array([ 45,  69, 111, 143, 145, 149, 200, 214, 242, 269, 300, 312],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 44,  83, 105, 115, 123, 181, 200], dtype=int32),\n",
      "       array([145, 174, 202, 210, 265, 272, 312], dtype=int32),\n",
      "       array([ 59,  99, 130, 139, 185, 186, 202, 210, 256, 272, 294], dtype=int32),\n",
      "       array([ 73,  99, 110, 112, 145, 156, 202, 210, 261, 271, 272], dtype=int32),\n",
      "       array([ 34, 107, 138, 139, 190, 210, 241, 246, 261], dtype=int32),\n",
      "       array([ 44,  68,  73,  78,  93,  99, 107, 120, 122, 190, 202, 211, 223,\n",
      "              226, 246, 269, 272, 278, 296, 313], dtype=int32)                ,\n",
      "       array([210, 241, 246, 288], dtype=int32),\n",
      "       array([101, 162, 210, 225, 272, 305], dtype=int32),\n",
      "       array([133, 147, 189, 210, 245, 272], dtype=int32),\n",
      "       array([ 11,  32,  45,  61,  79, 111, 123, 162, 186, 246, 297], dtype=int32),\n",
      "       array([ 49,  58,  83,  99, 174, 190, 202, 221, 246], dtype=int32),\n",
      "       array([  7,  11,  32,  45,  61,  99, 150, 192, 202, 225, 231], dtype=int32),\n",
      "       array([ 43,  99, 202, 294], dtype=int32),\n",
      "       array([ 99, 179, 202, 227], dtype=int32),\n",
      "       array([ 19, 145, 202, 220, 249, 295], dtype=int32),\n",
      "       array([117, 123, 134, 158, 176, 179], dtype=int32),\n",
      "       array([  8,  55,  65, 145, 190, 197, 210, 221, 269, 272], dtype=int32),\n",
      "       array([ 49, 115, 137, 138, 139, 194, 210, 272, 294], dtype=int32),\n",
      "       array([  4,  24,  27,  48,  49,  50,  67,  83, 132, 145, 150, 167, 192,\n",
      "              202, 219, 220, 225, 248, 269, 271, 286], dtype=int32)           ,\n",
      "       array([142, 145, 210, 231, 272], dtype=int32),\n",
      "       array([ 50,  99, 107, 202, 225, 275, 286], dtype=int32),\n",
      "       array([  4,  18,  44,  89, 114, 145, 202, 295], dtype=int32),\n",
      "       array([104, 111, 121, 140, 153, 179, 184, 201, 206, 210, 230, 237, 266,\n",
      "              269, 272, 294, 307, 311], dtype=int32)                          ,\n",
      "       array([ 44,  56,  99, 111, 128, 136, 167, 202, 204, 216, 258, 266, 269,\n",
      "              285, 294, 299], dtype=int32)                                    ,\n",
      "       array([  2,  56,  59,  76,  90,  93, 123, 149, 228, 236, 312], dtype=int32),\n",
      "       array([ 65, 106, 170, 210, 220, 272, 311], dtype=int32),\n",
      "       array([ 54,  80,  99, 101, 174, 202, 260], dtype=int32),\n",
      "       array([ 13,  99, 106, 202, 210, 272], dtype=int32),\n",
      "       array([ 34,  54,  62,  65, 107, 197, 210, 251, 272, 274, 293], dtype=int32),\n",
      "       array([ 72,  99, 145, 150, 202, 222], dtype=int32),\n",
      "       array([ 40,  66,  99, 104, 158, 197, 202, 258, 308], dtype=int32),\n",
      "       array([ 52,  65, 133, 183, 210, 225, 272], dtype=int32),\n",
      "       array([ 11,  26,  32,  34,  35,  63,  72,  86, 121, 150, 165, 176, 185,\n",
      "              189, 210, 264, 272, 302, 311], dtype=int32)                     ,\n",
      "       array([144, 156, 180, 210, 272], dtype=int32),\n",
      "       array([  4,  77,  99, 106, 128, 144, 167, 175, 202, 210, 259, 262, 272,\n",
      "              283, 313], dtype=int32)                                         ,\n",
      "       array([  1,  99, 158, 198, 202, 204, 231, 299], dtype=int32),\n",
      "       array([ 21,  69,  97, 145, 202, 213, 231], dtype=int32),\n",
      "       array([100, 123, 184, 233], dtype=int32),\n",
      "       array([  2,  45, 111, 145, 202, 246], dtype=int32),\n",
      "       array([ 18,  27,  58,  99, 202, 246, 252, 277], dtype=int32),\n",
      "       array([ 99, 186, 202], dtype=int32),\n",
      "       array([  8,  55,  65, 145, 190, 197, 210, 221, 269, 272], dtype=int32),\n",
      "       array([  5,  11,  31,  32,  45,  78,  82,  98,  99, 202, 217, 259, 299],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 35,  44,  51,  76,  86,  92,  99, 145, 150, 187, 197, 202, 211,\n",
      "              252], dtype=int32)                                              ,\n",
      "       array([  4,  29,  52,  65,  73,  98, 202, 294], dtype=int32),\n",
      "       array([ 31,  99, 202, 246], dtype=int32),\n",
      "       array([ 48, 116, 182, 190, 210, 254, 258, 272, 288, 312], dtype=int32),\n",
      "       array([117, 130, 169, 210, 220, 272, 274], dtype=int32),\n",
      "       array([ 11,  31,  32,  76,  82,  89, 112, 123, 242, 299, 305], dtype=int32),\n",
      "       array([ 78,  96, 113, 123, 176, 246], dtype=int32),\n",
      "       array([ 56,  66,  97, 110, 145, 162, 164, 210, 230, 238, 272, 308],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 62, 145, 202, 246, 280], dtype=int32),\n",
      "       array([ 11,  19,  32,  43,  78, 129, 198, 202, 207, 210, 217, 266, 272,\n",
      "              298, 299], dtype=int32)                                         ,\n",
      "       array([ 34,  52,  64, 111, 123, 131, 136, 145, 149, 207, 210, 222, 256,\n",
      "              272, 298, 299], dtype=int32)                                    ,\n",
      "       array([  4, 122, 123, 124, 176], dtype=int32),\n",
      "       array([  4,  52,  75,  99, 146, 150, 176, 192, 202, 257], dtype=int32),\n",
      "       array([ 89, 105, 123, 143, 269], dtype=int32),\n",
      "       array([113, 123, 179, 210, 220, 244, 272, 284], dtype=int32),\n",
      "       array([ 99, 202, 305, 310], dtype=int32),\n",
      "       array([ 78,  82, 113, 161, 196, 207, 210, 262, 271, 272, 279], dtype=int32),\n",
      "       array([ 43, 104, 123, 186, 198, 222, 246], dtype=int32),\n",
      "       array([  3,  10,  51,  93,  97, 137, 145, 153, 154, 190, 202, 289, 291],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 26,  63, 144, 210, 214, 246, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 11,  32,  43,  45,  99, 105, 123, 158, 202, 217], dtype=int32),\n",
      "       array([ 73,  99, 145, 202, 204, 236], dtype=int32),\n",
      "       array([ 11,  67,  78,  99, 115, 118, 137, 140, 185, 197, 202, 210, 261,\n",
      "              264, 269, 272], dtype=int32)                                    ,\n",
      "       array([ 10,  11,  32,  45,  58, 145, 197, 202, 210, 237, 272, 294],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 34,  43,  48,  98, 183, 234], dtype=int32),\n",
      "       array([ 11,  32,  51, 145, 150, 208], dtype=int32),\n",
      "       array([ 47, 111, 123, 178, 180, 211], dtype=int32),\n",
      "       array([ 57,  69,  89,  97,  99, 100, 114, 119, 145, 197, 202, 214, 267],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 50, 133, 136, 178, 210, 272, 285, 286], dtype=int32),\n",
      "       array([ 11,  69,  93, 128, 184, 190, 197, 210, 272, 287], dtype=int32),\n",
      "       array([ 11,  31,  32,  76,  82,  89, 112, 123, 242, 299, 305], dtype=int32),\n",
      "       array([ 23,  45,  95, 128, 141, 154, 210, 224, 272], dtype=int32),\n",
      "       array([123, 144, 236, 284], dtype=int32),\n",
      "       array([ 43, 210, 246, 272, 293], dtype=int32),\n",
      "       array([ 43,  44,  99, 108, 115, 200, 202, 238, 246, 259], dtype=int32),\n",
      "       array([ 11,  32,  63, 118, 134, 144, 150, 173, 197, 210, 220, 225, 227,\n",
      "              231, 239, 250, 258, 272, 301, 302], dtype=int32)                ],\n",
      "      dtype=object), 'counts': array([array([1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1]),\n",
      "       array([2, 2, 2, 2, 2]), array([1, 2, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([2, 2, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 4, 1, 2, 1, 1, 1, 4, 1, 1, 6, 1, 1, 1, 1, 3,\n",
      "              1, 1, 1, 1, 1, 1, 1, 1, 1, 1])                                   ,\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, 3, 3,\n",
      "              2, 1, 1, 3, 1, 1, 2, 5, 1, 1, 2, 1])                             ,\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2]), array([1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 2, 2, 2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 2]), array([2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n",
      "              1, 1])                                                           ,\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2]), array([1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([2, 1, 1, 1, 1]),\n",
      "       array([2, 2, 2, 2, 2, 1, 1]), array([1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 2, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1]), array([1, 1, 2]),\n",
      "       array([1, 1, 1, 1]), array([1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 2]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 2, 2]),\n",
      "       array([1, 1, 1, 1]), array([2, 2, 1, 1, 1, 2, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 2, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 4, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 2, 2]), array([1, 1, 1, 1, 2, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([2, 3, 2, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 2, 2, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 2, 2, 2, 1, 1]),\n",
      "       array([1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([2, 1, 1, 1]),\n",
      "       array([1, 1, 3, 1, 4, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([2, 2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2]),\n",
      "       array([2, 2, 2, 1, 1, 1]), array([3, 2, 2, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 2, 2, 2, 2, 2, 2]), array([1, 2, 1, 2, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 4, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([2, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 2, 2]), array([2, 2, 2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([2, 2, 2, 2, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([2, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 2, 2]), array([1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1]), array([2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n",
      "              1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1])     ,\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 2, 1, 1, 4]),\n",
      "       array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 2, 1, 1, 2, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([2, 2, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([2, 2, 2, 2, 2]),\n",
      "       array([2, 2, 2, 2, 2]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]), array([2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 2, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([2, 1, 1, 1, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 2, 1, 1, 1, 2]),\n",
      "       array([2, 3, 1, 2, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 2, 2, 2]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 2, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 2, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 2, 1, 2]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2]), array([1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 1, 2, 2, 2]),\n",
      "       array([2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([2, 2, 2, 2]),\n",
      "       array([2, 2, 2, 2, 2]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 2, 2, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 3, 1, 1, 1, 2, 2, 1]),\n",
      "       array([1, 1, 1, 1, 3, 1, 3, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([2, 2]),\n",
      "       array([1, 1, 2, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 2, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 2, 2, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 2, 1, 1, 1, 1, 1]), array([1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 2, 2]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 2, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 2, 1, 2, 1, 2, 1, 2]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([2, 2, 2, 2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1]), array([1, 2, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 2, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([2, 1, 1, 2]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1]), array([2, 2, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 2, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1]), array([1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1]), array([2, 2, 2, 2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1]), array([2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 2, 1, 2]), array([1, 2, 2, 1, 2, 2]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([2, 2, 2, 2, 2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([2, 1, 1]),\n",
      "       array([2, 1, 2, 2, 2, 2, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 2]), array([1, 2, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 2, 1, 2]),\n",
      "       array([2, 1, 1, 1, 1, 1]), array([1, 2, 2, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1, 1]), array([2, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n",
      "              1, 1])                                                           ,\n",
      "       array([1, 1, 1, 1, 1]), array([2, 2, 2, 2, 2]),\n",
      "       array([1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1]), array([2, 2]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2]),\n",
      "       array([1, 1, 1]), array([1, 3, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 2, 1, 1, 1, 1, 1]), array([2, 2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 3, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n",
      "              1, 1, 2, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 3, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 2, 1, 2, 1]), array([2, 2, 1, 2, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([2, 2, 2, 2, 2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 2, 2]),\n",
      "       array([1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
      "              2])                                                              ,\n",
      "       array([1, 2, 1]), array([2, 2, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([3, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1,\n",
      "              3, 1, 1, 1, 1, 1])                                               ,\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 2, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 2]), array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 2, 2]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 4, 1, 1, 1, 1, 1,\n",
      "              1, 1, 2, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 3])                 ,\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 2]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1]), array([2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 2, 2, 2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1]),\n",
      "       array([2, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([2, 2, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 2, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2]), array([2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 2, 1, 2, 1, 1, 2, 2, 1]), array([1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 2, 2, 2, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1]), array([2, 2, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2])],\n",
      "      dtype=object)}, 'test1': {'tokens': array([array([ 11, 197, 210, 272], dtype=int32),\n",
      "       array([ 92,  99, 176, 187, 197], dtype=int32),\n",
      "       array([ 99, 122, 202, 238], dtype=int32),\n",
      "       array([  2, 123, 145], dtype=int32),\n",
      "       array([ 42, 111, 149], dtype=int32),\n",
      "       array([ 99, 202, 254], dtype=int32),\n",
      "       array([  5,  52,  78, 210, 272], dtype=int32),\n",
      "       array([115, 118, 123], dtype=int32),\n",
      "       array([210, 269, 272, 314], dtype=int32),\n",
      "       array([104, 153, 288], dtype=int32), array([33], dtype=int32),\n",
      "       array([118, 123, 144, 304], dtype=int32),\n",
      "       array([144, 207, 246, 299], dtype=int32),\n",
      "       array([159, 245], dtype=int32), array([53], dtype=int32),\n",
      "       array([ 17,  39, 179, 214, 237, 268], dtype=int32),\n",
      "       array([ 11,  32, 191, 197, 202], dtype=int32),\n",
      "       array([ 62, 190, 210, 221, 272], dtype=int32),\n",
      "       array([118, 252, 309], dtype=int32),\n",
      "       array([ 80,  99, 202, 260], dtype=int32),\n",
      "       array([  6,  51,  55,  75,  86,  89,  93, 137, 146, 169, 194, 246, 253,\n",
      "              257, 269, 276], dtype=int32)                                    ,\n",
      "       array([  0, 123, 212, 308], dtype=int32),\n",
      "       array([ 44,  72,  88, 165, 173, 175, 181, 182, 192, 199, 210, 236, 239,\n",
      "              241, 269, 272, 301, 306, 312, 314], dtype=int32)                ,\n",
      "       array([ 15,  99, 202, 227, 304, 310], dtype=int32),\n",
      "       array([145, 170, 202, 225], dtype=int32),\n",
      "       array([ 37, 118, 123], dtype=int32),\n",
      "       array([210, 272], dtype=int32), array([111, 246], dtype=int32),\n",
      "       array([210], dtype=int32),\n",
      "       array([118, 123, 134, 250, 264], dtype=int32),\n",
      "       array([123, 144], dtype=int32),\n",
      "       array([ 99, 110, 122, 202], dtype=int32),\n",
      "       array([ 90, 102, 145, 202, 245], dtype=int32),\n",
      "       array([152, 248, 269], dtype=int32),\n",
      "       array([ 99, 136, 202], dtype=int32),\n",
      "       array([108, 128, 181], dtype=int32),\n",
      "       array([ 98, 155, 198, 247, 261, 284], dtype=int32),\n",
      "       array([ 40,  73,  95, 145, 160, 198, 202, 206, 221, 246, 294, 306],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([145, 202, 210, 225, 227, 272], dtype=int32),\n",
      "       array([ 22,  40,  82, 246, 269], dtype=int32),\n",
      "       array([210, 212, 272, 283, 301], dtype=int32),\n",
      "       array([230, 242, 246], dtype=int32),\n",
      "       array([ 99, 154, 202, 256, 299], dtype=int32),\n",
      "       array([ 99, 114, 202, 210, 258], dtype=int32),\n",
      "       array([ 11,  32,  34, 210, 272], dtype=int32),\n",
      "       array([ 11,  32, 162, 202], dtype=int32),\n",
      "       array([ 18,  27,  58,  99, 202, 252], dtype=int32),\n",
      "       array([167, 210, 225, 246, 272, 285], dtype=int32),\n",
      "       array([ 99, 246], dtype=int32),\n",
      "       array([ 34, 210, 272], dtype=int32),\n",
      "       array([ 52, 225, 283], dtype=int32),\n",
      "       array([ 54,  62, 145, 280], dtype=int32), array([99], dtype=int32),\n",
      "       array([ 52, 257], dtype=int32),\n",
      "       array([ 11,  32,  65, 220], dtype=int32),\n",
      "       array([ 54,  99, 102, 139, 145, 202], dtype=int32),\n",
      "       array([ 35,  75, 110, 217], dtype=int32),\n",
      "       array([ 69, 103, 131], dtype=int32),\n",
      "       array([ 30, 142, 148, 155], dtype=int32),\n",
      "       array([210, 269, 272, 314], dtype=int32),\n",
      "       array([ 25, 196, 246, 302], dtype=int32),\n",
      "       array([ 35,  86,  92,  99, 187, 202, 252], dtype=int32),\n",
      "       array([  6,  54,  62, 118, 210, 272], dtype=int32),\n",
      "       array([ 48,  77, 297], dtype=int32),\n",
      "       array([ 77, 106, 134], dtype=int32),\n",
      "       array([  8,  73,  80, 190, 210, 272], dtype=int32),\n",
      "       array([ 97, 137, 145, 235], dtype=int32),\n",
      "       array([ 62,  89,  97, 182, 205], dtype=int32),\n",
      "       array([ 29, 118, 123, 172, 225], dtype=int32),\n",
      "       array([ 99, 124, 145, 202, 293], dtype=int32),\n",
      "       array([246], dtype=int32),\n",
      "       array([ 36,  50, 210, 272, 289, 301], dtype=int32),\n",
      "       array([ 63, 210, 246, 269, 272], dtype=int32),\n",
      "       array([ 43, 158], dtype=int32), array([ 50, 123], dtype=int32),\n",
      "       array([112, 210, 272, 305], dtype=int32),\n",
      "       array([ 13, 210, 272], dtype=int32),\n",
      "       array([ 43, 158, 299], dtype=int32),\n",
      "       array([ 93, 148], dtype=int32),\n",
      "       array([ 78,  95, 180, 203, 250, 275], dtype=int32),\n",
      "       array([ 99, 202, 208, 221], dtype=int32),\n",
      "       array([ 11,  32,  45,  65,  98,  99, 154, 246], dtype=int32),\n",
      "       array([  3, 100, 182, 212, 221, 253], dtype=int32),\n",
      "       array([ 11, 144, 147, 173, 239, 258, 283, 301], dtype=int32),\n",
      "       array([ 99, 103, 202], dtype=int32),\n",
      "       array([123, 210, 272], dtype=int32),\n",
      "       array([211, 304], dtype=int32),\n",
      "       array([ 11,  32,  62, 145, 210, 225, 272], dtype=int32),\n",
      "       array([136, 149], dtype=int32), array([99], dtype=int32),\n",
      "       array([ 26,  78, 216, 231, 232, 299], dtype=int32),\n",
      "       array([43], dtype=int32), array([144, 225], dtype=int32),\n",
      "       array([ 31,  72, 136, 144, 210, 272, 313], dtype=int32),\n",
      "       array([ 99, 202, 225], dtype=int32),\n",
      "       array([123, 238], dtype=int32),\n",
      "       array([ 11,  32, 212, 299], dtype=int32),\n",
      "       array([ 33, 118, 194, 197, 255], dtype=int32),\n",
      "       array([226, 227, 252, 296], dtype=int32),\n",
      "       array([151, 179, 209, 226, 270, 288], dtype=int32),\n",
      "       array([ 25,  86,  99, 144, 185, 196, 202, 248, 301], dtype=int32),\n",
      "       array([ 11,  32, 197, 210, 272], dtype=int32),\n",
      "       array([145, 150, 210, 272], dtype=int32),\n",
      "       array([210, 246], dtype=int32),\n",
      "       array([ 46,  98, 141, 145, 202], dtype=int32),\n",
      "       array([  8, 246], dtype=int32),\n",
      "       array([118, 210, 236, 241], dtype=int32),\n",
      "       array([ 48, 153, 258, 294], dtype=int32),\n",
      "       array([ 56,  97, 123, 134, 136, 144, 145, 195, 204, 251, 256], dtype=int32),\n",
      "       array([  8,  12, 210, 272], dtype=int32),\n",
      "       array([ 40,  99, 176, 182, 202, 312], dtype=int32),\n",
      "       array([288], dtype=int32),\n",
      "       array([ 25,  93,  99, 118, 174, 182], dtype=int32),\n",
      "       array([ 11,  32, 207, 210, 229, 234, 272], dtype=int32),\n",
      "       array([231, 305], dtype=int32),\n",
      "       array([  5,  99, 145, 202], dtype=int32),\n",
      "       array([ 35,  86,  92,  99, 187, 197, 202], dtype=int32),\n",
      "       array([131, 139, 205, 255], dtype=int32),\n",
      "       array([  8,  97, 145, 233, 282], dtype=int32),\n",
      "       array([ 30,  99, 202, 209], dtype=int32),\n",
      "       array([ 75,  93, 123, 144, 146], dtype=int32),\n",
      "       array([ 49, 145, 168, 197, 202, 229, 252], dtype=int32),\n",
      "       array([107, 225, 289, 308], dtype=int32),\n",
      "       array([ 80, 108, 118, 157, 210, 272], dtype=int32),\n",
      "       array([150, 210, 264, 272], dtype=int32),\n",
      "       array([118, 210], dtype=int32),\n",
      "       array([ 63,  99, 144, 167, 269], dtype=int32),\n",
      "       array([ 99, 246, 277], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([ 58,  99, 172, 202, 275, 309], dtype=int32),\n",
      "       array([ 17, 109, 153, 184, 210, 272, 278], dtype=int32),\n",
      "       array([ 99, 149, 170, 202, 253], dtype=int32),\n",
      "       array([ 13,  82, 266, 299], dtype=int32),\n",
      "       array([ 75, 299], dtype=int32),\n",
      "       array([  0,  72, 298, 305], dtype=int32),\n",
      "       array([ 34,  94, 246], dtype=int32),\n",
      "       array([ 45,  80, 133, 288], dtype=int32),\n",
      "       array([ 43, 210, 225, 272], dtype=int32),\n",
      "       array([ 73,  98, 210, 245, 272], dtype=int32),\n",
      "       array([210], dtype=int32),\n",
      "       array([ 75,  80, 209, 246], dtype=int32),\n",
      "       array([101, 133, 155, 245, 248], dtype=int32),\n",
      "       array([190, 230, 246], dtype=int32),\n",
      "       array([246, 280], dtype=int32),\n",
      "       array([111, 149, 204, 249, 294], dtype=int32),\n",
      "       array([  3,   7,  81, 145, 173, 202, 212, 236, 238, 239, 301], dtype=int32),\n",
      "       array([143, 210, 238, 260], dtype=int32),\n",
      "       array([ 11,  45,  99, 202, 261, 315], dtype=int32),\n",
      "       array([  5,  10,  34, 192, 202, 210, 264, 272], dtype=int32),\n",
      "       array([ 17, 210, 269, 288, 289], dtype=int32),\n",
      "       array([116, 210, 272], dtype=int32),\n",
      "       array([176, 210, 272], dtype=int32),\n",
      "       array([  4,   8,  19,  70, 280], dtype=int32),\n",
      "       array([123, 185], dtype=int32),\n",
      "       array([ 52, 210, 225, 269, 272], dtype=int32),\n",
      "       array([ 45,  99, 202], dtype=int32),\n",
      "       array([145, 185, 202, 305, 314], dtype=int32),\n",
      "       array([80, 97], dtype=int32), array([123], dtype=int32),\n",
      "       array([ 10,  62,  97, 118], dtype=int32),\n",
      "       array([145, 202, 225], dtype=int32),\n",
      "       array([ 44, 210, 305], dtype=int32),\n",
      "       array([ 50, 141, 144, 146, 269, 283, 289], dtype=int32),\n",
      "       array([ 30, 134, 147, 210, 212], dtype=int32),\n",
      "       array([121, 270], dtype=int32),\n",
      "       array([  0, 112, 305], dtype=int32),\n",
      "       array([107, 210], dtype=int32),\n",
      "       array([210, 225, 272], dtype=int32),\n",
      "       array([231, 246, 282], dtype=int32),\n",
      "       array([123, 144, 221, 264], dtype=int32),\n",
      "       array([145, 202], dtype=int32),\n",
      "       array([ 11,  32, 160, 203, 232, 261, 294], dtype=int32),\n",
      "       array([ 99, 146, 202, 277], dtype=int32),\n",
      "       array([  3,  58,  90,  99, 252], dtype=int32),\n",
      "       array([ 34,  35,  73,  86, 210, 272], dtype=int32),\n",
      "       array([ 57,  69,  97, 100, 119, 267], dtype=int32),\n",
      "       array([ 36,  50,  99, 202, 286], dtype=int32),\n",
      "       array([ 43,  70, 210, 272], dtype=int32),\n",
      "       array([ 14, 176, 183, 210, 272, 308], dtype=int32),\n",
      "       array([123, 250, 258], dtype=int32),\n",
      "       array([ 92, 187, 198, 202, 210, 272], dtype=int32),\n",
      "       array([ 65, 123, 197, 220, 244], dtype=int32),\n",
      "       array([  5, 169, 210, 272], dtype=int32),\n",
      "       array([177, 270], dtype=int32), array([  8, 246], dtype=int32),\n",
      "       array([ 43, 104, 123, 147, 305], dtype=int32),\n",
      "       array([  5, 120, 145, 202], dtype=int32),\n",
      "       array([200, 210, 272, 277, 312], dtype=int32),\n",
      "       array([ 58, 145, 202, 291], dtype=int32),\n",
      "       array([ 22,  45,  93,  99, 148, 202, 217, 225, 303], dtype=int32),\n",
      "       array([144, 210, 212, 238, 241, 244], dtype=int32),\n",
      "       array([  5,  35,  86, 246, 269], dtype=int32),\n",
      "       array([ 11,  32,  82,  99, 202], dtype=int32),\n",
      "       array([225], dtype=int32), array([ 24, 210, 246], dtype=int32),\n",
      "       array([61, 73, 99], dtype=int32), array([ 99, 255], dtype=int32),\n",
      "       array([ 63, 210, 246, 269, 272], dtype=int32),\n",
      "       array([ 51,  52, 159, 210], dtype=int32),\n",
      "       array([ 24,  35,  86,  99, 202, 263, 295], dtype=int32),\n",
      "       array([7], dtype=int32), array([246], dtype=int32),\n",
      "       array([189, 210, 254, 272], dtype=int32),\n",
      "       array([ 32, 123, 185, 192], dtype=int32),\n",
      "       array([ 99, 202, 210, 304], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([210, 246, 269], dtype=int32),\n",
      "       array([ 31, 210, 314], dtype=int32),\n",
      "       array([114, 281], dtype=int32),\n",
      "       array([ 21, 138, 256, 306], dtype=int32),\n",
      "       array([132, 176, 219, 240, 248, 269], dtype=int32),\n",
      "       array([110, 120, 159, 210, 246, 272], dtype=int32),\n",
      "       array([118, 258], dtype=int32),\n",
      "       array([ 11, 210, 272], dtype=int32),\n",
      "       array([117, 134, 163], dtype=int32),\n",
      "       array([11, 34, 45], dtype=int32),\n",
      "       array([ 99, 152, 202, 276], dtype=int32),\n",
      "       array([ 99, 155, 202], dtype=int32),\n",
      "       array([ 63, 210, 246, 269, 272], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([  5,  35,  86, 246, 269], dtype=int32),\n",
      "       array([123, 238], dtype=int32),\n",
      "       array([ 11,  32, 146, 289, 299], dtype=int32),\n",
      "       array([ 13,  56,  72,  82, 133, 134, 165, 173, 175, 196, 210, 226, 229,\n",
      "              239, 246, 258, 264, 268, 269, 272, 283, 292, 301], dtype=int32) ,\n",
      "       array([210, 221], dtype=int32),\n",
      "       array([ 14, 129, 192, 210, 241, 314], dtype=int32),\n",
      "       array([111, 256], dtype=int32),\n",
      "       array([ 99, 158, 202, 210, 246, 272], dtype=int32),\n",
      "       array([ 53,  99, 125, 174, 202, 232, 254, 269, 275], dtype=int32),\n",
      "       array([116, 155, 210, 272], dtype=int32),\n",
      "       array([ 13, 210, 215, 272], dtype=int32),\n",
      "       array([ 32, 115, 134, 210, 272], dtype=int32),\n",
      "       array([ 99, 204, 299], dtype=int32),\n",
      "       array([ 63, 113, 138, 144, 167, 210, 272, 301], dtype=int32),\n",
      "       array([ 89, 106, 193], dtype=int32),\n",
      "       array([ 11,  67,  78, 118, 137, 140, 185, 210, 264, 272], dtype=int32),\n",
      "       array([ 43,  70, 122, 225], dtype=int32),\n",
      "       array([ 62,  89,  97, 182, 205], dtype=int32),\n",
      "       array([ 99, 195, 210, 241, 265, 272], dtype=int32),\n",
      "       array([  4, 176, 189, 210, 251, 272], dtype=int32),\n",
      "       array([ 99, 197], dtype=int32),\n",
      "       array([ 30,  99, 202, 299], dtype=int32),\n",
      "       array([ 41, 113, 160, 197, 202, 203, 231, 256, 299], dtype=int32),\n",
      "       array([  6,  29,  98, 119, 210, 272], dtype=int32),\n",
      "       array([ 17,  57, 100, 134], dtype=int32),\n",
      "       array([246, 258], dtype=int32), array([246, 264], dtype=int32),\n",
      "       array([112, 210, 224, 272, 305], dtype=int32),\n",
      "       array([ 54,  62, 145, 149, 202], dtype=int32),\n",
      "       array([123, 158, 289], dtype=int32),\n",
      "       array([ 53, 118, 188, 229, 255, 287], dtype=int32),\n",
      "       array([210], dtype=int32), array([ 70, 246, 276], dtype=int32),\n",
      "       array([ 34,  35,  86, 210, 272], dtype=int32),\n",
      "       array([144, 145, 208, 222], dtype=int32),\n",
      "       array([ 56,  58,  99, 197, 202], dtype=int32),\n",
      "       array([150, 190], dtype=int32), array([123, 214], dtype=int32),\n",
      "       array([ 54, 118, 123, 144, 191, 305, 307], dtype=int32),\n",
      "       array([  5,  11,  32, 198, 242], dtype=int32),\n",
      "       array([ 38,  97, 120, 144, 145, 269, 278], dtype=int32),\n",
      "       array([ 36,  50,  99, 202, 225], dtype=int32),\n",
      "       array([ 42,  45,  79,  99, 202, 253], dtype=int32),\n",
      "       array([ 14, 231], dtype=int32),\n",
      "       array([ 11, 123, 180, 215, 250], dtype=int32),\n",
      "       array([ 63,  99, 144, 175, 202], dtype=int32),\n",
      "       array([  5,  35,  86, 246, 269], dtype=int32),\n",
      "       array([ 53, 188, 197, 210], dtype=int32),\n",
      "       array([  7,  34,  88, 144, 201, 210, 227, 241], dtype=int32),\n",
      "       array([152, 264], dtype=int32),\n",
      "       array([  6, 163, 174, 277], dtype=int32),\n",
      "       array([ 10,  65, 225], dtype=int32),\n",
      "       array([ 36,  72, 128, 136, 144, 158, 210, 272], dtype=int32),\n",
      "       array([ 55,  65, 180, 210, 272], dtype=int32),\n",
      "       array([ 63, 118, 210, 272], dtype=int32),\n",
      "       array([ 37,  99, 104, 162, 202, 232], dtype=int32),\n",
      "       array([116, 149, 210, 272], dtype=int32),\n",
      "       array([ 19, 145, 295], dtype=int32),\n",
      "       array([ 18,  76, 155, 210, 236, 241, 249, 258], dtype=int32),\n",
      "       array([ 53, 127, 173, 176, 239, 276, 301], dtype=int32),\n",
      "       array([ 99, 136, 190, 194, 202, 225], dtype=int32),\n",
      "       array([ 40,  99, 176, 184, 202, 258, 281], dtype=int32),\n",
      "       array([ 13,  69, 138, 190], dtype=int32),\n",
      "       array([176, 299], dtype=int32),\n",
      "       array([246, 252, 255], dtype=int32),\n",
      "       array([ 48, 199, 243, 277], dtype=int32),\n",
      "       array([ 11,  75, 203, 246, 299], dtype=int32),\n",
      "       array([ 11,  32,  99, 110, 200, 202, 237], dtype=int32),\n",
      "       array([246, 300], dtype=int32),\n",
      "       array([ 13,  77, 210, 240, 272], dtype=int32),\n",
      "       array([ 31,  72, 162, 210, 272, 273], dtype=int32),\n",
      "       array([202, 275], dtype=int32),\n",
      "       array([ 10,  65, 210], dtype=int32),\n",
      "       array([ 82,  99, 176, 197, 202, 236], dtype=int32),\n",
      "       array([ 54,  62, 145, 149, 202], dtype=int32),\n",
      "       array([136, 210, 272], dtype=int32),\n",
      "       array([  0, 123, 258], dtype=int32),\n",
      "       array([ 11,  32, 197, 210, 272], dtype=int32),\n",
      "       array([  3,  24, 137, 210, 264, 272], dtype=int32),\n",
      "       array([ 45, 145, 185, 202], dtype=int32),\n",
      "       array([ 10, 202, 227], dtype=int32),\n",
      "       array([ 43,  80, 148], dtype=int32),\n",
      "       array([ 35,  86,  92,  99, 187, 197, 202, 218], dtype=int32),\n",
      "       array([ 69,  86,  89, 210, 272], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([ 11, 123, 180, 215, 250], dtype=int32),\n",
      "       array([ 11,  89, 210, 272], dtype=int32),\n",
      "       array([ 80, 209, 210, 272], dtype=int32),\n",
      "       array([ 43, 210, 246, 272], dtype=int32),\n",
      "       array([ 99, 246], dtype=int32), array([162, 303], dtype=int32),\n",
      "       array([99], dtype=int32),\n",
      "       array([ 11,  32, 144, 182, 276], dtype=int32),\n",
      "       array([ 97, 145, 192], dtype=int32),\n",
      "       array([210, 225, 227], dtype=int32),\n",
      "       array([142, 157, 256], dtype=int32),\n",
      "       array([124, 210, 241, 245], dtype=int32),\n",
      "       array([ 11,  32,  43,  45, 158, 246], dtype=int32),\n",
      "       array([ 99, 205, 246], dtype=int32),\n",
      "       array([ 99, 186, 202, 232], dtype=int32),\n",
      "       array([210, 213, 233, 272, 282, 308], dtype=int32),\n",
      "       array([ 47, 111, 242, 275], dtype=int32),\n",
      "       array([111, 149, 192, 306], dtype=int32),\n",
      "       array([ 18,  45, 145, 154, 176, 177, 199, 202, 225, 246, 294], dtype=int32),\n",
      "       array([ 65, 210, 225, 272], dtype=int32),\n",
      "       array([246, 312], dtype=int32),\n",
      "       array([ 56, 236, 246], dtype=int32),\n",
      "       array([  3,  58,  90,  99, 252], dtype=int32),\n",
      "       array([ 11,  75, 210, 272, 299, 313], dtype=int32),\n",
      "       array([ 11,  32,  75, 210, 229, 272], dtype=int32),\n",
      "       array([ 38,  54,  62, 145, 202, 280], dtype=int32),\n",
      "       array([ 10, 192, 225, 310], dtype=int32),\n",
      "       array([ 26,  75, 136, 217, 285, 298, 299], dtype=int32),\n",
      "       array([181, 246], dtype=int32),\n",
      "       array([ 99, 188, 202, 208], dtype=int32),\n",
      "       array([ 44, 246], dtype=int32),\n",
      "       array([ 76,  99, 202, 209], dtype=int32),\n",
      "       array([  5, 210], dtype=int32), array([210, 272], dtype=int32),\n",
      "       array([  7,  63, 210, 272], dtype=int32),\n",
      "       array([111, 149], dtype=int32),\n",
      "       array([  6,  54,  62, 118, 210, 272], dtype=int32),\n",
      "       array([ 69,  86, 189, 277], dtype=int32),\n",
      "       array([ 33, 311], dtype=int32),\n",
      "       array([ 31,  73, 123, 299], dtype=int32),\n",
      "       array([210, 246], dtype=int32),\n",
      "       array([110, 189, 312], dtype=int32),\n",
      "       array([ 99, 202, 252], dtype=int32),\n",
      "       array([102, 144, 246], dtype=int32),\n",
      "       array([ 11,  54,  99, 202], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([137, 210, 272], dtype=int32),\n",
      "       array([118, 281], dtype=int32), array([145], dtype=int32),\n",
      "       array([210], dtype=int32),\n",
      "       array([ 35,  92, 187, 205], dtype=int32),\n",
      "       array([ 35,  86, 118, 246, 269], dtype=int32),\n",
      "       array([156, 225, 305], dtype=int32),\n",
      "       array([  7,  39,  55, 152, 269], dtype=int32),\n",
      "       array([ 75,  99, 210, 241, 272, 299, 313], dtype=int32),\n",
      "       array([ 43,  70, 221], dtype=int32),\n",
      "       array([ 13,  31,  44,  82, 200, 206, 210, 272], dtype=int32),\n",
      "       array([  4, 145, 190, 197, 202], dtype=int32),\n",
      "       array([ 10,  53,  72,  97, 188, 209, 258], dtype=int32),\n",
      "       array([ 28,  63,  82, 144, 210, 272, 301], dtype=int32),\n",
      "       array([225, 258, 292], dtype=int32),\n",
      "       array([ 99, 152, 202, 276], dtype=int32),\n",
      "       array([200, 210, 272, 277, 312], dtype=int32),\n",
      "       array([ 11, 107, 242, 299], dtype=int32),\n",
      "       array([143, 144, 299], dtype=int32),\n",
      "       array([ 41, 144, 210, 299], dtype=int32), array([23], dtype=int32),\n",
      "       array([ 99, 113, 174, 175, 202, 221], dtype=int32),\n",
      "       array([ 53, 246], dtype=int32),\n",
      "       array([ 52,  73,  80, 202, 257], dtype=int32),\n",
      "       array([ 11,  32,  36, 113, 128, 143, 180, 197, 210, 220, 247, 269, 272],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([18], dtype=int32), array([145, 202, 298], dtype=int32),\n",
      "       array([ 11,  32, 252, 299], dtype=int32),\n",
      "       array([210, 272], dtype=int32), array([210, 272], dtype=int32),\n",
      "       array([210, 246, 269, 272], dtype=int32),\n",
      "       array([210, 246, 272], dtype=int32),\n",
      "       array([118, 133, 156, 158], dtype=int32),\n",
      "       array([ 11,  32, 149], dtype=int32),\n",
      "       array([ 60, 120, 148, 210, 241], dtype=int32),\n",
      "       array([ 63, 103, 175, 178, 196], dtype=int32),\n",
      "       array([ 62,  89,  97, 182, 205], dtype=int32),\n",
      "       array([ 99, 174, 202, 210, 272], dtype=int32),\n",
      "       array([104, 210, 272], dtype=int32),\n",
      "       array([123, 185, 204, 212, 270], dtype=int32),\n",
      "       array([ 49, 115, 194, 198, 210, 235, 264, 272], dtype=int32),\n",
      "       array([ 35,  86, 118, 246, 269], dtype=int32),\n",
      "       array([210], dtype=int32), array([ 99, 202, 210], dtype=int32),\n",
      "       array([ 61, 134, 144, 154], dtype=int32),\n",
      "       array([ 34,  44, 210], dtype=int32),\n",
      "       array([ 38, 145, 202, 246, 312], dtype=int32),\n",
      "       array([111, 149, 207], dtype=int32),\n",
      "       array([118, 145, 269, 308], dtype=int32),\n",
      "       array([ 11,  65,  99, 176, 190, 202], dtype=int32),\n",
      "       array([ 75, 118, 123, 144, 146], dtype=int32),\n",
      "       array([100, 258, 281], dtype=int32),\n",
      "       array([ 48, 143, 210, 227, 241], dtype=int32),\n",
      "       array([210, 264], dtype=int32),\n",
      "       array([ 34, 210, 272], dtype=int32),\n",
      "       array([ 99, 123, 129, 148, 158, 303], dtype=int32),\n",
      "       array([ 69, 145, 189, 212, 233, 277], dtype=int32),\n",
      "       array([ 73, 252, 269], dtype=int32),\n",
      "       array([ 80, 132, 133, 260, 276], dtype=int32),\n",
      "       array([114, 143, 146, 256], dtype=int32),\n",
      "       array([145, 202, 208], dtype=int32),\n",
      "       array([ 31,  89, 215], dtype=int32),\n",
      "       array([145, 155, 295, 305], dtype=int32),\n",
      "       array([ 90, 268], dtype=int32),\n",
      "       array([ 27,  34,  75,  97, 116, 120, 145, 202, 246, 293], dtype=int32),\n",
      "       array([ 34,  82, 117, 210, 272], dtype=int32),\n",
      "       array([190, 230, 246], dtype=int32),\n",
      "       array([ 38,  68,  82, 124], dtype=int32),\n",
      "       array([ 13, 185], dtype=int32),\n",
      "       array([ 14, 210, 272], dtype=int32),\n",
      "       array([  2,  87, 103, 139], dtype=int32),\n",
      "       array([ 27, 118, 287], dtype=int32),\n",
      "       array([ 11,  32, 207, 231], dtype=int32),\n",
      "       array([145, 226, 246], dtype=int32),\n",
      "       array([ 11,  99, 202, 299], dtype=int32),\n",
      "       array([  3,  17, 144], dtype=int32),\n",
      "       array([210, 311], dtype=int32),\n",
      "       array([ 69,  80, 130, 133, 158, 260], dtype=int32),\n",
      "       array([ 35,  86,  92,  99, 202, 228], dtype=int32),\n",
      "       array([ 81, 162, 190, 281], dtype=int32),\n",
      "       array([ 15, 139, 210, 272, 299], dtype=int32),\n",
      "       array([ 99, 246], dtype=int32),\n",
      "       array([ 99, 210, 214, 228, 272], dtype=int32),\n",
      "       array([ 25,  63,  69, 194, 196, 210, 272], dtype=int32),\n",
      "       array([ 43,  99, 111, 145, 202, 290], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([ 76,  99, 202, 209], dtype=int32),\n",
      "       array([ 75,  80, 125, 213, 260], dtype=int32),\n",
      "       array([  7,  30, 139, 210, 272, 300], dtype=int32),\n",
      "       array([ 58,  99, 172, 202, 275, 309], dtype=int32),\n",
      "       array([246, 264], dtype=int32),\n",
      "       array([ 65, 123, 129, 158, 206], dtype=int32),\n",
      "       array([139, 168, 246, 277], dtype=int32),\n",
      "       array([ 34, 193, 210, 222, 254, 272], dtype=int32),\n",
      "       array([ 35,  86, 118, 246, 269], dtype=int32),\n",
      "       array([135, 210, 272], dtype=int32),\n",
      "       array([ 11,  32, 123, 193, 201], dtype=int32),\n",
      "       array([ 89, 169, 211, 282], dtype=int32),\n",
      "       array([136], dtype=int32), array([210, 272, 299], dtype=int32),\n",
      "       array([271, 299], dtype=int32), array([123], dtype=int32),\n",
      "       array([ 11, 145, 150, 202], dtype=int32),\n",
      "       array([ 73,  82, 210, 272], dtype=int32),\n",
      "       array([ 17,  20,  77, 173, 218, 225], dtype=int32),\n",
      "       array([ 67, 123, 246], dtype=int32),\n",
      "       array([ 78,  80, 203, 260, 299], dtype=int32),\n",
      "       array([ 73, 210, 252, 264], dtype=int32),\n",
      "       array([ 43,  99, 202, 294, 299], dtype=int32),\n",
      "       array([ 46, 123, 152, 227, 231], dtype=int32),\n",
      "       array([ 99, 104, 147, 315], dtype=int32),\n",
      "       array([123, 156, 197, 220, 225], dtype=int32),\n",
      "       array([ 68, 123, 188, 242], dtype=int32),\n",
      "       array([ 25,  63, 145, 151, 202, 270], dtype=int32),\n",
      "       array([ 12,  28,  65, 126, 225, 303], dtype=int32),\n",
      "       array([ 64, 111, 207, 298], dtype=int32),\n",
      "       array([100, 210, 272], dtype=int32),\n",
      "       array([  5,  35,  86, 246, 269], dtype=int32),\n",
      "       array([31, 82], dtype=int32),\n",
      "       array([143, 207, 231, 242, 258, 299], dtype=int32),\n",
      "       array([ 99, 174], dtype=int32),\n",
      "       array([ 42, 105, 123, 129, 204, 210, 272], dtype=int32),\n",
      "       array([ 99, 256, 299], dtype=int32),\n",
      "       array([ 18,  82, 151, 180, 210, 272, 302], dtype=int32),\n",
      "       array([ 99, 202, 264], dtype=int32),\n",
      "       array([ 11,  99, 202, 254], dtype=int32),\n",
      "       array([ 35,  86,  92,  99, 189, 202], dtype=int32),\n",
      "       array([173, 210, 239, 272, 301], dtype=int32),\n",
      "       array([ 32,  99, 162, 202, 269], dtype=int32),\n",
      "       array([167, 210, 272, 285], dtype=int32),\n",
      "       array([ 99, 122, 142, 150, 202], dtype=int32),\n",
      "       array([ 11,  19,  32,  69, 210, 229], dtype=int32),\n",
      "       array([ 56, 137, 197, 210, 264, 272], dtype=int32),\n",
      "       array([233, 246, 300], dtype=int32),\n",
      "       array([ 80, 111, 113, 203, 210, 260, 272], dtype=int32),\n",
      "       array([116, 155, 210, 272], dtype=int32),\n",
      "       array([ 99, 118, 202], dtype=int32),\n",
      "       array([ 98,  99, 128, 136, 202, 236, 247, 265, 269], dtype=int32),\n",
      "       array([ 78, 199], dtype=int32), array([123, 204], dtype=int32),\n",
      "       array([ 56,  63, 139, 191, 210, 300], dtype=int32),\n",
      "       array([ 11,  32,  35,  86, 117, 146], dtype=int32),\n",
      "       array([ 11,  54,  80, 197, 210, 213, 260, 272], dtype=int32),\n",
      "       array([ 34,  39, 210, 272, 295, 301], dtype=int32),\n",
      "       array([146, 210, 272], dtype=int32),\n",
      "       array([ 69, 246, 264], dtype=int32),\n",
      "       array([144, 277, 278], dtype=int32),\n",
      "       array([ 13,  43, 202, 210, 272], dtype=int32),\n",
      "       array([ 11,  32,  78, 223, 242], dtype=int32),\n",
      "       array([210, 215, 272], dtype=int32),\n",
      "       array([122, 176, 219, 220], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([133, 233, 252, 282], dtype=int32),\n",
      "       array([ 43, 198, 202], dtype=int32),\n",
      "       array([ 17,  32,  45, 104, 162, 200, 210, 212, 246, 272, 278], dtype=int32),\n",
      "       array([145, 153, 155], dtype=int32),\n",
      "       array([ 34,  55,  69, 145], dtype=int32),\n",
      "       array([104, 123, 311], dtype=int32),\n",
      "       array([ 17,  92,  99, 125, 187, 202], dtype=int32),\n",
      "       array([ 15, 145, 202, 302], dtype=int32),\n",
      "       array([102, 210, 272], dtype=int32),\n",
      "       array([ 43, 202, 303], dtype=int32),\n",
      "       array([155, 210, 246, 264, 269, 272], dtype=int32),\n",
      "       array([ 77, 303], dtype=int32),\n",
      "       array([103, 123, 128, 136, 144, 286], dtype=int32),\n",
      "       array([ 74,  79, 133, 135, 277, 302], dtype=int32),\n",
      "       array([111, 149, 207, 311], dtype=int32),\n",
      "       array([104, 157, 210, 269, 272, 311], dtype=int32),\n",
      "       array([ 89, 123, 144, 221, 304], dtype=int32),\n",
      "       array([ 64, 112, 210, 219, 305], dtype=int32),\n",
      "       array([123, 238], dtype=int32), array([99], dtype=int32),\n",
      "       array([ 36,  99, 246], dtype=int32),\n",
      "       array([ 99, 186], dtype=int32),\n",
      "       array([ 11,  32,  53, 144, 176, 181, 210, 212, 269, 270, 272, 273],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([145, 247], dtype=int32),\n",
      "       array([149, 150, 210, 227, 272], dtype=int32),\n",
      "       array([ 18,  26,  49,  72, 133, 134, 210, 225, 272], dtype=int32),\n",
      "       array([ 17, 180, 210, 283], dtype=int32),\n",
      "       array([210, 272], dtype=int32), array([123], dtype=int32),\n",
      "       array([157, 210, 272], dtype=int32),\n",
      "       array([ 21,  60, 120, 270], dtype=int32),\n",
      "       array([ 11,  79, 220, 303], dtype=int32),\n",
      "       array([147, 189], dtype=int32),\n",
      "       array([ 57,  82, 123, 163, 170, 246, 275, 310], dtype=int32),\n",
      "       array([ 92,  99, 118, 187, 202], dtype=int32),\n",
      "       array([ 27,  88,  99, 202, 206, 210, 246, 253, 272, 275], dtype=int32),\n",
      "       array([ 34,  43,  81, 202, 311], dtype=int32),\n",
      "       array([ 11,  63, 134, 144, 173, 197, 210, 239, 272, 301, 302], dtype=int32),\n",
      "       array([99], dtype=int32),\n",
      "       array([ 38, 123, 158, 206, 238], dtype=int32),\n",
      "       array([ 60,  63,  95,  99, 202, 225, 230], dtype=int32),\n",
      "       array([ 15,  96, 123], dtype=int32),\n",
      "       array([210, 230, 272], dtype=int32),\n",
      "       array([ 11,  41, 210, 299], dtype=int32),\n",
      "       array([  3,  58,  90,  99, 252], dtype=int32),\n",
      "       array([ 38,  68,  82, 124], dtype=int32),\n",
      "       array([210, 225, 227, 272], dtype=int32),\n",
      "       array([ 29, 269, 288], dtype=int32),\n",
      "       array([ 11,  32, 146, 170, 299], dtype=int32),\n",
      "       array([ 11, 123, 180, 215, 250], dtype=int32),\n",
      "       array([ 11,  21,  32,  37,  39,  54,  69,  78,  82,  97, 103, 122, 169,\n",
      "              217, 224, 236, 246, 258, 266, 270, 273, 284, 289, 292, 299, 304],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 11, 111, 145, 150, 202], dtype=int32),\n",
      "       array([ 36, 128, 144, 210, 217, 225, 241, 256, 299], dtype=int32),\n",
      "       array([ 93, 118, 144], dtype=int32),\n",
      "       array([ 13,  42,  99, 202, 314], dtype=int32),\n",
      "       array([ 65, 175, 210, 272, 287], dtype=int32),\n",
      "       array([ 99, 111, 167, 174, 202], dtype=int32),\n",
      "       array([ 99, 111, 167, 174, 202], dtype=int32),\n",
      "       array([ 11,  32,  58, 202, 208, 246, 261, 270, 289], dtype=int32),\n",
      "       array([210], dtype=int32),\n",
      "       array([ 69,  99, 190, 227, 258, 264], dtype=int32),\n",
      "       array([134, 221, 236], dtype=int32),\n",
      "       array([ 80,  99, 174, 202, 210, 260, 272], dtype=int32),\n",
      "       array([233, 246, 300], dtype=int32),\n",
      "       array([ 43,  99, 202], dtype=int32),\n",
      "       array([ 10,  12,  66,  86,  89,  90, 126, 252], dtype=int32),\n",
      "       array([141, 210, 222, 267, 272], dtype=int32),\n",
      "       array([ 11,  78,  99, 202, 227, 257], dtype=int32),\n",
      "       array([  0,  56,  57, 106, 126, 139, 276, 313], dtype=int32),\n",
      "       array([ 49, 210, 272], dtype=int32),\n",
      "       array([ 11,  32,  60, 210, 236, 247, 269, 272], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([  1,  61,  70,  82, 139, 145, 158, 217, 240, 246, 258, 278, 294],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([210, 245], dtype=int32),\n",
      "       array([ 45, 126, 145, 202, 227], dtype=int32),\n",
      "       array([210, 272, 282], dtype=int32),\n",
      "       array([ 31,  49,  72, 138, 148, 264], dtype=int32),\n",
      "       array([204, 210], dtype=int32),\n",
      "       array([109, 118, 123, 144, 190], dtype=int32),\n",
      "       array([ 18,  93, 115, 190, 225], dtype=int32),\n",
      "       array([  8,  82,  89, 193], dtype=int32),\n",
      "       array([ 11,  27,  32,  44,  63,  79, 140, 166, 175, 196, 200, 246, 263,\n",
      "              302, 310], dtype=int32)                                         ,\n",
      "       array([ 14,  42,  99, 202, 220], dtype=int32),\n",
      "       array([ 32, 134, 246, 249], dtype=int32),\n",
      "       array([246], dtype=int32), array([232, 246], dtype=int32),\n",
      "       array([150, 151, 210, 217, 272], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([  5, 111, 149, 224, 256, 312], dtype=int32),\n",
      "       array([ 11,  32, 252, 312], dtype=int32),\n",
      "       array([210, 272, 299], dtype=int32),\n",
      "       array([ 61,  99, 167, 202, 225, 285], dtype=int32),\n",
      "       array([150, 210], dtype=int32),\n",
      "       array([ 42,  45,  79,  99, 202, 253], dtype=int32),\n",
      "       array([210, 220, 272], dtype=int32),\n",
      "       array([ 32, 246], dtype=int32),\n",
      "       array([ 47, 190, 245, 264], dtype=int32),\n",
      "       array([ 75, 115, 210, 235, 272], dtype=int32),\n",
      "       array([  5,  11,  32,  34,  37,  40,  44,  62,  78,  85, 111, 145, 153,\n",
      "              188, 221, 223, 225, 233, 246, 251, 259, 294, 298, 303], dtype=int32),\n",
      "       array([212, 231, 281, 297], dtype=int32),\n",
      "       array([ 59, 225, 236], dtype=int32),\n",
      "       array([  5,  35,  86, 246, 269], dtype=int32),\n",
      "       array([ 93, 300], dtype=int32), array([210, 272], dtype=int32),\n",
      "       array([ 17,  34, 134, 284], dtype=int32),\n",
      "       array([ 10,  26, 150], dtype=int32),\n",
      "       array([  0, 123, 258], dtype=int32),\n",
      "       array([ 25, 123, 139, 220, 254], dtype=int32),\n",
      "       array([115, 210, 269, 272], dtype=int32),\n",
      "       array([117, 210, 272], dtype=int32),\n",
      "       array([128, 158, 167, 189, 210, 212, 238, 258, 272], dtype=int32),\n",
      "       array([11, 32], dtype=int32), array([ 15, 104, 232], dtype=int32),\n",
      "       array([  5,  35,  86, 246, 269], dtype=int32),\n",
      "       array([ 99, 187, 202], dtype=int32),\n",
      "       array([ 45, 111, 145, 149, 269, 300], dtype=int32),\n",
      "       array([ 83, 105, 115, 181], dtype=int32),\n",
      "       array([210, 272, 312], dtype=int32),\n",
      "       array([ 99, 130, 185, 186, 202, 256], dtype=int32),\n",
      "       array([ 99, 110, 112, 156, 210, 272], dtype=int32),\n",
      "       array([ 34, 107, 190, 246], dtype=int32),\n",
      "       array([ 68,  78, 122, 211, 226, 246, 269, 278, 296, 313], dtype=int32),\n",
      "       array([210, 241], dtype=int32),\n",
      "       array([210, 272, 305], dtype=int32),\n",
      "       array([133, 147, 189, 210, 245, 272], dtype=int32),\n",
      "       array([ 11,  32, 162, 246, 297], dtype=int32),\n",
      "       array([ 49,  83, 190, 246], dtype=int32),\n",
      "       array([  7,  99, 202, 225, 231], dtype=int32),\n",
      "       array([ 99, 294], dtype=int32), array([ 99, 202], dtype=int32),\n",
      "       array([ 19, 145, 295], dtype=int32),\n",
      "       array([123, 158, 179], dtype=int32),\n",
      "       array([  8, 145, 210, 269, 272], dtype=int32),\n",
      "       array([ 49, 115, 137, 138, 194], dtype=int32),\n",
      "       array([  4,  24,  27,  83, 150, 167, 192, 220, 248, 271], dtype=int32),\n",
      "       array([142, 231], dtype=int32),\n",
      "       array([ 50, 225, 275, 286], dtype=int32),\n",
      "       array([ 44, 145, 202, 295], dtype=int32),\n",
      "       array([104, 111, 201, 206, 237, 266, 269, 307, 311], dtype=int32),\n",
      "       array([ 99, 111, 136, 202, 204, 216, 285, 299], dtype=int32),\n",
      "       array([  2,  56,  90,  93, 236], dtype=int32),\n",
      "       array([210, 220, 272], dtype=int32),\n",
      "       array([ 80, 101, 260], dtype=int32),\n",
      "       array([ 13,  99, 202], dtype=int32),\n",
      "       array([ 34,  65, 107, 210, 272], dtype=int32),\n",
      "       array([ 99, 150, 202], dtype=int32),\n",
      "       array([ 99, 158, 197, 202], dtype=int32),\n",
      "       array([133, 210, 225], dtype=int32),\n",
      "       array([ 34,  35,  63,  72,  86, 165, 210, 264, 272, 311], dtype=int32),\n",
      "       array([144, 156, 180], dtype=int32),\n",
      "       array([ 99, 106, 202, 210, 262, 272, 313], dtype=int32),\n",
      "       array([  1, 198, 231, 299], dtype=int32),\n",
      "       array([ 69,  97, 231], dtype=int32),\n",
      "       array([184, 233], dtype=int32),\n",
      "       array([145, 202, 246], dtype=int32),\n",
      "       array([ 18,  27, 246, 252], dtype=int32),\n",
      "       array([ 99, 186, 202], dtype=int32),\n",
      "       array([  8, 145, 210, 269, 272], dtype=int32),\n",
      "       array([ 11,  32,  45,  82,  99, 202, 217], dtype=int32),\n",
      "       array([ 35,  51,  86,  92,  99, 187, 202, 252], dtype=int32),\n",
      "       array([  4,  73, 202, 294], dtype=int32),\n",
      "       array([ 31, 246], dtype=int32),\n",
      "       array([ 48, 116, 210, 254, 272, 312], dtype=int32),\n",
      "       array([210, 220, 272], dtype=int32),\n",
      "       array([ 31,  82, 112, 299, 305], dtype=int32),\n",
      "       array([ 78, 113, 123], dtype=int32),\n",
      "       array([ 97, 110, 210, 230, 238, 272], dtype=int32),\n",
      "       array([ 62, 280], dtype=int32),\n",
      "       array([ 19,  43, 198, 207, 210, 217, 272], dtype=int32),\n",
      "       array([136, 145, 207, 210, 256, 272, 298, 299], dtype=int32),\n",
      "       array([124, 176], dtype=int32),\n",
      "       array([ 52,  99, 150, 176, 202], dtype=int32),\n",
      "       array([123, 269], dtype=int32),\n",
      "       array([179, 210, 220, 272], dtype=int32),\n",
      "       array([305, 310], dtype=int32),\n",
      "       array([ 78, 113, 161, 210, 272, 279], dtype=int32),\n",
      "       array([104, 123, 246], dtype=int32),\n",
      "       array([ 10,  93,  97, 190, 289, 291], dtype=int32),\n",
      "       array([ 63, 210, 246, 269, 272], dtype=int32),\n",
      "       array([ 43,  99, 123, 158, 202, 217], dtype=int32),\n",
      "       array([ 99, 204, 236], dtype=int32),\n",
      "       array([ 11,  67,  78, 118, 137, 140, 185, 210, 264, 272], dtype=int32),\n",
      "       array([ 11,  32, 197, 210, 237, 272], dtype=int32),\n",
      "       array([ 34,  48, 183], dtype=int32),\n",
      "       array([ 51, 150], dtype=int32),\n",
      "       array([111, 178, 180], dtype=int32),\n",
      "       array([ 57,  69,  97, 100, 119, 214, 267], dtype=int32),\n",
      "       array([ 50, 133, 136, 210, 272, 285], dtype=int32),\n",
      "       array([ 69,  93, 197, 210, 272], dtype=int32),\n",
      "       array([ 31,  82, 112, 299, 305], dtype=int32),\n",
      "       array([ 45, 154, 210, 272], dtype=int32),\n",
      "       array([144, 236, 284], dtype=int32),\n",
      "       array([246, 293], dtype=int32),\n",
      "       array([ 99, 108, 202, 246, 259], dtype=int32),\n",
      "       array([ 11,  63, 134, 144, 173, 197, 210, 239, 272, 301, 302], dtype=int32)],\n",
      "      dtype=object), 'counts': array([array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1]),\n",
      "       array([1, 1, 1, 1, 1, 2]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 4, 1, 1, 1, 2, 4, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]),\n",
      "       array([3, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1]), array([1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1]), array([2, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 2, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1]), array([1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1]), array([2, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([2, 2, 1, 1]), array([1, 2, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([2, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 2, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([2, 1, 3, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1]), array([2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1]), array([1, 1]), array([1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([2, 2, 1, 1, 2, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1]), array([1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1]), array([1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
      "              1])                                                              ,\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 2, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 2, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1]), array([1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1]), array([1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 2, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2]), array([1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 2, 1, 1]), array([1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 2]),\n",
      "       array([1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1]), array([1]), array([1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 2, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 2, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([2, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([2, 2, 1, 1, 2]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 2, 2, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([2, 2, 1]), array([1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 2, 1, 1]), array([1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1]), array([1, 1, 1]), array([1, 1]), array([2]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([2, 1]), array([1, 1, 1, 1, 1, 2]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 2, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]), array([1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 2, 2, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1,\n",
      "              1, 1, 1, 1])                                                     ,\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1]),\n",
      "       array([1, 1]), array([2, 1, 1, 1, 1]), array([2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
      "              1, 3])                                                           ,\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 2, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]), array([2, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 2, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1])], dtype=object)}, 'test2': {'tokens': array([array([ 10,  32, 210, 237], dtype=int32),\n",
      "       array([ 35,  51,  86, 146, 202, 218], dtype=int32),\n",
      "       array([ 31, 146, 166, 212], dtype=int32),\n",
      "       array([ 44,  74, 180, 200], dtype=int32),\n",
      "       array([ 99, 202, 230], dtype=int32),\n",
      "       array([254, 265, 294], dtype=int32),\n",
      "       array([  5,  52,  78, 210, 272], dtype=int32),\n",
      "       array([ 42, 115, 118, 284], dtype=int32),\n",
      "       array([132, 171, 258, 261, 269], dtype=int32),\n",
      "       array([ 54, 145, 202, 232], dtype=int32),\n",
      "       array([123, 221], dtype=int32),\n",
      "       array([ 76,  89, 147, 190, 304], dtype=int32),\n",
      "       array([ 99, 123, 214, 305], dtype=int32),\n",
      "       array([210, 272], dtype=int32), array([ 99, 202], dtype=int32),\n",
      "       array([ 11,  13,  32,  67, 210, 258, 272], dtype=int32),\n",
      "       array([ 11,  32,  81, 191, 222], dtype=int32),\n",
      "       array([ 40,  78, 126, 151, 203, 299], dtype=int32),\n",
      "       array([210, 246, 272], dtype=int32),\n",
      "       array([ 61, 149, 192, 231], dtype=int32),\n",
      "       array([ 17,  44,  69,  73,  89,  99, 114, 137, 139, 145, 146, 185, 190,\n",
      "              192, 194, 200, 202, 258, 261, 281], dtype=int32)                ,\n",
      "       array([ 89, 117, 133, 236], dtype=int32),\n",
      "       array([ 25,  31,  44,  64,  71, 111, 121, 123, 126, 139, 153, 164, 175,\n",
      "              182, 192, 199, 210, 236, 258, 263, 272, 301, 311], dtype=int32) ,\n",
      "       array([ 11,  32,  34,  45, 202, 270, 289], dtype=int32),\n",
      "       array([ 88, 145, 198, 299], dtype=int32),\n",
      "       array([128, 224, 294, 298], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([159, 210, 272], dtype=int32), array([272], dtype=int32),\n",
      "       array([ 32,  50,  83, 137, 286], dtype=int32),\n",
      "       array([123, 144], dtype=int32),\n",
      "       array([ 11,  32, 208, 210, 272], dtype=int32),\n",
      "       array([ 82,  90, 102, 145, 202, 245], dtype=int32),\n",
      "       array([ 82, 123, 233, 269], dtype=int32),\n",
      "       array([ 99, 136, 202], dtype=int32),\n",
      "       array([123, 155, 181, 190], dtype=int32),\n",
      "       array([ 52, 107, 155, 210, 259, 272], dtype=int32),\n",
      "       array([ 31,  39,  40,  71, 117, 176, 184, 190, 243, 245, 261, 262, 269],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([ 11,  32,  58, 172, 275], dtype=int32),\n",
      "       array([ 77,  95, 117, 123, 266], dtype=int32),\n",
      "       array([ 44, 144, 181, 223, 301], dtype=int32),\n",
      "       array([192, 210, 230, 272], dtype=int32),\n",
      "       array([  9,  73,  77, 106, 242], dtype=int32),\n",
      "       array([ 23, 162, 228, 272, 297], dtype=int32),\n",
      "       array([ 37,  59, 118, 225, 259], dtype=int32),\n",
      "       array([150, 210, 227, 250, 272], dtype=int32),\n",
      "       array([ 62,  69, 138, 145, 191, 277, 298], dtype=int32),\n",
      "       array([ 11,  20,  32,  77, 164, 301], dtype=int32),\n",
      "       array([ 10,  37, 202], dtype=int32),\n",
      "       array([ 15, 175, 202], dtype=int32),\n",
      "       array([210, 258, 272], dtype=int32),\n",
      "       array([ 62,  71,  90, 126, 202], dtype=int32),\n",
      "       array([ 34, 202], dtype=int32),\n",
      "       array([ 58, 210, 241], dtype=int32),\n",
      "       array([ 34, 108, 149, 215, 217], dtype=int32),\n",
      "       array([ 11,  32,  58, 202, 236, 265, 290], dtype=int32),\n",
      "       array([ 47, 123, 178, 293], dtype=int32),\n",
      "       array([ 99, 174, 191, 286], dtype=int32),\n",
      "       array([ 23,  76, 123, 307], dtype=int32),\n",
      "       array([132, 171, 258, 261, 269], dtype=int32),\n",
      "       array([ 63, 175, 210, 272, 301], dtype=int32),\n",
      "       array([  5,  78, 137, 202, 210, 211, 218, 272], dtype=int32),\n",
      "       array([  1,  76, 150, 158, 240], dtype=int32),\n",
      "       array([ 15,  23, 123, 287], dtype=int32),\n",
      "       array([ 77, 116, 123], dtype=int32),\n",
      "       array([  8,  73,  80, 190, 210, 241], dtype=int32),\n",
      "       array([ 56,  71,  99, 202], dtype=int32),\n",
      "       array([ 74,  91, 102, 139, 145, 202], dtype=int32),\n",
      "       array([ 22,  29,  74, 234, 288], dtype=int32),\n",
      "       array([ 99, 114, 173, 202, 237], dtype=int32),\n",
      "       array([ 68, 123], dtype=int32),\n",
      "       array([ 22,  34,  36,  37, 149, 269], dtype=int32),\n",
      "       array([ 26, 144, 214, 251, 269, 301], dtype=int32),\n",
      "       array([  1, 158], dtype=int32), array([ 32, 243], dtype=int32),\n",
      "       array([133, 156, 311], dtype=int32),\n",
      "       array([ 17, 210, 257, 272], dtype=int32),\n",
      "       array([159, 210, 272], dtype=int32),\n",
      "       array([115, 118, 123], dtype=int32),\n",
      "       array([ 41,  99, 116, 202, 203, 242, 262], dtype=int32),\n",
      "       array([ 62, 188, 198, 294], dtype=int32),\n",
      "       array([ 16,  73,  76,  99, 150, 198, 202, 270], dtype=int32),\n",
      "       array([ 86,  93, 123, 139, 190, 258, 275], dtype=int32),\n",
      "       array([  8,  35,  63, 144, 196, 210, 272, 301, 302], dtype=int32),\n",
      "       array([ 11,  32,  66, 203], dtype=int32),\n",
      "       array([ 64, 194, 199, 272], dtype=int32),\n",
      "       array([123, 246], dtype=int32),\n",
      "       array([ 11,  32,  45, 141, 145, 225, 294], dtype=int32),\n",
      "       array([123, 202], dtype=int32), array([202], dtype=int32),\n",
      "       array([118, 210, 220, 272, 275, 306], dtype=int32),\n",
      "       array([210, 241], dtype=int32),\n",
      "       array([ 56, 105, 123, 185], dtype=int32),\n",
      "       array([110, 123, 144, 147, 247, 249, 258, 266], dtype=int32),\n",
      "       array([ 89,  98, 116, 150], dtype=int32),\n",
      "       array([136, 246], dtype=int32),\n",
      "       array([ 99, 145, 174, 200, 202, 228, 294], dtype=int32),\n",
      "       array([ 11,  32, 145, 192, 202, 309], dtype=int32),\n",
      "       array([ 47, 116, 123, 226, 236], dtype=int32),\n",
      "       array([ 31,  89, 123, 270, 288, 289], dtype=int32),\n",
      "       array([ 25,  32,  63,  69, 137, 145, 165, 202, 277, 301], dtype=int32),\n",
      "       array([ 10,  45,  58, 145, 202, 237], dtype=int32),\n",
      "       array([ 11,  32,  89, 208], dtype=int32),\n",
      "       array([113, 180, 272], dtype=int32),\n",
      "       array([ 11,  32,  38,  40,  46, 102], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([ 88, 198, 220, 232, 311], dtype=int32),\n",
      "       array([ 99, 123, 184, 202], dtype=int32),\n",
      "       array([  9,  85,  99, 131, 144, 145, 167, 202, 221, 258], dtype=int32),\n",
      "       array([  8,  12, 210, 272], dtype=int32),\n",
      "       array([ 32,  85, 176, 250, 258], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([ 28,  57,  82, 168, 202, 239, 296], dtype=int32),\n",
      "       array([ 43,  45,  99, 103, 121, 162, 202, 307], dtype=int32),\n",
      "       array([118, 123, 250], dtype=int32),\n",
      "       array([  5,  99, 145, 164, 202], dtype=int32),\n",
      "       array([  5,  78, 137, 202, 211, 218], dtype=int32),\n",
      "       array([ 62,  97, 145, 201, 202], dtype=int32),\n",
      "       array([ 97, 139, 145, 202, 231], dtype=int32),\n",
      "       array([ 44,  85, 117, 189], dtype=int32),\n",
      "       array([ 75, 123, 144, 146, 221, 239], dtype=int32),\n",
      "       array([ 58,  94, 145, 168, 174, 190, 202], dtype=int32),\n",
      "       array([ 77,  98, 210, 272, 308], dtype=int32),\n",
      "       array([  2,   8, 111, 149, 231], dtype=int32),\n",
      "       array([11, 22, 32, 79], dtype=int32),\n",
      "       array([118, 190, 272], dtype=int32),\n",
      "       array([ 11,  44,  63, 144, 164, 165, 202, 207, 269], dtype=int32),\n",
      "       array([ 22, 151, 202, 265], dtype=int32),\n",
      "       array([122, 210, 272], dtype=int32),\n",
      "       array([ 99, 145, 172, 185, 236, 290, 294], dtype=int32),\n",
      "       array([ 78,  99, 132, 202, 205, 244, 269], dtype=int32),\n",
      "       array([107, 122, 139, 269, 271, 284], dtype=int32),\n",
      "       array([ 41,  99, 163, 202, 271], dtype=int32),\n",
      "       array([ 99, 202, 246], dtype=int32),\n",
      "       array([  0,  73,  99, 118, 202], dtype=int32),\n",
      "       array([210, 272, 283], dtype=int32),\n",
      "       array([ 11,  32, 210, 272], dtype=int32),\n",
      "       array([ 43, 210, 225, 272], dtype=int32),\n",
      "       array([ 87, 133, 137, 258, 270], dtype=int32),\n",
      "       array([272], dtype=int32),\n",
      "       array([ 99, 175, 197, 202], dtype=int32),\n",
      "       array([ 32, 155, 162, 210, 272], dtype=int32),\n",
      "       array([ 99, 136, 202], dtype=int32),\n",
      "       array([ 62, 145, 202], dtype=int32),\n",
      "       array([ 99, 149, 202, 222, 266], dtype=int32),\n",
      "       array([ 56,  79,  99, 126, 173, 175, 191, 239, 258, 299, 301], dtype=int32),\n",
      "       array([143, 210, 238, 241, 272], dtype=int32),\n",
      "       array([ 11,  32,  45, 145], dtype=int32),\n",
      "       array([  5,  10,  34, 192, 202, 210, 264, 272], dtype=int32),\n",
      "       array([ 82, 269, 272, 289], dtype=int32),\n",
      "       array([ 99, 188, 202, 288], dtype=int32),\n",
      "       array([ 11,  32, 150, 300], dtype=int32),\n",
      "       array([ 54, 102, 139, 145, 202], dtype=int32),\n",
      "       array([157, 201, 233], dtype=int32),\n",
      "       array([ 11,  32,  45, 114, 246], dtype=int32),\n",
      "       array([11, 32, 82], dtype=int32),\n",
      "       array([  0,  25,  95, 117, 133, 156], dtype=int32),\n",
      "       array([ 93,  99, 202], dtype=int32),\n",
      "       array([118, 193], dtype=int32),\n",
      "       array([ 89, 138, 145, 202, 205], dtype=int32),\n",
      "       array([ 65, 298, 303], dtype=int32),\n",
      "       array([  9, 240, 241, 269], dtype=int32),\n",
      "       array([ 29,  36,  46,  48,  50, 123, 128, 167, 227, 288], dtype=int32),\n",
      "       array([ 52,  53, 111, 272, 289], dtype=int32),\n",
      "       array([103, 104, 123], dtype=int32),\n",
      "       array([101, 144, 210, 272], dtype=int32),\n",
      "       array([114, 145, 272], dtype=int32),\n",
      "       array([ 65, 103, 288], dtype=int32),\n",
      "       array([  8,  97, 145, 258], dtype=int32),\n",
      "       array([ 12, 115, 137, 270, 306], dtype=int32),\n",
      "       array([ 81, 222], dtype=int32),\n",
      "       array([ 82, 202, 210, 240, 269, 272, 273], dtype=int32),\n",
      "       array([ 49,  56, 190, 307], dtype=int32),\n",
      "       array([ 15,  58, 123, 202, 269, 298], dtype=int32),\n",
      "       array([ 11,  19,  32,  73, 145, 242], dtype=int32),\n",
      "       array([ 89, 100, 114, 145, 197, 202], dtype=int32),\n",
      "       array([ 29,  50,  65, 225, 227, 286], dtype=int32),\n",
      "       array([ 99, 197, 202, 289, 292], dtype=int32),\n",
      "       array([123, 182, 189, 207, 223, 258], dtype=int32),\n",
      "       array([  4, 139, 141, 226], dtype=int32),\n",
      "       array([ 35,  78,  86,  99, 142, 177, 276], dtype=int32),\n",
      "       array([ 22, 102, 117, 130, 243, 274], dtype=int32),\n",
      "       array([ 98,  99, 155, 164], dtype=int32),\n",
      "       array([145, 202], dtype=int32), array([ 99, 202], dtype=int32),\n",
      "       array([ 43, 104, 145, 202, 315], dtype=int32),\n",
      "       array([  5, 120, 145, 202], dtype=int32),\n",
      "       array([200, 210, 272, 277, 312], dtype=int32),\n",
      "       array([149, 172, 228, 295], dtype=int32),\n",
      "       array([ 11,  22,  32,  38,  46,  75,  82,  93, 148], dtype=int32),\n",
      "       array([ 12, 162, 244, 254, 258, 261, 312], dtype=int32),\n",
      "       array([210, 214, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 11,  32,  82,  99, 210, 272], dtype=int32),\n",
      "       array([303], dtype=int32),\n",
      "       array([ 35,  86,  99, 272], dtype=int32),\n",
      "       array([ 99, 202, 204], dtype=int32),\n",
      "       array([192, 202, 293], dtype=int32),\n",
      "       array([ 26, 144, 214, 251, 269, 301], dtype=int32),\n",
      "       array([ 11,  32, 241, 298], dtype=int32),\n",
      "       array([ 14,  53, 118, 175, 176, 198, 253, 264], dtype=int32),\n",
      "       array([145, 202], dtype=int32), array([ 99, 202], dtype=int32),\n",
      "       array([256, 258, 259, 306], dtype=int32),\n",
      "       array([ 93, 236, 269, 296], dtype=int32),\n",
      "       array([ 11,  32, 122, 220, 272], dtype=int32),\n",
      "       array([179, 227], dtype=int32),\n",
      "       array([186, 272, 301], dtype=int32),\n",
      "       array([186, 270, 272], dtype=int32),\n",
      "       array([210, 241], dtype=int32),\n",
      "       array([ 99, 155, 202, 267], dtype=int32),\n",
      "       array([ 31, 117, 210, 240, 272, 296], dtype=int32),\n",
      "       array([ 15,  24,  91,  99, 202, 240, 258], dtype=int32),\n",
      "       array([ 47, 100, 123], dtype=int32),\n",
      "       array([ 11,  32, 260], dtype=int32),\n",
      "       array([ 99, 176, 202, 205], dtype=int32),\n",
      "       array([ 32, 202, 261], dtype=int32),\n",
      "       array([ 99, 152, 202, 276], dtype=int32),\n",
      "       array([214, 238, 299], dtype=int32),\n",
      "       array([ 26, 144, 214, 251, 269, 301], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([210, 214, 251, 269, 272, 301], dtype=int32),\n",
      "       array([136, 246], dtype=int32),\n",
      "       array([103, 120, 123, 146, 228, 266], dtype=int32),\n",
      "       array([ 22,  39,  55,  63,  72,  75,  83,  95,  97, 113, 115, 135, 139,\n",
      "              155, 190, 192, 229, 234, 236, 252, 264, 302], dtype=int32)      ,\n",
      "       array([246, 272], dtype=int32),\n",
      "       array([ 43, 210, 272, 314], dtype=int32),\n",
      "       array([204, 210, 272], dtype=int32),\n",
      "       array([ 13,  38,  42,  43,  65, 294], dtype=int32),\n",
      "       array([ 14,  53,  65, 134, 197, 281, 287, 300], dtype=int32),\n",
      "       array([ 11,  32, 246, 258], dtype=int32),\n",
      "       array([  6,  13,  82, 161, 272, 279], dtype=int32),\n",
      "       array([ 15, 181, 190, 228, 258, 269], dtype=int32),\n",
      "       array([ 99, 202, 315], dtype=int32),\n",
      "       array([ 32,  67, 144, 175, 197, 210, 220, 258, 272, 301], dtype=int32),\n",
      "       array([ 38,  61, 123, 188], dtype=int32),\n",
      "       array([ 99, 115, 118, 137, 197, 202, 210, 261, 269, 272], dtype=int32),\n",
      "       array([ 99, 129, 145, 202], dtype=int32),\n",
      "       array([ 74,  91, 102, 139, 145, 202], dtype=int32),\n",
      "       array([ 11,  32, 145, 153, 199, 202, 261], dtype=int32),\n",
      "       array([  4,  93, 122, 153, 166, 294], dtype=int32),\n",
      "       array([ 82, 202], dtype=int32),\n",
      "       array([ 11,  32, 121, 145], dtype=int32),\n",
      "       array([ 82,  99, 144, 146, 167, 202, 227, 231, 236, 299], dtype=int32),\n",
      "       array([ 11,  32,  45,  52, 149, 186, 208, 259], dtype=int32),\n",
      "       array([ 42,  99, 142, 202, 269], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([ 73, 210, 272], dtype=int32),\n",
      "       array([112, 210, 224, 272, 305], dtype=int32),\n",
      "       array([ 54,  62, 145, 149, 202], dtype=int32),\n",
      "       array([ 30,  43, 202, 232], dtype=int32),\n",
      "       array([ 99, 137, 146, 174, 202, 233], dtype=int32),\n",
      "       array([241], dtype=int32),\n",
      "       array([118, 201, 210, 272], dtype=int32),\n",
      "       array([ 35,  38,  40,  92, 125], dtype=int32),\n",
      "       array([  8,  17,  95, 123], dtype=int32),\n",
      "       array([ 77, 116, 138, 226, 258, 306], dtype=int32),\n",
      "       array([136, 210, 272], dtype=int32),\n",
      "       array([  8, 224], dtype=int32),\n",
      "       array([  8,  27,  43,  82, 108, 240, 259, 283], dtype=int32),\n",
      "       array([ 12,  17,  66,  85, 224], dtype=int32),\n",
      "       array([ 43,  56,  67, 123, 124, 144, 236], dtype=int32),\n",
      "       array([ 18,  39, 173, 184, 194, 240], dtype=int32),\n",
      "       array([  2,  11,  29,  32,  37, 153], dtype=int32),\n",
      "       array([ 14,  99, 202], dtype=int32),\n",
      "       array([ 23,  57, 100, 133, 156, 236], dtype=int32),\n",
      "       array([ 26, 135, 191, 196, 237], dtype=int32),\n",
      "       array([210, 214, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 57,  65,  79, 272, 287], dtype=int32),\n",
      "       array([ 14, 144, 176, 190, 192, 210, 248, 272], dtype=int32),\n",
      "       array([123, 190, 288], dtype=int32),\n",
      "       array([ 36, 210, 211, 272], dtype=int32),\n",
      "       array([118, 202, 258], dtype=int32),\n",
      "       array([ 31, 110, 123, 144, 147, 247, 249, 258, 266, 313], dtype=int32),\n",
      "       array([ 11,  32,  99, 185, 202, 269], dtype=int32),\n",
      "       array([ 39,  60, 175, 202, 269], dtype=int32),\n",
      "       array([ 32,  37,  82,  99, 126, 202, 205], dtype=int32),\n",
      "       array([ 17,  78, 188, 288], dtype=int32),\n",
      "       array([188, 202, 220, 249], dtype=int32),\n",
      "       array([ 13,  14,  18,  90, 133, 134, 160, 190, 272], dtype=int32),\n",
      "       array([  5,  31,  72, 118, 165, 175, 196, 210, 272], dtype=int32),\n",
      "       array([ 11,  16,  32, 150, 194, 208], dtype=int32),\n",
      "       array([ 21,  47,  82, 136, 170, 263, 298], dtype=int32),\n",
      "       array([ 11,  32,  99, 197, 202], dtype=int32),\n",
      "       array([ 53, 123], dtype=int32),\n",
      "       array([ 97, 145, 202], dtype=int32),\n",
      "       array([ 48, 210, 241, 243, 277], dtype=int32),\n",
      "       array([  6,  32, 123, 144, 216], dtype=int32),\n",
      "       array([ 58,  77, 145, 269, 271, 294], dtype=int32),\n",
      "       array([123, 245], dtype=int32),\n",
      "       array([179, 182, 210, 249, 269, 272], dtype=int32),\n",
      "       array([ 31,  72, 113, 162, 240], dtype=int32),\n",
      "       array([210, 241], dtype=int32),\n",
      "       array([246, 269, 272], dtype=int32),\n",
      "       array([  7, 190, 210, 227, 245, 269, 272], dtype=int32),\n",
      "       array([ 54,  62, 145, 149, 202], dtype=int32),\n",
      "       array([133, 225, 246, 285], dtype=int32),\n",
      "       array([ 37,  47, 185, 191], dtype=int32),\n",
      "       array([ 10,  45,  58, 145, 202, 237], dtype=int32),\n",
      "       array([ 10,  52,  98, 151, 269, 310], dtype=int32),\n",
      "       array([  5, 145, 149, 182, 236], dtype=int32),\n",
      "       array([ 11,  32, 210, 272], dtype=int32),\n",
      "       array([157, 210, 272], dtype=int32),\n",
      "       array([ 13,  28,  51, 116, 208, 210, 258, 272], dtype=int32),\n",
      "       array([ 35,  72, 116, 118, 258], dtype=int32),\n",
      "       array([247, 266], dtype=int32),\n",
      "       array([ 23,  57, 100, 133, 156, 236], dtype=int32),\n",
      "       array([10, 32, 37, 82], dtype=int32),\n",
      "       array([ 28,  96, 176, 246], dtype=int32),\n",
      "       array([ 11,  32,  79, 162, 238], dtype=int32),\n",
      "       array([202, 304], dtype=int32), array([210, 272], dtype=int32),\n",
      "       array([202], dtype=int32),\n",
      "       array([  7,  97, 145, 202, 282], dtype=int32),\n",
      "       array([ 82, 202, 246], dtype=int32),\n",
      "       array([ 11,  32, 272, 277], dtype=int32),\n",
      "       array([ 99, 145, 202, 231], dtype=int32),\n",
      "       array([ 78, 121, 133, 245, 300], dtype=int32),\n",
      "       array([  7,  66,  70,  85, 110, 123, 145], dtype=int32),\n",
      "       array([ 11,  32,  58, 202], dtype=int32),\n",
      "       array([ 11, 119, 186, 250, 268], dtype=int32),\n",
      "       array([  8,  67,  98,  99, 131, 134, 176, 202, 308], dtype=int32),\n",
      "       array([ 13, 168, 210, 272], dtype=int32),\n",
      "       array([ 99, 157, 202, 242, 306], dtype=int32),\n",
      "       array([ 16,  52, 162, 174, 197, 210, 241, 258, 294, 296, 297], dtype=int32),\n",
      "       array([ 55, 145, 153, 202], dtype=int32),\n",
      "       array([145, 197, 202], dtype=int32),\n",
      "       array([  0, 184, 210, 272], dtype=int32),\n",
      "       array([ 15,  58, 123, 202, 269, 298], dtype=int32),\n",
      "       array([  5,  20,  32,  44,  48, 242], dtype=int32),\n",
      "       array([ 81,  99, 115, 194, 202, 209, 235], dtype=int32),\n",
      "       array([ 38,  62,  69, 145, 162, 231], dtype=int32),\n",
      "       array([ 11,  32,  99, 208], dtype=int32),\n",
      "       array([ 16,  99, 103, 114, 123, 202, 266, 313], dtype=int32),\n",
      "       array([123, 300], dtype=int32),\n",
      "       array([149, 198, 237, 287], dtype=int32),\n",
      "       array([117, 210, 241], dtype=int32),\n",
      "       array([  2,  91, 121, 275, 313], dtype=int32),\n",
      "       array([ 11,  32, 272], dtype=int32),\n",
      "       array([ 25, 144, 292], dtype=int32),\n",
      "       array([ 35,  86, 106, 208, 301], dtype=int32),\n",
      "       array([ 43, 123], dtype=int32),\n",
      "       array([  1,  76, 150, 158, 240], dtype=int32),\n",
      "       array([ 35, 210, 272], dtype=int32),\n",
      "       array([ 16, 210, 272], dtype=int32),\n",
      "       array([ 11,  31,  45, 123, 215], dtype=int32),\n",
      "       array([  8,  12, 272], dtype=int32),\n",
      "       array([ 43, 120, 123], dtype=int32),\n",
      "       array([118, 198, 216], dtype=int32),\n",
      "       array([ 32,  33,  56, 123], dtype=int32),\n",
      "       array([ 32,  94, 134, 145], dtype=int32),\n",
      "       array([140, 144, 180], dtype=int32),\n",
      "       array([ 11,  32, 246], dtype=int32),\n",
      "       array([210, 241, 281], dtype=int32), array([202], dtype=int32),\n",
      "       array([272], dtype=int32),\n",
      "       array([177, 200, 210, 241, 291], dtype=int32),\n",
      "       array([ 31, 210, 214, 251, 269, 272], dtype=int32),\n",
      "       array([101, 123, 215], dtype=int32),\n",
      "       array([ 76,  83,  89, 109, 123], dtype=int32),\n",
      "       array([ 11,  32,  75, 202, 221, 258, 299, 313], dtype=int32),\n",
      "       array([ 99, 118, 197, 202], dtype=int32),\n",
      "       array([ 31,  44,  56,  57, 121, 160, 200, 223, 232, 238, 283], dtype=int32),\n",
      "       array([  4, 145, 185, 190, 197, 202], dtype=int32),\n",
      "       array([ 10,  48,  97, 145, 188, 202, 248, 306, 311], dtype=int32),\n",
      "       array([100, 173, 175, 227, 239, 301, 309], dtype=int32),\n",
      "       array([ 33,  99, 202, 288], dtype=int32),\n",
      "       array([ 99, 152, 202, 276], dtype=int32),\n",
      "       array([200, 210, 272, 277, 312], dtype=int32),\n",
      "       array([ 32,  56, 123, 204], dtype=int32),\n",
      "       array([ 99, 202, 232], dtype=int32),\n",
      "       array([113, 215, 272], dtype=int32), array([21], dtype=int32),\n",
      "       array([ 35,  99, 113, 141, 167, 202, 262], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([ 67,  73,  99, 101, 202, 275], dtype=int32),\n",
      "       array([ 17,  25,  36, 128, 143, 210, 223, 232, 247, 265, 272], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([129, 269, 293, 312], dtype=int32),\n",
      "       array([123, 149, 266, 271, 306], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([ 99, 164, 241], dtype=int32),\n",
      "       array([ 11,  32,  62, 145, 225], dtype=int32),\n",
      "       array([ 99, 131, 155, 202], dtype=int32),\n",
      "       array([ 15, 120, 123, 186], dtype=int32),\n",
      "       array([268, 292, 303], dtype=int32),\n",
      "       array([ 13, 120, 122, 220, 230, 267], dtype=int32),\n",
      "       array([ 17,  95, 135, 210, 252, 272], dtype=int32),\n",
      "       array([ 74,  91, 102, 139, 145, 202], dtype=int32),\n",
      "       array([138, 210, 262, 272, 303], dtype=int32),\n",
      "       array([233, 236, 266, 299], dtype=int32),\n",
      "       array([ 13,  65, 118, 167, 185], dtype=int32),\n",
      "       array([  8,  11,  31,  32,  44,  56,  82, 200, 282], dtype=int32),\n",
      "       array([ 31, 210, 214, 251, 269, 272], dtype=int32),\n",
      "       array([272], dtype=int32),\n",
      "       array([ 32, 123, 272, 273], dtype=int32),\n",
      "       array([ 38, 128, 210, 272], dtype=int32),\n",
      "       array([  5, 180, 241], dtype=int32),\n",
      "       array([ 11,  22,  32,  45, 263], dtype=int32),\n",
      "       array([204, 210, 241, 246], dtype=int32),\n",
      "       array([134, 143, 176, 202], dtype=int32),\n",
      "       array([ 32,  44,  99, 133, 190, 200, 202], dtype=int32),\n",
      "       array([ 11,  28,  32,  44, 197, 200], dtype=int32),\n",
      "       array([ 57,  77, 123, 257], dtype=int32),\n",
      "       array([ 17,  45,  99, 139, 284], dtype=int32),\n",
      "       array([241, 246], dtype=int32),\n",
      "       array([ 99, 122, 237], dtype=int32),\n",
      "       array([ 11,  32,  45, 131, 202, 223], dtype=int32),\n",
      "       array([ 17,  56, 123, 275, 277], dtype=int32),\n",
      "       array([ 11,  32,  99, 202], dtype=int32),\n",
      "       array([ 14,  99, 133, 162, 185, 202, 240, 258, 260], dtype=int32),\n",
      "       array([ 45,  99, 202, 210, 272], dtype=int32),\n",
      "       array([111, 141, 185, 269], dtype=int32),\n",
      "       array([ 26, 123, 238], dtype=int32),\n",
      "       array([115, 133, 202, 215], dtype=int32),\n",
      "       array([ 93, 145, 202], dtype=int32),\n",
      "       array([ 16,  60,  66, 120, 141, 207, 266, 271, 294, 306], dtype=int32),\n",
      "       array([ 11,  32, 113, 178, 300], dtype=int32),\n",
      "       array([ 99, 136, 202], dtype=int32),\n",
      "       array([  8,  17,  99, 174, 202, 229], dtype=int32),\n",
      "       array([184, 227], dtype=int32),\n",
      "       array([ 43, 129, 210, 272], dtype=int32),\n",
      "       array([ 38,  43, 107, 303], dtype=int32),\n",
      "       array([123, 312, 313], dtype=int32),\n",
      "       array([ 28,  69, 123, 289], dtype=int32),\n",
      "       array([ 85,  91, 129, 202], dtype=int32),\n",
      "       array([ 16,  32, 271, 288, 315], dtype=int32),\n",
      "       array([123, 217, 225, 227, 278], dtype=int32),\n",
      "       array([246, 272], dtype=int32),\n",
      "       array([ 11,  32,  60, 145, 202, 203], dtype=int32),\n",
      "       array([ 97, 176, 197, 210, 219, 269, 272], dtype=int32),\n",
      "       array([107, 162, 210, 236, 241], dtype=int32),\n",
      "       array([ 17, 104, 132, 210, 272], dtype=int32),\n",
      "       array([ 10,  37, 202], dtype=int32),\n",
      "       array([ 11,  32,  34,  73, 103], dtype=int32),\n",
      "       array([179, 180, 195, 204, 236, 258, 264, 268], dtype=int32),\n",
      "       array([ 43,  45, 145, 157, 202, 266, 290], dtype=int32),\n",
      "       array([ 24, 135, 200], dtype=int32),\n",
      "       array([  2,  91, 121, 275, 313], dtype=int32),\n",
      "       array([ 47,  99, 101, 197, 202, 205], dtype=int32),\n",
      "       array([ 70,  71,  74, 211, 269, 293], dtype=int32),\n",
      "       array([ 99, 145, 172, 185, 236, 290, 294], dtype=int32),\n",
      "       array([ 73, 210, 272], dtype=int32),\n",
      "       array([ 12, 158, 225, 227, 293, 297], dtype=int32),\n",
      "       array([ 58,  99, 202, 252], dtype=int32),\n",
      "       array([ 34, 193, 210, 222, 254, 272], dtype=int32),\n",
      "       array([ 31, 210, 214, 251, 269, 272], dtype=int32),\n",
      "       array([210, 212, 272], dtype=int32),\n",
      "       array([113, 186, 215, 223, 236], dtype=int32),\n",
      "       array([145, 169, 202], dtype=int32),\n",
      "       array([210, 272], dtype=int32), array([178, 299], dtype=int32),\n",
      "       array([101, 123, 180], dtype=int32),\n",
      "       array([ 99, 164], dtype=int32),\n",
      "       array([ 11,  32, 145], dtype=int32),\n",
      "       array([ 96, 171, 246, 314], dtype=int32),\n",
      "       array([ 17,  35,  86,  99, 202, 218, 291], dtype=int32),\n",
      "       array([ 22,  40, 206, 236], dtype=int32),\n",
      "       array([ 65, 123, 133, 144, 205], dtype=int32),\n",
      "       array([ 73,  98, 133, 202, 272], dtype=int32),\n",
      "       array([ 13,  73,  99, 108, 158, 202], dtype=int32),\n",
      "       array([ 32,  61, 108, 123, 273], dtype=int32),\n",
      "       array([104, 197, 202, 252], dtype=int32),\n",
      "       array([ 99, 140, 183, 190, 202, 304], dtype=int32),\n",
      "       array([ 61,  99, 134, 139], dtype=int32),\n",
      "       array([ 25,  63, 145, 151, 202, 270], dtype=int32),\n",
      "       array([ 45,  48,  99, 150, 202, 238], dtype=int32),\n",
      "       array([ 56, 197, 210, 272], dtype=int32),\n",
      "       array([  7,  91, 210, 272], dtype=int32),\n",
      "       array([210, 214, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 47, 113, 210, 272], dtype=int32),\n",
      "       array([ 41, 123, 125, 146, 271, 274, 298], dtype=int32),\n",
      "       array([157, 202], dtype=int32),\n",
      "       array([ 11,  32,  45, 117, 130, 220, 274], dtype=int32),\n",
      "       array([149, 202, 242, 271], dtype=int32),\n",
      "       array([ 68,  82, 112, 144, 190, 196, 215, 305, 306], dtype=int32),\n",
      "       array([145, 202, 225], dtype=int32),\n",
      "       array([ 32,  57, 123, 195, 294], dtype=int32),\n",
      "       array([  4, 144, 176, 196, 229, 263], dtype=int32),\n",
      "       array([126, 175, 196, 202, 236, 307], dtype=int32),\n",
      "       array([ 32,  76, 132, 142, 162, 269], dtype=int32),\n",
      "       array([ 34, 167, 225, 272, 285], dtype=int32),\n",
      "       array([ 38,  61, 142, 225, 303], dtype=int32),\n",
      "       array([103, 137, 162, 166, 195, 272, 297], dtype=int32),\n",
      "       array([ 50,  83, 137, 146, 182, 298], dtype=int32),\n",
      "       array([ 58,  62, 145, 202], dtype=int32),\n",
      "       array([ 80, 111, 113, 203, 210, 260, 272], dtype=int32),\n",
      "       array([ 11,  32, 246, 258], dtype=int32),\n",
      "       array([105, 145, 225], dtype=int32),\n",
      "       array([  9,  66,  98, 128, 143, 157, 210, 272, 280], dtype=int32),\n",
      "       array([ 99, 197, 202], dtype=int32),\n",
      "       array([123, 230], dtype=int32),\n",
      "       array([ 56, 139, 191, 210, 272], dtype=int32),\n",
      "       array([ 92,  99, 174, 187, 198, 202, 218], dtype=int32),\n",
      "       array([ 11,  32, 101, 125, 151, 167, 169, 205], dtype=int32),\n",
      "       array([ 35,  52,  63, 202, 246, 264, 311], dtype=int32),\n",
      "       array([ 44, 145, 166, 262], dtype=int32),\n",
      "       array([103, 210, 272, 300], dtype=int32),\n",
      "       array([ 59, 123, 220], dtype=int32),\n",
      "       array([ 99, 202, 225, 227, 250], dtype=int32),\n",
      "       array([ 99, 197, 202, 203, 223, 242], dtype=int32),\n",
      "       array([  5, 210, 272, 289], dtype=int32),\n",
      "       array([ 99, 202, 230, 258, 269], dtype=int32),\n",
      "       array([ 82,  99, 202], dtype=int32),\n",
      "       array([145, 202, 213, 280, 282], dtype=int32),\n",
      "       array([ 61, 221, 293], dtype=int32),\n",
      "       array([ 37,  99, 116, 147, 202, 210, 215, 232, 236, 258, 272], dtype=int32),\n",
      "       array([202, 231, 296], dtype=int32),\n",
      "       array([  7, 145, 167, 202], dtype=int32),\n",
      "       array([104, 128, 134, 190], dtype=int32),\n",
      "       array([ 28,  92, 218, 262, 291], dtype=int32),\n",
      "       array([ 89, 141, 302, 309], dtype=int32),\n",
      "       array([139, 142, 220, 225], dtype=int32),\n",
      "       array([145, 202, 236, 294], dtype=int32),\n",
      "       array([ 72, 165, 214, 251, 269, 301], dtype=int32),\n",
      "       array([ 15, 210, 272], dtype=int32),\n",
      "       array([ 47,  57,  94, 123, 131, 133, 294], dtype=int32),\n",
      "       array([  6, 118, 137, 145, 174, 202, 277], dtype=int32),\n",
      "       array([ 99, 160, 202, 204, 214], dtype=int32),\n",
      "       array([ 17,  43,  99, 202, 210, 236, 272], dtype=int32),\n",
      "       array([ 16,  76, 147, 190, 304], dtype=int32),\n",
      "       array([176, 198, 258, 272, 308], dtype=int32),\n",
      "       array([136, 246], dtype=int32), array([202], dtype=int32),\n",
      "       array([ 22, 202, 302], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([ 71,  80, 112, 180, 190, 215, 220, 223, 260, 268, 294, 305],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([ 17, 151, 202], dtype=int32),\n",
      "       array([149, 150, 210, 227, 272], dtype=int32),\n",
      "       array([ 26,  63,  65,  70, 121, 210, 225, 227, 258, 272, 302], dtype=int32),\n",
      "       array([ 82, 224, 258, 272], dtype=int32),\n",
      "       array([210, 272], dtype=int32), array([ 50, 184], dtype=int32),\n",
      "       array([186, 226, 270], dtype=int32),\n",
      "       array([ 95,  99, 202, 258], dtype=int32),\n",
      "       array([ 11,  32, 210, 272], dtype=int32),\n",
      "       array([133, 210, 272], dtype=int32),\n",
      "       array([ 57,  77,  81, 100, 122, 168, 250, 263, 268], dtype=int32),\n",
      "       array([ 51,  69, 194, 220, 288, 291], dtype=int32),\n",
      "       array([ 73,  82,  89, 145, 192, 197, 205, 213, 309], dtype=int32),\n",
      "       array([ 76,  79, 127, 222, 225], dtype=int32),\n",
      "       array([ 32,  63, 118, 150, 210, 220, 225, 227, 231, 250, 258, 272, 302],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([111, 202], dtype=int32),\n",
      "       array([ 28,  38, 108, 177, 269], dtype=int32),\n",
      "       array([  2,   9,  63, 144, 194, 198, 202], dtype=int32),\n",
      "       array([ 96, 176, 246], dtype=int32),\n",
      "       array([ 39,  98, 198, 202], dtype=int32),\n",
      "       array([ 27,  31, 214, 269, 272], dtype=int32),\n",
      "       array([ 15,  58, 123, 202, 269, 298], dtype=int32),\n",
      "       array([  8,  17,  99, 174, 202, 229], dtype=int32),\n",
      "       array([210, 225, 227, 272], dtype=int32),\n",
      "       array([  3, 123, 144], dtype=int32),\n",
      "       array([ 99, 143, 198, 202, 242], dtype=int32),\n",
      "       array([ 23,  57, 100, 133, 156, 236], dtype=int32),\n",
      "       array([  1,  11,  27,  32,  57,  82,  99, 114, 121, 146, 170, 188, 202,\n",
      "              213, 222, 224, 232, 233, 258, 269, 277, 288, 294, 304], dtype=int32),\n",
      "       array([ 32,  45, 145, 202, 237], dtype=int32),\n",
      "       array([  8,  47, 136, 140, 145, 236, 237, 242, 249, 299], dtype=int32),\n",
      "       array([118, 123, 144, 309], dtype=int32),\n",
      "       array([ 13,  42,  96,  99, 171, 202], dtype=int32),\n",
      "       array([ 20, 143, 183, 202, 251], dtype=int32),\n",
      "       array([ 80, 111, 167, 176, 221, 260], dtype=int32),\n",
      "       array([ 80, 111, 167, 176, 221, 260], dtype=int32),\n",
      "       array([ 34,  99, 148, 188, 202, 236, 270, 284, 298], dtype=int32),\n",
      "       array([272, 275], dtype=int32),\n",
      "       array([ 10,  29, 100, 126, 202, 227], dtype=int32),\n",
      "       array([123, 144, 220], dtype=int32),\n",
      "       array([ 80,  99, 174, 202, 210, 260, 272], dtype=int32),\n",
      "       array([ 58,  62, 145, 202], dtype=int32),\n",
      "       array([  1,  22,  99, 202], dtype=int32),\n",
      "       array([  3,  89, 102, 139, 140, 145, 202], dtype=int32),\n",
      "       array([ 60, 182, 192, 246, 269], dtype=int32),\n",
      "       array([ 32,  45, 145, 257, 264, 287], dtype=int32),\n",
      "       array([ 73, 100, 139, 141, 145, 192, 202, 212], dtype=int32),\n",
      "       array([ 74, 140, 312], dtype=int32),\n",
      "       array([ 11,  32,  43,  60,  77, 158, 162], dtype=int32),\n",
      "       array([  9, 210, 272], dtype=int32),\n",
      "       array([ 11,  30,  32,  38,  70, 123, 145, 185, 186, 194, 210, 272, 294],\n",
      "             dtype=int32)                                                      ,\n",
      "       array([245, 272], dtype=int32),\n",
      "       array([ 11,  32,  45, 149], dtype=int32),\n",
      "       array([ 99, 197, 235], dtype=int32),\n",
      "       array([139, 141, 145, 191, 197, 202, 212], dtype=int32),\n",
      "       array([ 43, 272], dtype=int32),\n",
      "       array([ 99, 125, 141, 174, 202], dtype=int32),\n",
      "       array([107, 173, 210, 258, 272], dtype=int32),\n",
      "       array([  8,  13, 122, 123], dtype=int32),\n",
      "       array([ 17,  31,  44,  50,  68,  81, 110, 166, 175, 185, 210, 224, 237,\n",
      "              263, 272, 275, 294], dtype=int32)                               ,\n",
      "       array([ 44,  98,  99, 190, 200], dtype=int32),\n",
      "       array([ 24,  94, 115, 123, 258], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32), array([ 99, 202], dtype=int32),\n",
      "       array([ 11,  32,  45,  96, 151, 266], dtype=int32),\n",
      "       array([ 99, 164, 272], dtype=int32),\n",
      "       array([ 99, 103, 149, 202, 204, 266, 273], dtype=int32),\n",
      "       array([ 11,  32, 123, 133, 244], dtype=int32),\n",
      "       array([ 99, 123, 202, 313], dtype=int32),\n",
      "       array([ 78, 140, 145, 202, 225, 285], dtype=int32),\n",
      "       array([ 44, 109, 272], dtype=int32),\n",
      "       array([  2,  11,  29,  32,  37, 153], dtype=int32),\n",
      "       array([ 93, 157, 173, 296], dtype=int32),\n",
      "       array([210, 272], dtype=int32),\n",
      "       array([ 23, 210, 236, 263, 272], dtype=int32),\n",
      "       array([128, 167, 207, 223, 229], dtype=int32),\n",
      "       array([  1,  23,  37,  56,  76,  85,  87,  98,  99, 105, 114, 121, 141,\n",
      "              170, 197, 202, 233, 294], dtype=int32)                          ,\n",
      "       array([  2, 139, 145, 202], dtype=int32),\n",
      "       array([ 16,  23, 145, 202], dtype=int32),\n",
      "       array([210, 214, 251, 269, 272, 301], dtype=int32),\n",
      "       array([123, 173, 175], dtype=int32),\n",
      "       array([  9, 210, 272], dtype=int32),\n",
      "       array([109, 123, 144, 219, 253], dtype=int32),\n",
      "       array([ 59, 145, 202, 258], dtype=int32),\n",
      "       array([ 44, 139, 178, 199], dtype=int32),\n",
      "       array([ 57, 132, 144, 244], dtype=int32),\n",
      "       array([181, 190, 225, 236], dtype=int32),\n",
      "       array([ 11,  32, 178], dtype=int32),\n",
      "       array([117, 128, 130, 158, 167, 210, 238, 272, 274], dtype=int32),\n",
      "       array([210, 241, 246], dtype=int32),\n",
      "       array([ 99, 202, 261], dtype=int32),\n",
      "       array([210, 214, 251, 269, 272, 301], dtype=int32),\n",
      "       array([ 51, 118], dtype=int32),\n",
      "       array([ 69, 143, 200, 214, 242, 312], dtype=int32),\n",
      "       array([ 44, 115, 123, 200], dtype=int32),\n",
      "       array([145, 174, 202, 265], dtype=int32),\n",
      "       array([ 59, 139, 185, 210, 272, 294], dtype=int32),\n",
      "       array([ 73,  99, 145, 202, 261, 271], dtype=int32),\n",
      "       array([138, 139, 210, 241, 261], dtype=int32),\n",
      "       array([ 44,  73,  93,  99, 107, 120, 190, 202, 223, 272], dtype=int32),\n",
      "       array([246, 288], dtype=int32),\n",
      "       array([101, 162, 225], dtype=int32),\n",
      "       array([133, 147, 189, 210, 245, 272], dtype=int32),\n",
      "       array([ 45,  61,  79, 111, 123, 186], dtype=int32),\n",
      "       array([ 58,  99, 174, 202, 221], dtype=int32),\n",
      "       array([ 11,  32,  45,  61, 150, 192], dtype=int32),\n",
      "       array([ 43, 202], dtype=int32), array([179, 227], dtype=int32),\n",
      "       array([ 19, 202, 220, 249], dtype=int32),\n",
      "       array([117, 134, 176], dtype=int32),\n",
      "       array([ 55,  65, 190, 197, 221], dtype=int32),\n",
      "       array([115, 139, 210, 272, 294], dtype=int32),\n",
      "       array([ 48,  49,  50,  67, 132, 145, 202, 219, 225, 269, 286], dtype=int32),\n",
      "       array([145, 210, 272], dtype=int32),\n",
      "       array([ 99, 107, 202, 275], dtype=int32),\n",
      "       array([  4,  18,  89, 114], dtype=int32),\n",
      "       array([121, 140, 153, 179, 184, 210, 230, 272, 294], dtype=int32),\n",
      "       array([ 44,  56, 128, 167, 258, 266, 269, 294], dtype=int32),\n",
      "       array([ 59,  76, 123, 149, 228, 312], dtype=int32),\n",
      "       array([ 65, 106, 170, 311], dtype=int32),\n",
      "       array([ 54,  99, 174, 202], dtype=int32),\n",
      "       array([ 13, 106, 210, 272], dtype=int32),\n",
      "       array([ 54,  62, 197, 251, 274, 293], dtype=int32),\n",
      "       array([ 72, 145, 222], dtype=int32),\n",
      "       array([ 40,  66, 104, 258, 308], dtype=int32),\n",
      "       array([ 52,  65, 183, 272], dtype=int32),\n",
      "       array([ 11,  26,  32,  63, 121, 150, 176, 185, 189, 210, 272, 302],\n",
      "             dtype=int32)                                                 ,\n",
      "       array([144, 180, 210, 272], dtype=int32),\n",
      "       array([  4,  77, 128, 144, 167, 175, 259, 283], dtype=int32),\n",
      "       array([ 99, 158, 202, 204], dtype=int32),\n",
      "       array([ 21, 145, 202, 213], dtype=int32),\n",
      "       array([100, 123, 233], dtype=int32),\n",
      "       array([  2,  45, 111], dtype=int32),\n",
      "       array([ 58,  99, 202, 277], dtype=int32),\n",
      "       array([ 99, 186, 202], dtype=int32),\n",
      "       array([ 55,  65, 190, 197, 221], dtype=int32),\n",
      "       array([  5,  31,  78,  98, 202, 259, 299], dtype=int32),\n",
      "       array([ 44,  76,  99, 145, 150, 197, 202, 211], dtype=int32),\n",
      "       array([29, 52, 65, 98], dtype=int32),\n",
      "       array([ 99, 202], dtype=int32),\n",
      "       array([182, 190, 210, 258, 272, 288], dtype=int32),\n",
      "       array([117, 130, 169, 274], dtype=int32),\n",
      "       array([ 11,  32,  76,  89, 123, 242], dtype=int32),\n",
      "       array([ 96, 176, 246], dtype=int32),\n",
      "       array([ 56,  66, 145, 162, 164, 308], dtype=int32),\n",
      "       array([145, 202, 246], dtype=int32),\n",
      "       array([ 11,  32,  78, 129, 202, 266, 298, 299], dtype=int32),\n",
      "       array([ 34,  52,  64, 111, 123, 131, 149, 222], dtype=int32),\n",
      "       array([  4, 122, 123], dtype=int32),\n",
      "       array([  4,  75, 146, 192, 202, 257], dtype=int32),\n",
      "       array([ 89, 105, 143], dtype=int32),\n",
      "       array([113, 123, 244, 284], dtype=int32),\n",
      "       array([ 99, 202, 310], dtype=int32),\n",
      "       array([ 78,  82, 196, 207, 262, 271], dtype=int32),\n",
      "       array([ 43, 186, 198, 222], dtype=int32),\n",
      "       array([  3,  51, 137, 145, 153, 154, 202], dtype=int32),\n",
      "       array([ 26, 144, 214, 251, 269, 301], dtype=int32),\n",
      "       array([ 11,  32,  43,  45, 105, 158, 202], dtype=int32),\n",
      "       array([ 73, 145, 202], dtype=int32),\n",
      "       array([ 99, 115, 118, 137, 197, 202, 210, 261, 269, 272], dtype=int32),\n",
      "       array([ 10,  11,  45,  58, 145, 202, 294], dtype=int32),\n",
      "       array([ 43,  98, 234], dtype=int32),\n",
      "       array([ 11,  32, 145, 208], dtype=int32),\n",
      "       array([ 47, 123, 211], dtype=int32),\n",
      "       array([ 89,  99, 100, 114, 145, 197, 202], dtype=int32),\n",
      "       array([ 50, 178, 210, 272, 286], dtype=int32),\n",
      "       array([ 11, 128, 184, 190, 287], dtype=int32),\n",
      "       array([ 11,  32,  76,  89, 123, 242], dtype=int32),\n",
      "       array([ 23,  95, 128, 141, 224], dtype=int32),\n",
      "       array([123, 144, 236], dtype=int32),\n",
      "       array([ 43, 210, 272], dtype=int32),\n",
      "       array([ 43,  44, 115, 200, 238], dtype=int32),\n",
      "       array([ 32,  63, 118, 150, 210, 220, 225, 227, 231, 250, 258, 272, 302],\n",
      "             dtype=int32)                                                      ],\n",
      "      dtype=object), 'counts': array([array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3,\n",
      "              1])                                                              ,\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1, 1]), array([1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1]), array([2, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1]), array([1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 3, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 2, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([2, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([2, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 2]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 2]), array([1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 3]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([2, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 2, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1]), array([1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1]), array([1, 2, 1, 1, 1]),\n",
      "       array([1, 2, 2]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1]), array([1]), array([1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([2, 1, 1]), array([1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([2, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1]), array([2, 1, 1]),\n",
      "       array([1, 1]), array([2, 1]), array([1, 1, 1]), array([1, 1]),\n",
      "       array([1, 2, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 2]), array([1, 1, 1, 1]),\n",
      "       array([2, 1, 2, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1]), array([1, 1]),\n",
      "       array([1]), array([1, 1, 1]), array([1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([2, 1, 1, 1]), array([1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 2, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 2, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n",
      "              1, 1])                                                           ,\n",
      "       array([1, 1, 2, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([2, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 2]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 2, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 3, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([2, 2, 1, 1]), array([1, 1, 1]),\n",
      "       array([2, 1, 1, 1, 1, 1, 1]), array([2, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2]), array([1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 2, 2, 1, 2, 2]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 2, 1]), array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([2, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1]), array([1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 2, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1]), array([1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1]), array([1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 2]), array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1]), array([1, 2, 1, 1, 2]),\n",
      "       array([1, 1, 1, 2, 1]), array([1, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]), array([2, 1, 1]), array([1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])], dtype=object)}}\n"
     ]
    }
   ],
   "source": [
    "print(test_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'tokens': array([array([ 49,  52,  63,  94, 107, 144, 183, 221], dtype=int32),\n",
      "       array([ 84,  94,  96, 167, 168, 173, 183], dtype=int32),\n",
      "       array([  9,  17,  41,  75,  86,  94, 106, 119, 144, 146, 161, 168, 186,\n",
      "              214], dtype=int32)                                              ,\n",
      "       ..., array([  9,  28,  66,  94, 183, 186, 217], dtype=int32),\n",
      "       array([  9,  12,  22,  57,  59,  94, 107, 129, 146, 186, 215], dtype=int32),\n",
      "       array([ 28,  78,  94, 101, 214, 217, 243], dtype=int32)],\n",
      "      dtype=object), 'counts': array([array([1, 1, 1, 3, 1, 1, 1, 1]), array([1, 1, 1, 2, 1, 1, 1]),\n",
      "       array([3, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 2, 1]), ...,\n",
      "       array([1, 1, 1, 1, 2, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1]),\n",
      "       array([1, 1, 1, 1, 1, 1, 1])], dtype=object)}\n"
     ]
    }
   ],
   "source": [
    "print(train_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<embedded_topic_model.models.etm.ETM at 0x7f83d6a92e90>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from embedded_topic_model.models.etm import ETM\n",
    "etm_instance = ETM(\n",
    "       diccionario,\n",
    "        embeddings=model, # You can pass here the path to a word2vec file or\n",
    "                                   # a KeyedVectors instance\n",
    "        num_topics=3,\n",
    "        epochs=30,\n",
    "        debug_mode=False,\n",
    "        eval_perplexity=True,\n",
    "        train_embeddings=False, # Optional. If True, ETM will learn word embeddings jointly with\n",
    "                            # topic embeddings. By default, is False. If 'embeddings' argument\n",
    "                            # is being passed, this argument must not be True\n",
    "    )\n",
    "\n",
    "etm_instance.fit(train_dataset, test_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "152.3\n"
     ]
    }
   ],
   "source": [
    "print(etm_instance._perplexity(test_dataset))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from embedded_topic_model.models.etm import ETM\n",
    "# Training an ETM instance\n",
    "perp =[]\n",
    "numk = range(1,10)\n",
    "for k in numk:\n",
    "    etm_instance = ETM(\n",
    "       diccionario,\n",
    "        embeddings=model, # You can pass here the path to a word2vec file or\n",
    "                                   # a KeyedVectors instance\n",
    "        num_topics=k,\n",
    "        epochs=30,\n",
    "        debug_mode=False,\n",
    "        eval_perplexity=True,\n",
    "        train_embeddings=False, # Optional. If True, ETM will learn word embeddings jointly with\n",
    "                            # topic embeddings. By default, is False. If 'embeddings' argument\n",
    "                            # is being passed, this argument must not be True\n",
    "    )\n",
    "\n",
    "    etm_instance.fit(train_dataset, test_dataset)\n",
    "    perp.append(etm_instance._perplexity(test_dataset))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAtjklEQVR4nO3deXhV5bn+8e+TCUIIYxIZFJkTFRUUEZwwqa1znU6r1lpntK221l89VdvTY09Pj7ba2qodtE5Vq9bWoVatOICCExhEmUNAQBmTgEACgYTk+f2xV2KMGXZCdtZO9v25rlzJXnuvtR8Ucu/1rnc9r7k7IiIiAElhFyAiIvFDoSAiIvUUCiIiUk+hICIi9RQKIiJSLyXsAvZGVlaWDx8+POwyRES6lHnz5pW5e3ZTz3XpUBg+fDiFhYVhlyEi0qWY2ZrmntPwkYiI1FMoiIhIPYWCiIjUi1komNkDZlZiZosabb/GzJaZ2WIz+1Ww7ctmNs/MFgbfC2JVl4iINC+WF5ofAu4GHq7bYGb5wBnAoe6+28xygqfKgNPdfb2ZjQOmA0NjWJuIiDQhZqHg7rPMbHijzd8GbnX33cFrSoLv8xu8ZjGQbmY96l7X0Z6dv47bphexfmslQ/qlc/2JuZw5QRkkItLZ1xTGAsea2Rwze8PMjmjiNecA78cyEG58eiHrtlbiwLqtldz49EKenb8uFm8nItKldHYopAADgMnA9cCTZmZ1T5rZQcAvgSubO4CZTTOzQjMrLC0tbXMBt00vorK65nPbKqtruG16UZuPJSLS3XR2KKwFnvaIuUAtkAVgZvsCzwDfcveVzR3A3e9194nuPjE7u8kb8lq0fmtlm7aLiCSSzg6FZ4F8ADMbC6QBZWbWD3gBuMHd34plAUP6pbdpu4hIIonllNTHgXeAXDNba2aXAQ8AI4Npqk8AF3lk6bergdHAT83sg+Arp9mD74XrT8wlPTX5c9vSU5O5/sTcWLydiEiXYl15Oc6JEyd6e3ofPTt/HT9/fgmbd1QxMCON/zrtQM0+EpGEYWbz3H1iU88l5B3NZ04Yyls3FNAzNYnTDx2iQBARCSRkKAD0TE3mqFFZzCwqoSufLYmIdKSEDQWA/Lwc1mzeyUdlO8IuRUQkLiR2KORGprTOXFYSciUiIvEhoUNh3/69GLtPb2YoFEREgAQPBYgMIc1dtYXyXdVhlyIiErqED4WC3Bz21DpvFpeFXYqISOgSPhQO378/fXqmaAhJRASFAinJSRw3NpuZRaXU1mpqqogktoQPBYCCvBzKKnazaP22sEsREQmVQgGYOjYbM5i5rO2tuEVEuhOFAjCwdw/G79ePGUW6riAiiU2hECjIzWHB2q2UVcRkwTcRkS5BoRDIz8vBHV4v0hCSiCQuhULgoCF9yMnsoZYXIpLQFAoBMyM/N4dZy0uprqkNuxwRkVAoFBrIz8uhfPceCld/GnYpIiKhUCg0cMyYLFKTjZmahSQiCUqh0EDvHikcOWKgWl6ISMJSKDSSn5fDipIKPtmyM+xSREQ6nUKhkYK8HAANIYlIQlIoNDIiK4MRWRkaQhKRhKRQaMLxudm8s3IzlVU1YZciItKpFApNKMjLYfeeWt5eqYV3RCSxKBSaMGnEAHqlJWsISUQSjkKhCT1SkjlmdBYzl5XgroV3RCRxxCwUzOwBMysxs0WNtl9jZsvMbLGZ/arB9hvNbIWZFZnZibGqK1oFeTms37aLok3lYZciItJpYnmm8BBwUsMNZpYPnAEc6u4HAbcH2w8EzgMOCvb5g5klx7C2VuUHU1M1hCQiiSRmoeDus4AtjTZ/G7jV3XcHr6n7jXsG8IS773b3VcAKYFKsaovGPn16ctCQPuqaKiIJpbOvKYwFjjWzOWb2hpkdEWwfCnzS4HVrg21fYGbTzKzQzApLS2O79kFBXg7z1nzK1p1VMX0fEZF40dmhkAIMACYD1wNPmpm15QDufq+7T3T3idnZ2bGosV5+Xg61DrOKNTVVRBJDZ4fCWuBpj5gL1AJZwDpgvwav2zfYFqpD9+3HgIw0DSGJSMLo7FB4FsgHMLOxQBpQBjwHnGdmPcxsBDAGmNvJtX1BcpIxdWw2rxeVUFOrqaki0v3Fckrq48A7QK6ZrTWzy4AHgJHBNNUngIuCs4bFwJPAEuAl4LvuHhc9JvLzcvh0ZzUffLI17FJERGIuJVYHdvfzm3nqm828/hfAL2JVT3tNHZNNcpIxc1kJh+/fP+xyRERiSnc0t6Jvr1QOH9Zf9yuISEJQKEQhPy+HJRu2s3HbrrBLERGJKYVCFLTwjogkCoVCFMbu05uh/dI1hCQi3Z5CIQpmRn5eNm+tKGP3nriYFCUiEhMKhSjl5+aws6qGuasat3MSEek+FApROmpUFj1SkjSEJCLdmkIhSulpyUwZNVAtL0SkW1MotEFBXg6rN+/ko9KKsEsREYkJhUIb5Odq4R0R6d4UCm2w34BejMnprfsVRKTbUii0UUFeDnNXbaFi956wSxER6XAKhTbKz8uhusZ5szi2q76JiIRBodBGh+/fn8yeKbquICLdkkKhjVKTkzhuTDYzi0qp1cI7ItLNKBTaIT8vh9Ly3SzZsD3sUkREOpRCoR2Oz83GTFNTRaT7USi0Q1bvHhyybz+Fgoh0OwqFdirIzeHDtVvZXLE77FJERDqMQqGdCvJycIfXizQ1VUS6D4VCOx00pA/ZmT2YobubRaQbUSi0U1KSkZ+bzazlpVTX1IZdjohIh1Ao7IWCvBzKd+1h3ppPwy5FRKRDKBT2wtGjs0hNNq2xICLdhkJhL2T2TOWI4QM0NVVEuo1WQ8HMRkSzLVEV5OVQXFLBJ1t2hl2KiMhei+ZM4akmtv2jtZ3M7AEzKzGzRQ223Wxm68zsg+DrlGB7qpn9xcwWmtlSM7sx+j9CuPLzIgvvvK5ZSCLSDaQ094SZ5QEHAX3N7OwGT/UBekZx7IeAu4GHG22/w91vb7Tta0APdz/YzHoBS8zscXdfHcX7hGpkVgb7D+zFjGUlXDhleNjliIjslWZDAcgFTgP6Aac32F4OXNHagd19lpkNj7IOBzLMLAVIB6qALtFtzszIz83h8bkfU1lVQ3pactgliYi0W7PDR+7+T3e/BDjN3S9p8PU9d397L97zajNbEAwv9Q+2/QPYAWwAPgZud/ctTe1sZtPMrNDMCktL4+Nu4oK8HHbvqeWdj8rCLkVEZK9Ec03hLDPrE4z7v2ZmpWb2zXa+3x+BUcB4IgHw62D7JKAGGAKMAP6fmY1s6gDufq+7T3T3idnZ2e0so2MdOXIAvdKSNQtJRLq8aELhK+6+nchQ0mpgNHB9e97M3Te5e4271wJ/JhIGAN8AXnL3ancvAd4CJrbnPcLQIyWZo0dnMXNZKe5aeEdEuq5oQiE1+H4q8Hd339beNzOzwQ0engXUzUz6GCgIXpMBTAaWtfd9wpCfm8O6rZUs31QRdikiIu3W0oXmOv8ys2VAJfBtM8sGdrW2k5k9DhwPZJnZWuC/gePNbDyRC8urgSuDl/8eeNDMFgMGPOjuC9r2RwlXfl5kKGvGshJyB2WGXI2ISPtYNMMdZjYA2ObuNcEn+Ux33xjz6loxceJELywsDLuMeif/bjaZPVJ48qopYZciItIsM5vn7k0O0UdzR3Mv4DtELhJD5GJwlxnv70wFednM+/hTtu2sDrsUEZF2ieaawoNE7hs4Kni8DvjfmFXUhRXk5VBT68wqjo+psiIibRVNKIxy918B1QDuvpPIuL80Mn6//vTvlaquqSLSZUUTClVmlk7k4jBmNgrQwsRNSE4ypo7N5vXlpdTUamqqiHQ90YTCzcBLwH5m9lfgNeBHsSyqK8vPy2HLjio+XLs17FJERNqs1Smp7v6ymc0jcu+AAd93d/VzaMbUsdkkGcxcVsJhw/q3voOISByJZvbRa+6+2d1fcPfn3b3MzF7rjOK6on690jhsWH+1vBCRLqnZUDCznsH9CVlm1t/MBgRfw4GhnVZhF5Sfl8Pi9dvZtL3Ve/xEROJKS2cKVwLzgLzge93XP4mskyDNKAgW3tEsJBHpalpqnf07dx8B/NDdR7r7iODrUHdXKLQgb1Amg/v21BCSiHQ5rV5TcPe7OqOQ7sTMyM/L4a0VZezeUxN2OSIiUYtmSqq0Q0FuDjuqanhv1adhlyIiEjWFQowcNXogaSlJGkISkS4lmimpT5vZqWamAGmDXmkpTBk5kJlFCgUR6Tqi+UX/ByIroxWb2a1mlhvjmrqN/NxsVpXtYFXZjrBLERGJSjQXml919wuAw4gsjPOqmb1tZpeYWWrLeye2grx9ADSEJCJdRlRDQmY2ELgYuByYD/yOSEi8ErPKuoFhA3sxKjtD9yuISJcRzTWFZ4DZQC/gdHf/qrv/zd2vAXrHusCuriAvhzmrNlOxe0/YpYiItCqaM4U/u/uB7n6Lu28AMLMeAM0t5yafyc/LobrGebNYPQRFJP5FEwpNrbL2TkcX0l0dMXwAmT1SNIQkIl1Cs62zzWwQkcZ36WY2gc9WW+tDZChJopCanMSxY7OYWVSCu2OmRetEJH61tJ7CiUQuLu8L/KbB9nLgphjW1O3k5+bw4sKNLF6/nXFD+4ZdjohIs5oNBXf/C/AXMzvH3Z/qxJq6neNzP+uaqlAQkXjW0vDRN939UWC4mV3X+Hl3/00Tu0kTsjN7cMi+fZlRVMI1XxoTdjkiIs1q6UJzRvC9N5DZxJe0QX5uDh98spXNFbvDLkVEpFktDR/dE3z/WePnzCyttQOb2QPAaUCJu48Ltt0MXAGUBi+7yd1fDJ47BLiHyIXsWuAId+82S5cV5OXwu9eKeWN5KWcftm/Y5YiINCmam9deD5bgrHt8BPBeFMd+CDipie13uPv44KsuEFKAR4Gr3P0g4HigOor36DIOHtqXrN491PJCROJaS7OP6twCvGRmdxKZonoycElrO7n7rIZh0oqvAAvc/cNg381R7tdlJCUZx+dm8/LijeypqSUlWU1nRST+RNMQbzpwFZF+R5cCp7j7+3vxnleb2QIze8DM+gfbxgJuZtPN7H0z+8+9OH7cKsjLYfuuPcxbo4V3RCQ+RTN89F/AXcBxwM3A62Z2ajvf74/AKGA8sAH4dbA9BTgGuCD4fpaZfamZeqaZWaGZFZaWljb1krh1zJgsUpKMGVpjQUTiVDRjGAOBSe7+TnDx+UTg2va8mbtvcvcad68F/gxMCp5aC8xy9zJ33wm8SKQLa1PHuNfdJ7r7xOzs7PaUEZo+PVM5YvgAXl/WtcJMRBJHNMNH1wLULa7j7mvc/cvteTMzG9zg4VnAouDn6cDBZtYruOg8FVjSnveIdwV5ORRtKmfd1sqwSxER+YJoho9OBz4AXgoejzez56LY73EijfNyzWytmV0G/MrMFprZAiAf+AGAu39KpJXGe8F7ve/uL7TrTxTn8vMiZzeahSQi8Sia2Uc3ExnmeR3A3T8ws5Gt7eTu5zex+f4WXv8okWmp3dqo7N7sNyCdmctKuHDy/mGXIyLyOdFcU6h2922NttXGophEYGYU5Obw9soydlXXhF2OiMjnRBMKi83sG0CymY0xs7uAt2NcV7eWn5fDrupa3lnZ7W7HEJEuLppQuAY4CNgNPA5sp52zjyRi8siBpKcm67qCiMSdaGYf7XT3H7v7EcFU0B93p55EYeiZmszRowcyY1lk4R0RkXjRUuvsfwHN/sZy96/GpKIEkZ+Xw6tLSyguqWDsPmo6KyLxoaXZR7d3WhUJKD9YeGfGshKFgojEjZZaZ79R93PQKjuPyJlDkbtXdUJt3dqQfunkDcpk5rISrpo6KuxyRESA6G5eOxVYCdwJ3A2sMLOTY11YIsjPy6Fwzadsq+xWXcJFpAuLZvbRr4F8dz/e3acSuRP5jtiWlRgK8nKoqXVmF6sXkojEh2hCodzdVzR4/BFQHqN6EsqE/frRNz1VU1NFJG5E0+ai0MxeBJ4kck3ha8B7ZnY2gLs/HcP6urWU5CSmjs3mjaJSamudpCQLuyQRSXDRnCn0BDYR6Vx6PJH1ldOB04mswSx7oSAvh807qvhw7dawSxERaflMwcySiSyTqWsIMTJ1bDZJBjOXlTBhWP/WdxARiaEWzxTcvQZoqtupdJD+GWlMGNZfq7GJSFyIZvjoLTO728yONbPD6r5iXlkCKcjLYdG67ZRsV/cQEQlXNKEwnkhDvP8hMj311+hu5w5Vd3fzTJ0tiEjIWp195O75nVFIIjtgcCaD+vRk5rJSzj1iWNjliEgCi+aO5n3M7H4z+3fw+MBgaU3pIGZGfl42b64oo2qP1i8SkfBEM3z0EDAdGBI8Xo7WU+hw+bk5VOzew3urt4RdiogksGhuXsty9yfN7EYAd99jZlpHsoMdPTqLZINpjxSyc3cNQ/qlc/2JuZw5YWjYpYlIAokmFHaY2UCCtRXMbDLQeM1m2UuvLNmEAzt2R/J23dZKbnx6IYCCQUQ6TTTDR9cBzwGjzOwt4GEiS3RKB7ptehG1jZY0qqyu4bbpReEUJCIJKZrZR++b2VQgFzAi6ymo13MHW7+1sk3bRURiodVQMLOewHeAY4gMIc02sz9pneaONaRfOuuaCIAh/dJDqEZEElU0w0cPE7l57S4ii+wcBDwSy6IS0fUn5pKemvy5bQZceszwUOoRkcQUzYXmce5+YIPHM81sSawKSlR1F5Nvm17E+q2VZPXuQfmuKu6fvYr83BxGZvcOuUIRSQTRnCm8H8w4AsDMjgQKW9vJzB4wsxIzW9Rg281mts7MPgi+Tmm0zzAzqzCzH7blD9FdnDlhKG/dUMCqW0/lvZ+cwFPfOZpde2r5+j3vUrRR6xqJSOxFEwqHA2+b2WozWw28AxxhZgvNbEEL+z0EnNTE9jvcfXzw9WKj534D/DuKmhLCQUP68uSVk0kyOO/ed1i0TjOBRSS2ogmFk4ARRBbZmRr8fBKRBXZOb24nd58FRH17rpmdCawCFke7TyIYnZPJ36+aQq+0FM6/913mrdEdzyISO62GgruvaemrHe95tZktCIaX+gOYWW/gR8DPWtvZzKaZWaGZFZaWJsaC9/sPzODJq6aQldmDC++fy9srysIuSUS6qWjOFDrSH4FRRNpxbyDShhvgZiLDShWtHcDd73X3ie4+MTs7O1Z1xp2h/dL525WT2bd/Opc89B4zl6nNtoh0vE4NBXff5O417l4L/BmYFDx1JPCr4JrFtcBNZnZ1Z9bWFeRk9uSJaVMYs09vpj1SyL8Xbgi7JBHpZjo1FMxscIOHZwGLANz9WHcf7u7Dgd8C/+fud3dmbV3FgIw0/nr5ZA4e2perH5/PM/PXhl2SiHQjMQsFM3ucyEylXDNbG6zB8KsGs5bygR/E6v27s77pqTxy2ZFMGj6A6578kMfmfBx2SSLSTZi7t/6qODVx4kQvLGz1lolua1d1Dd9+dB4zi0r56WkHcukxI8IuSUS6ADOb5+4Tm3qusy80SwfqmZrMPRdO5ORxg/if55fw+5krwi5JRLo4hUIXl5aSxF3nT+CsCUO5bXoRt01fRlc++xORcEXT+0jiXEpyEr/+2qH0TE3m9zNXsrOqhp+ediBmFnZpItLFKBS6iaQk4//OGkd6ajIPvLWKXdU1/O+ZB5OcpGAQkegpFLoRM+O/TjuAXmnJ3D1zBZVVNdz+tUNJSdYooYhER6HQzZgZPzwxl/S0ZG6bXsSu6lruPH8CaSkKBhFpnX5TdFPfzR/NT087kJcWb2TaI4Xsqq4JuyQR6QIUCt3YpceM4NazD+aN5aVc8uB77Ni9J+ySRCTOKRS6ufMmDeOOr49n7uotXHj/HLZVVoddkojEMYVCAjhzwlB+/40JLFy3jQvue5ctO6rCLklE4pRCIUGcNG4w935rIsWbKjjv3nco2b4r7JJEJA4pFBJIfm4OD15yBGs/reTr97zDuq2VYZckInFGoZBgjhqVxSOXHcnmHVV8/U/vsGbzjrBLEpE4olBIQIfv35/Hr5jMzqo9fO1P71C8qTzskkQkTigUEtS4oX3525VTcODce99l8fptYZckInFAoZDAxu6TyZNXTqFnShLn3/su8z/+NOySRCRkCoUENyIrgyevmkL/jDS+ed8c5ny0OeySJEaenb+Oo2+dwYgbXuDoW2fw7Px1YZckcUihIOzbvxdPXjmFwf3SuejBubyxvDTskqSDPTt/HTc+vZB1WytxYN3WSm58eqGCQb5AoSAA7NOnJ3+bNpmRWb254i+FvLx4Y9glSQe6bXoRlY36X1VW1/DjZxby2JyPef/jT9lZpTYoojWapZFtO6u56MG5LFy3jTvOHc9XDx0SdknSAYbf8EKrrzGD4QMzyBuUyQGD+3DA4D7kDcpk3/7pWrCpm2lpjWa1zpbP6dsrlUcvP5LLHnqP7z8xn11VNXz9iP3CLkv2wiPvrG72uaH9evLEtCks3bCdpRvKWbZxO0s3bOelxRup+7yY2SOFvMGfD4rcQZn0StOvj+5IZwrSpMqqGq58dB6zlpdy9mFDmfPRFtZvrWRIv3SuPzGXMycMDbtEicK9s1byfy8u46Ahmaws3cGu6tr659JTk7nl7IOb/H+5Y/ceijaVB2GxnWUbylm2sZyKoNOuGYwYmBEJi0FBWAzOZGg/nVV0BS2dKSgUpFm799Rwzh/eZtH67Z/b3tIvE4kP7s7vXivmt68Wc9ohg7nj3PG8sGADt00vane419Y6az+tZGlwNrF0w3aWbSxnzead9a/p0zOFvMF9OKDBENTYfTJJT0tu9rjPzl+3V3VJ2ykUpN2OuvU11m/9YvO8/r1SeWLaFEZmZ5Cq5T7jirtz67+Xcc+sj/iPw/fll+ccEtO1uit276FoY2T4qS4sijaWs6MqcmE7yWB4VkYkJBqExeC+PfnnB+u58emFn7sIrg8dsadQkHYbccMLtPQ3JC05idE5vYN/6J/9gx+QkdZpNcpnamud/35uMY+8u4YLJ+/Pz756EEkxDISW6vjk05311yqWbtjO0o3b+WTLZ00Y+6anUllVQ1VN7Rf2H9ovnbduKOjMkhOKLjRLuw3pl95kN9WczB78+NQDWBL8o59dXMpT76+tf36fPj3IC8aa68JiZFYGKTqriJmaWudHTy3gH/PWcuVxI7nh5LzQxveTkoz9B2aw/8AMTho3uH57+a5qijbWhUQ5j835uMn916uDb2hiFgpm9gBwGlDi7uOCbTcDVwB1d0fd5O4vmtmXgVuBNKAKuN7dZ8SqNone9SfmNnl6f9MpB3DG+KGcMf6zU/zNFbvrZ7DUhcXbKz+iuiZyrpGWksSY+rOKz4YS+uusYq9V19Tyg799wPMLNnDtCWP4/pfGxOUF38yeqUwcPoCJwwcA8EZRaZMfOnr1SKakfBc5mT07u8SEF7PhIzM7DqgAHm4UChXufnuj104ANrn7ejMbB0x391YHFDV81Dn25kJgdU0tK0sr6mew1IVFWcXu+tcM6tPzc1MeDxiUyQidVURtV3UNVz82n1eXbuKmU/KYdtyosEuKWt2d1g0/dCSbUetOj9Qkvnnk/lw5dRTZmT1CrLL7Ce2agpkNB55vLRQa7WPAZmCwu+9u7nWgUOjKSst318+JrwuLlaUV9WcVPVKSGLtP5udupDpgcCb9en12VqFZK5Gpw9MeKWR2cRk/P+MgLpwyPOyS2qyp/4/j9+vHXTNW8Mz8taSlJHHh5P2ZdpzCoaPEWyhcDGwHCoH/5+6fNtrnP4Cr3P2EZo45DZgGMGzYsMPXrFkTq/Klk1XtqWVFSUV9WNRdoNzcYE3pwX17csDgPiQZvLG8tD5EIPFmrZTvquayhwopXLOFX55zCF+b2P1uMlxVtoO7ZhTz7Px19eFw5dRRZPVWOOyNeAqFfYAywIGfEzkbuLTB6w8CngO+4u4rWzu+zhQSQ0n5rsi1ig2fhUVRMwsDJcqsla07q7jowfdYHLQjOb2btyNpGA49UpK5cMr+TDtupMKhneImFFp6zsz2BWYAl7j7W9EcX6GQuJqbKmvAqltP7exyOlVZxW6+ed8cPirdwR8uOIwTDtwn7JI6zUelFdw9YwXPfhAJh29N2Z8rEiwcOmLYtKVQ6NQreWY2uMHDs4BFwfZ+wAvADdEGgiS2If3Sm9yekmwsWtd9V5HbuG0X597zDqs37+D+iycmVCAAjMzuzW/OHc8r103lpHGD+PPsjzj2lzO55cWlbK5o8RJkt9AZLdBjOfvoceB4IAvYBPx38Hg8keGj1cCV7r7BzH4C3AgUNzjEV9y9pKX30JlC4mpq1kpqstEjJYnK6louP3YE135pbIvtFbqaT7bs5IL75rBlRxUPXHwEk0YMCLuk0K0sreCu14p57sP1kTOHo/Zn2rEjGdhNzxym3PIaG7Z9scNAW4dNdUezdEtNnUbn5+bwfy8u5W+FnzBsQC9uOftgjh6dFXape+2j0gouuG8OO6tq+Mulkxi/X7+wS4orK0oquHtGMf/8cD3pqcl8a8pwph03ssvfWV9b6yzZsJ3ZxWXMLi7l7ZVNr4zY1mFThYIknHdWbuamZxayqmwH5xy2Lz859YAue5Nc0cZyLrhvDu7Oo5cfyQGD+4RdUtxaUVLBXTMiZw7pqclcdNRwrji2a4XDpu276kPgzeKy+tl3BwzuwydbdtZ3qm1IZwoBhYK0ZFd1DXfNKOaeNz6ib3oqPz39QL566JC4vNO3OQvXbuPCB+bQIyWJv14+mdE5vcMuqUtYUVLOna+t4F8L4j8cKqtqmLt6C7OXlzK7uKx+Zl1W7x4cNyaLY8dmcfToLHIyezY5bNqeqdgKBUloSzds54anFvDh2m3k52bzv2cdzNBmLlTHk8LVW7jkwffo2yuVxy6fzLCBvcIuqctpGA69GoRDmGeN7l7fL2x2cRlzV2+hak8taSlJHDliAMeOyeLYMdnkDcps8gNMrGcfKRQkIdTUOg+9vZpfv1wEwA+/kstFRw2PaUvpvfH2ijIu+0shg/v25NHLj2x2tpVEp3hTOXfOWMHzQThcfPRwLj+m88KhpHwXbxaXBcNCZfVtXvIGZdaHwKQRA+iZ2jkTIxQKIoG1n+7kJ88u4vWiUg7drx+/POdg8gbF1xj9jGWbuOrR9xkxMINHLz9SrR060PJN5dz5WjEvLNwQ03DYVV3De6u3MLu4jFnLS1m2MTIkNDAjrT4EjhmTxT59wmn4p1AQacDdee7D9fzPv5awrbKaK6eO5JqCMZ32Ka0l/164ge89MZ+8QX14+NJJXfbieLxbvqmc371WzIsLN5CRlsLFRw3n8mNHfK63Vlu4O0Wbypm9vIxZxaXMXbWF3XtqSUtOYuLw/hw3Nptjx2RxwKA+oaxv0ZhCQaQJn+6o4n9fWMpT769lRFYGt5x9MJNHDgytnqffX8sP//4hhw3rzwOXHEGfnqmh1ZIoijaWc+eMYl5YsIHePVK45OjhXHZMdOFQWr6bt1ZEQuDN4jJKyiNDQmP36c2xYyIhMGnEAHqlxd+yNQoFkRbMLi7lpmcW8smWSs47Yj9uPPkA+vbq3F/Ij835mB8/u5ApIwdy30UT4/IXSXdWtPGzYaW6cBjctye/n7my/oLutSeMYUi/dGYVlzJ7eRlLNkTWLh+QkcYxo7Pqh4UG9Y3/NSAUCiKtqKyq4bevLufPsz9iYO8e/OyrB3HyuEGdMn31/jdX8fPnl1CQl8MfLjgsLoaxEtWyjdu587ViXly4sdnXpCYbE/cfwLFjszhuTDYHDo6PIaG2UCiIRGnRum386KkFLF6/nS8fuA8/P2NcTD/53T2jmNtfXs4pBw/it+dOIC1FCwvFg0m/eLV+OKihgRlpzPrPfDJ6dO0zubhpiCcS78YN7cs/v3s0N52Sx+ziUk74zRs88u4aams79sOTu/Orl5Zx+8vLOXvCUO48T4EQT0qbCASALTuqunwgtEZ/C0UaSUlOYtpxo3j52qmM368f//XsIr5+zzsUN7OGQ1u5Oz/71xL+8PpKvnHkMG7/2qFaejTONHdfSCLcL6K/iSLNGDawF49cNolff+1QVpRWcMqds7njleXs3lPT+s7NqKl1bnx6IQ+9vZrLjhnBL84c1+XGoxPB9Sfmkt7o2k56ajLXn5gbUkWdR6Eg0gIz45zD9+XV66ZyysGD+d1rxZx655sUrt7S5mPtqanluic/4In3PuF7BaP5yakHdKk+TInkzAlDueXsSDsUI9JwLlGWetWFZpE2mFlUwk+eWcS6rZV8c/IwfnRSHplR3E+we08N33t8PtMXb+I/T8rlO8eP7oRqRZqmC80iHSQ/N4eXf3Aclx49gsfmfMyXfzOLlxc3P30RIi0Ppj08j+mLN3Hz6QcqECSuKRRE2iijRwo/Pf1Anv7O0fTrlcq0R+bx7UfnUbL9iytiVezew8UPzmVWcSm/POdgLj56RAgVi0RPw0cie6G6ppZ7Z33E714rpkdKEjedcgA9k5O4/ZXlrN9aSUqysafG+e154zljfPcfj5auoaXho+494VYkxlKTk/hu/mhOOXgwNz69gBufXkiSQd1tDdU1Tlqy0YU/e0mC0fCRSAcYkZXB41dMpl96Ko3vc6uqcW6bXhROYSJtpFAQ6SBmxrbK6iafW7+1spOrEWkfhYJIB0rkO2Gle1AoiHSgRL4TVroHXWgW6UB1d7zu7cLqImFRKIh0sDMnDFUISJcVs+EjM3vAzErMbFGDbTeb2Toz+yD4OqXBczea2QozKzKzE2NVl4iINC+W1xQeAk5qYvsd7j4++HoRwMwOBM4DDgr2+YOZafkpEZFOFrNQcPdZQLStJM8AnnD33e6+ClgBTIpVbSIi0rQwZh9dbWYLguGl/sG2ocAnDV6zNtgmIiKdqLND4Y/AKGA8sAH4dVsPYGbTzKzQzApLS0s7uDwRkcTWqbOP3H1T3c9m9mfg+eDhOmC/Bi/dN9jW1DHuBe4NjlFqZmv2oqQsoGwv9o8V1dU2qqttVFfbdMe69m/uiU4NBTMb7O4bgodnAXUzk54DHjOz3wBDgDHA3NaO5+7Ze1lPYXOdAsOkutpGdbWN6mqbRKsrZqFgZo8DxwNZZrYW+G/geDMbDziwGrgSwN0Xm9mTwBJgD/Bdd2//QrgiItIuMQsFdz+/ic33t/D6XwC/iFU9IiLSukTvfXRv2AU0Q3W1jepqG9XVNglVV5deeU1ERDpWop8piIhIAwoFERGpl3Ch0FSjvnhgZvuZ2UwzW2Jmi83s+2HXBGBmPc1srpl9GNT1s7BrasjMks1svpk93/qrO4eZrTazhUHTx8Kw66ljZv3M7B9mtszMlprZlDioKbdBg8wPzGy7mV0bdl0AZvaD4O/8IjN73Mx6hl0TgJl9P6hpcSz+WyXcNQUzOw6oAB5293Fh11PHzAYDg939fTPLBOYBZ7r7kpDrMiDD3SvMLBV4E/i+u78bZl11zOw6YCLQx91PC7seiIQCMNHd4+qGJzP7CzDb3e8zszSgl7tvDbmsekETzHXAke6+NzeldkQtQ4n8XT/Q3SuDKfMvuvtDIdc1DniCSG+4KuAl4Cp3X9FR75FwZwptbNTXadx9g7u/H/xcDiwlDvo/eURF8DA1+IqLTxJmti9wKnBf2LXEOzPrCxxHMC3c3aviKRACXwJWhh0IDaQA6WaWAvQC1odcD8ABwBx33+nue4A3gLM78g0SLhS6AjMbDkwA5oRcClA/RPMBUAK84u5xURfwW+A/gdqQ62jMgZfNbJ6ZTQu7mMAIoBR4MBhuu8/MMsIuqpHzgMfDLgLA3dcBtwMfE+nTts3dXw63KiDSBeJYMxtoZr2AU/h8i6C9plCIM2bWG3gKuNbdt4ddD4C717j7eCI9qSYFp7ChMrPTgBJ3nxd2LU04xt0PA04GvhsMWYYtBTgM+KO7TwB2ADeEW9JnguGsrwJ/D7sWgKCD8xlEwnQIkGFm3wy3KnD3pcAvgZeJDB19AHRo9weFQhwJxuyfAv7q7k+HXU9jwXDDTJpePKmzHQ18NRi/fwIoMLNHwy0pIviUibuXAM8QH2uDrAXWNjjL+weRkIgXJwPvN2yaGbITgFXuXuru1cDTwFEh1wSAu9/v7oe7+3HAp8Dyjjy+QiFOBBd07weWuvtvwq6njpllm1m/4Od04MvAslCLAtz9Rnff192HExl2mOHuoX+SM7OMYKIAwfDMV/is8WNo3H0j8ImZ5QabvkSk11i8OJ84GToKfAxMNrNewb/NLxG5zhc6M8sJvg8jcj3hsY48fqd2SY0HTTXqc/dmezJ1oqOBC4GFwfg9wE11S5aGaDDwl2BmSBLwpLvHzfTPOLQP8Ezk9wgpwGPu/lK4JdW7BvhrMFTzEXBJyPUA9eH5ZYIGmfHA3eeY2T+A94k06ZxP/LS7eMrMBgLVRJqHbu3IgyfclFQREWmeho9ERKSeQkFEROopFEREpJ5CQURE6ikURESknkJBEo6ZvW5mMV+I3cy+F3Qj/Wuj7ePN7JS9OO6QYLpkhzCzi83s7o46nnRtCXefgsjeMLOUoBFZNL4DnODuaxttH0+ks2u77kFx9/XAf7RnX5HW6ExB4pKZDQ8+Zf856Bv/cnBH9ec+6ZtZVtDqou4T77Nm9kqwpsHVZnZd0ADuXTMb0OAtLgz69y8ys0nB/hkWWW9jbrDPGQ2O+5yZzQBea6LW64LjLKrrb29mfwJGAv82sx80eG0a8D/AucH7n2tmA4K6FwR1HhK89mYze8TM3jGzYjO7osF/m0XBz8lmdnvw3gvM7Jpg+60WWZtjgZnd3ob/7qcG75cV7T7SvehMQeLZGOB8d78i6Gd/DtBaf6NxRDrM9gRWAD9y9wlmdgfwLSKdVSGylsD4oFndA8F+PybSLuPSoLXHXDN7NXj9YcAh7v65tutmdjiRO4OPBAyYY2ZvuPtVZnYSkN9wXQV3rzKznxJZb+Hq4Bh3AfPd/UwzKwAeJnI2AXAIMBnIAOab2QuN/rzTgOHAeHffEwTMQOAsIM/dva5NSWvM7CzgOuAUd/80mn2k+9GZgsSzVe7+QfDzPCK//Foz093L3b0U2Ab8K9i+sNH+j0P9+hp9gl+cXwFuCNqMvE4kWIYFr3+lcSAEjgGecfcdwboTTwPHRlFn42M8EtQzAxhoZn2C5/7p7pVBsMzki831TgDuqRvSCmrcBuwC7jezs4GdUdRQAPwIOFWBkNgUChLPdjf4uYbPzmz38Nnf3cZLJDbcp7bB41o+f2bcuL+LE/mkf467jw++hgWtiiHSajoMTdXZ8g6RgJhEpBPqaURaLLdmJZAJjG1rgdK9KBSkK1oNHB783N4LrucCmNkxRBZQ2QZMB64JumJiZhOiOM5s4Mygm2YGkWGb2a3sU07kF3DDY1wQvOfxQFmDtTTOsMg62QOJNHJ8r9GxXgGutMjqYATDR72BvkEzxR8AhwbPnWVmtzRT0xoiw3MPm9lBrdQv3ZhCQbqi24Fvm9l8oL0XRHcF+/8JuCzY9nMiy40uMLPFweMWBUuoPgTMJbJS3n3uPr+V3WYCB9ZdaAZuBg43swXArcBFDV67IHj9u8DPg5lHDd1HpM3zAjP7EPgGkcB5Pjjem0SuEwCMAppduMndlxEJp7+b2ahW/gzSTalLqkicMrObgQp3j3r2UCvHexT4QXC9RaRJmn0kkiDiYREiiX86UxARkXq6piAiIvUUCiIiUk+hICIi9RQKIiJST6EgIiL1/j8JAvhZBFSxjAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(numk, perp, '-o')\n",
    "plt.xlabel('number of topics, k')\n",
    "plt.ylabel('perplexity test')\n",
    "plt.xticks(numk)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<embedded_topic_model.models.etm.ETM at 0x7f83d4020250>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from embedded_topic_model.models.etm import ETM\n",
    "etm_instance = ETM(\n",
    "       diccionario,\n",
    "        embeddings=model, # You can pass here the path to a word2vec file or\n",
    "                                   # a KeyedVectors instance\n",
    "        num_topics=5,\n",
    "        epochs=30,\n",
    "        debug_mode=False,\n",
    "        eval_perplexity=True,\n",
    "        train_embeddings=False, # Optional. If True, ETM will learn word embeddings jointly with\n",
    "                            # topic embeddings. By default, is False. If 'embeddings' argument\n",
    "                            # is being passed, this argument must not be True\n",
    "    )\n",
    "\n",
    "etm_instance.fit(train_dataset, test_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['falso', 'noticia', 'red', 'social', 'desinformación', 'información', 'difundir', 'año', 'bolsonaro', 'medio', 'acusar', 'rumor', 'circular', 'gobierno', 'mentira', 'mensaje', 'twitter', 'chile', 'desmentir', 'facebook'], ['fake', 'new', 'empty', 'social', 'video', 'trump', 'news', 'the', 'chile', 'facebook', 'twitter', 'clinic', 'falso', 'instagram', 'red', 'whatsapp', 'donald', 'cnn', 'gonzalo', 'usuario'], ['falso', 'noticia', 'información', 'desmentir', 'acusar', 'difundir', 'incendio', 'bolsonaro', 'investigar', 'red', 'revelar', 'acusación', 'entregar', 'fiscalía', 'servel', 'rumor', 'publicar', 'presunto', 'denuncia', 'declaración'], ['desinformación', 'social', 'red', 'coronavirus', 'información', 'falso', 'facebook', 'noticia', 'twitter', 'pandemia', 'salud', 'virus', 'difundir', 'vacuna', 'chile', 'generar', 'medio', 'circular', 'comunicación', 'viral'], ['chile', 'fake', 'new', 'diputado', 'kast', 'boric', 'campaña', 'empty', 'carrera', 'partido', 'candidato', 'gonzalo', 'acusar', 'gobierno', 'electoral', 'chileno', 'elección', 'plebiscito', 'presidencial', 'senador']]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "## extrayendo resultados del análisis de tópicos\n",
    "topics = etm_instance.get_topics(20)\n",
    "dist = etm_instance.get_document_topic_dist()\n",
    "d_topic = etm_instance.get_topic_word_dist()\n",
    "\n",
    "##creando las entradas para visualización\n",
    "true_k=5\n",
    "nDoc = len(dist)\n",
    "nVocab = len(diccionario)\n",
    "dist_doc = np.array(dist).reshape(nDoc,true_k)\n",
    "dist_topic= np.array(d_topic).reshape(true_k,nVocab)\n",
    "print(topics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.07510854, 0.060062986, 0.022908876, 0.014163119, 0.013824047, 0.012565749, 0.010184752, 0.0093748765, 0.008780127, 0.008416205, 0.007405679, 0.007181848, 0.0070761386, 0.007041611, 0.006649113]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.22064675, 0.2020547, 0.07345401, 0.017528433, 0.013129451, 0.012428928, 0.012198017, 0.010430097, 0.009724379, 0.00737339, 0.007310603, 0.0063938107, 0.0063826814, 0.006169194, 0.006052251]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.19212076, 0.105001464, 0.093099676, 0.018873764, 0.016607337, 0.015213338, 0.012450295, 0.010690726, 0.010395014, 0.010346127, 0.007457281, 0.0070123835, 0.006817221, 0.006430279, 0.0063075963]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.06607425, 0.058118068, 0.057252318, 0.025862245, 0.0234483, 0.020804599, 0.019326242, 0.015418969, 0.012746869, 0.012335748, 0.011888135, 0.009282358, 0.008691432, 0.007950672, 0.007768482]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.031666886, 0.02515148, 0.021009568, 0.019590655, 0.019548267, 0.019146357, 0.018758547, 0.016667714, 0.016119698, 0.015064782, 0.014656395, 0.013127606, 0.012433674, 0.01132072, 0.01064152]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Generando algunos gráficos de los resultados\n",
    "from matplotlib.pylab import hist, show\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "dist_sum = sum(dist_doc)/nDoc\n",
    "w=np.arange(0,true_k)\n",
    "plt.bar(w,height=dist_sum,alpha=0.5,tick_label=w)\n",
    "show()\n",
    "\n",
    "#distribución de tópicos en el documento 100\n",
    "plt.bar(w,height=dist_doc[51],alpha=0.5,tick_label=w)\n",
    "show()\n",
    "\n",
    "#frecuencia de palabras por tópico\n",
    "n_top_words=15\n",
    "numo =np.arange(0,n_top_words)\n",
    "\n",
    "for idx,topic in enumerate(dist_topic):\n",
    "    d =[]\n",
    "    s = []\n",
    "    for i in topic.argsort()[:-n_top_words - 1:-1]:\n",
    "        s.append(diccionario[i])\n",
    "        d.append(topic[i])\n",
    "    print(d)\n",
    "    \n",
    "    plt.barh(numo,width=d,alpha=0.5,tick_label=s)\n",
    "    show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "doc_l = np.zeros(len(train_dataset['counts']))\n",
    "term_f= np.zeros(len(diccionario))\n",
    "for i in range(0,len(train_dataset['counts'])):\n",
    "        for j in range(0,len(train_dataset['counts'][i])):\n",
    "                js = train_dataset['tokens'][i][j]\n",
    "             \n",
    "                term_f[js] = term_f[js] + train_dataset['counts'][i][j]\n",
    "                doc_l[i] = doc_l[i]+ train_dataset['counts'][i][j]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/past/builtins/misc.py:45: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n",
      "  from imp import reload\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/sklearn/linear_model/_least_angle.py:34: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  method='lar', copy_X=True, eps=np.finfo(np.float).eps,\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/sklearn/linear_model/_least_angle.py:164: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  method='lar', copy_X=True, eps=np.finfo(np.float).eps,\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/sklearn/linear_model/_least_angle.py:281: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  eps=np.finfo(np.float).eps, copy_Gram=True, verbose=0,\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/sklearn/linear_model/_least_angle.py:865: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/sklearn/linear_model/_least_angle.py:1121: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/sklearn/linear_model/_least_angle.py:1149: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  eps=np.finfo(np.float).eps, positive=False):\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/sklearn/linear_model/_least_angle.py:1379: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/sklearn/linear_model/_least_angle.py:1621: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/sklearn/linear_model/_least_angle.py:1755: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  eps=np.finfo(np.float).eps, copy_X=True, positive=False):\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/sklearn/decomposition/_lda.py:28: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  EPS = np.finfo(np.float).eps\n",
      "/home/eliana/anaconda3/envs/etmEnv/lib/python3.7/site-packages/pyLDAvis/_prepare.py:247: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
      "  by='saliency', ascending=False).head(R).drop('saliency', 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.1/pyLDAvis/js/ldavis.v1.0.0.css\">\n",
       "\n",
       "\n",
       "<div id=\"ldavis_el352261402038358370083290274933\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "var ldavis_el352261402038358370083290274933_data = {\"mdsDat\": {\"x\": [0.07941233704991883, -0.04835020517704908, -0.16539341619376877, 0.20377384821953057, -0.06944256389863163], \"y\": [0.04437931037709686, -0.1035913576181866, 0.05210681758040964, 0.0021177416749331244, 0.0049874879857469984], \"topics\": [1, 2, 3, 4, 5], \"cluster\": [1, 1, 1, 1, 1], \"Freq\": [21.748418216854336, 21.27133443319339, 19.396328860528243, 18.887837454700353, 18.696081034723676]}, \"tinfo\": {\"Term\": [\"fake\", \"new\", \"falso\", \"noticia\", \"informaci\\u00f3n\", \"empty\", \"desinformaci\\u00f3n\", \"social\", \"red\", \"coronavirus\", \"boric\", \"kast\", \"diputado\", \"chile\", \"partido\", \"bolsonaro\", \"carrera\", \"trump\", \"campa\\u00f1a\", \"desmentir\", \"candidato\", \"pandemia\", \"gonzalo\", \"acusar\", \"incendio\", \"plebiscito\", \"facebook\", \"difundir\", \"video\", \"investigar\", \"boric\", \"partido\", \"kast\", \"diputado\", \"plebiscito\", \"carrera\", \"candidato\", \"elecci\\u00f3n\", \"juan\", \"senador\", \"antonio\", \"parlamentario\", \"jos\\u00e9\", \"gonzalo\", \"camila\", \"diputada\", \"republicano\", \"electoral\", \"presidencial\", \"vallejo\", \"campa\\u00f1a\", \"jorge\", \"constituyente\", \"bachelet\", \"chile\", \"convenci\\u00f3n\", \"alcalde\", \"debate\", \"chileno\", \"derecha\", \"gobierno\", \"pol\\u00edtico\", \"acusar\", \"a\\u00f1o\", \"empty\", \"fake\", \"new\", \"noticia\", \"presidente\", \"coronavirus\", \"desinformaci\\u00f3n\", \"pandemia\", \"vacuna\", \"virus\", \"social\", \"poblaci\\u00f3n\", \"red\", \"salud\", \"viral\", \"sistema\", \"herramienta\", \"detectar\", \"plataforma\", \"facebook\", \"sanitario\", \"ciudadan\\u00eda\", \"usuario\", \"regi\\u00f3n\", \"situaci\\u00f3n\", \"internet\", \"estudio\", \"generar\", \"comunidad\", \"peligro\", \"comunicaci\\u00f3n\", \"twitter\", \"familia\", \"organizaci\\u00f3n\", \"acci\\u00f3n\", \"empresa\", \"mundial\", \"medio\", \"mundo\", \"combatir\", \"circular\", \"informaci\\u00f3n\", \"difundir\", \"nacional\", \"falso\", \"noticia\", \"chile\", \"gente\", \"fiscal\\u00eda\", \"servel\", \"informaci\\u00f3n\", \"falso\", \"incendio\", \"acusaci\\u00f3n\", \"presunto\", \"investigar\", \"desmentir\", \"noticia\", \"bolsonaro\", \"delito\", \"entregar\", \"multa\", \"revelar\", \"acusar\", \"difundir\", \"violaci\\u00f3n\", \"confirmar\", \"autoridad\", \"v\\u00edctima\", \"recibir\", \"fuente\", \"denuncia\", \"declaraci\\u00f3n\", \"declarar\", \"ministerio\", \"aclarar\", \"prensa\", \"revisar\", \"supuesto\", \"periodista\", \"carabinero\", \"publicar\", \"hijo\", \"rumor\", \"dato\", \"red\", \"circular\", \"compartir\", \"haber\", \"mensaje\", \"desinformaci\\u00f3n\", \"new\", \"fake\", \"empty\", \"trump\", \"clinic\", \"news\", \"video\", \"the\", \"donald\", \"cnn\", \"online\", \"instagram\", \"whatsapp\", \"tema\", \"voz\", \"montaje\", \"daniel\", \"covid\", \"digital\", \"ee\", \"ojo\", \"referir\", \"uu\", \"usuario\", \"gabriel\", \"mapuche\", \"crear\", \"aparecer\", \"incluir\", \"pol\\u00e9mico\", \"imagen\", \"twitter\", \"viralizar\", \"lanzar\", \"social\", \"facebook\", \"chile\", \"gonzalo\", \"foto\", \"generar\", \"buscar\", \"pol\\u00edtico\", \"mensaje\", \"compartir\", \"red\", \"chileno\", \"falso\", \"desinformaci\\u00f3n\", \"bolsonaro\", \"a\\u00f1o\", \"responsable\", \"cuenta\", \"director\", \"medio\", \"mundo\", \"ministro\", \"ministerio\", \"explicar\", \"principal\", \"leer\", \"asegurar\", \"recordar\", \"mandatario\", \"ni\\u00f1o\", \"canal\", \"joven\", \"semana\", \"presidente\", \"\\u00e9l\", \"instituci\\u00f3n\", \"cadena\", \"relacionado\", \"oficial\", \"noticia\", \"completo\", \"p\\u00fablico\", \"recibir\", \"cargo\", \"m\\u00e9dico\", \"mill\\u00f3n\", \"relaci\\u00f3n\", \"falso\", \"rumor\", \"circular\", \"mentira\", \"mensaje\", \"difundir\", \"red\", \"ciudadano\", \"pa\\u00eds\", \"empresa\", \"gobierno\", \"hijo\", \"persona\", \"social\", \"desinformaci\\u00f3n\", \"publicar\", \"anunciar\", \"acusar\", \"twitter\", \"informaci\\u00f3n\", \"desmentir\", \"facebook\", \"chile\", \"gente\"], \"Freq\": [1874.0, 1700.0, 2257.0, 1446.0, 1004.0, 691.0, 744.0, 760.0, 785.0, 231.0, 186.0, 197.0, 200.0, 460.0, 148.0, 154.0, 181.0, 144.0, 251.0, 252.0, 165.0, 145.0, 164.0, 320.0, 153.0, 101.0, 312.0, 298.0, 181.0, 133.0, 162.4179799489907, 127.79410570412286, 165.82737398142982, 166.1869519657848, 77.1242159897656, 136.74292364859718, 124.3297645151783, 82.95033686260977, 38.57455899684579, 70.77158996221364, 41.87289736012643, 62.40907516347369, 46.8378686993616, 111.36109792489039, 64.97041454539622, 58.635540676099865, 63.96641425544599, 90.27169982525041, 74.53443918299169, 48.16582415142628, 159.12819769936863, 49.76264540222474, 27.55633870390734, 37.41281178037589, 268.62926129801644, 47.72608494155258, 40.71577186710091, 35.250473288769854, 89.96961292039076, 40.19120230597239, 96.03333778056798, 67.17750080040223, 105.47449172778947, 68.70927425636422, 141.3917296023267, 213.35926358430774, 178.2235472936428, 70.49314890054893, 49.88489591261516, 214.57604587651542, 548.2104054299109, 102.3482736498565, 65.96580289459855, 77.01464751422279, 482.1988659761971, 44.534975713934315, 475.0158385288214, 98.63447895843794, 57.29503140024131, 39.535577267214165, 50.61875328270744, 36.62797153037681, 45.07209244998038, 160.34758547116138, 45.576345934477715, 46.2260191139013, 56.68093367582133, 28.628630727916303, 55.51058311320141, 55.52891173597912, 18.655692492201812, 62.39560430831892, 40.58902104302324, 20.788371089636264, 57.86935400419406, 105.75929061997586, 32.91514658691718, 30.662848999217005, 26.404142884472858, 46.59359222571588, 38.366362584673645, 61.81328418135819, 47.40808392278218, 46.255409045071204, 60.75547847150274, 194.54782196286806, 72.11180273778884, 51.38254763827098, 172.61334400958532, 127.92939800959223, 64.45419377533669, 48.81139035365772, 48.6485206094034, 47.72036029567914, 704.3491443602994, 1453.4969304593048, 94.19317764291175, 53.052454738714374, 43.557045577461984, 78.64387217299388, 142.79018174208932, 794.3925777970223, 80.88109720347992, 35.27233605863536, 51.57594639106125, 32.13246059957485, 56.418343341249454, 125.64343817480811, 115.09708586358781, 13.718093108104291, 28.227394275366787, 24.558245947843986, 21.681776522878096, 31.563196644069638, 28.936506373518856, 42.9473730619971, 39.97317622174947, 21.043717610562716, 19.577654893274058, 24.41169710065979, 28.147986346727627, 19.33839006729833, 31.522439309268112, 39.051322039004106, 34.300973463238435, 47.251719643536475, 35.34098128887201, 47.26365197070155, 32.58255981744831, 78.2740158295931, 37.39172099129304, 33.0940257925962, 32.05023781135349, 32.3448433403917, 33.56381493563223, 1488.5775468400732, 1625.5489870974648, 541.1504379096689, 91.5664120781316, 47.10448886533856, 89.8652429431419, 96.72730689954211, 76.84061851027884, 34.36495584095888, 29.574815017016714, 10.905527698263002, 45.44969142499481, 37.80279416984166, 18.662888354232116, 15.140991251356366, 13.310343644862002, 15.043601086862973, 9.420686618388014, 21.078518473683655, 7.170154672227565, 12.68733270583761, 10.512006389148729, 8.448543166359746, 27.37741866225865, 15.310705753093707, 10.90885625761273, 14.868713209707556, 11.677822937460748, 7.585788473337286, 9.897281255813002, 25.028184768166152, 53.85868039690724, 16.004173056606646, 16.43157345653074, 129.13549180915908, 54.32124465494491, 71.64145168875955, 28.673139936648056, 22.618716042780175, 25.080331912093513, 22.038397458125967, 25.920446226421284, 26.10406846287008, 21.83964447082742, 44.58814945624973, 22.969356313407555, 47.022497040078605, 24.02302331102431, 64.02825729609056, 68.36540955950936, 25.01854376637118, 38.00144195130746, 21.217227004484545, 61.374385225628956, 44.7076476808334, 23.740220182324737, 18.352950003590333, 24.219439352441928, 12.929318539943127, 16.051055103168856, 29.03820651678094, 15.06463204635383, 38.435692354367355, 11.331267616382759, 20.9254657046988, 20.164905220577655, 35.805943985712446, 37.034208511456065, 41.608631508635696, 22.99733818801294, 18.230835648463728, 17.072981158630974, 21.877810297341387, 438.0037033319749, 20.87498726616327, 35.20279710788352, 26.261237009594616, 19.403483903347276, 28.228710981296437, 35.52748569857137, 25.403168074526377, 547.7220209361202, 52.372953929908505, 51.602078729537666, 48.488032784789795, 48.18243872890755, 74.27134951446163, 167.06083220943273, 32.66370957690245, 27.94470397107651, 33.57432498744319, 51.35028759193036, 32.493974341668, 30.12703984936822, 103.28321827347051, 100.81056600461585, 39.86446138083956, 31.145671987213152, 54.00522254508699, 47.65503497731711, 91.63454688781049, 46.09025771537735, 45.8686857250642, 46.408395824535766, 34.67344756784498], \"Total\": [1874.0, 1700.0, 2257.0, 1446.0, 1004.0, 691.0, 744.0, 760.0, 785.0, 231.0, 186.0, 197.0, 200.0, 460.0, 148.0, 154.0, 181.0, 144.0, 251.0, 252.0, 165.0, 145.0, 164.0, 320.0, 153.0, 101.0, 312.0, 298.0, 181.0, 133.0, 186.98447590830267, 148.00463290951933, 197.26436475801566, 200.4287096290449, 101.14317262376323, 181.7367192796431, 165.34563025213595, 113.17905076406267, 53.64578261253078, 98.73015340183476, 58.55025916369475, 90.5286443998939, 68.49703910486744, 164.850244723472, 96.42068092350927, 87.15867554520398, 95.20780449982593, 135.9492405558568, 115.45126618599794, 75.52214592713834, 251.50745012275556, 80.42607676995745, 45.162344315720574, 62.14578947120871, 460.0027947799535, 84.39683197032441, 72.29977377283082, 64.74900047970175, 173.85244745632983, 79.57806120523121, 206.65932348237558, 162.70295553929182, 320.16898342254615, 185.76538437859347, 691.0625863499661, 1874.2741549297057, 1700.1381589352945, 1446.5740770018142, 121.07182570127895, 231.72997535507605, 744.8854446727778, 145.25570983684204, 96.62036105870416, 114.53548846802002, 760.0130661859155, 73.30386267647899, 785.996312630443, 165.6796695509613, 97.2217682614343, 67.52613404476539, 89.13973414240033, 67.68084008746975, 85.44762736997257, 312.54487169983537, 92.13675428391743, 100.26898115758661, 123.55737971732786, 63.8575976461328, 124.01908067172074, 127.53783956674562, 43.553834186900474, 147.16547865544598, 95.94389754908615, 49.35657274410731, 141.7116507373849, 260.69994394342103, 81.7146225623605, 76.40129753296782, 65.95847540129952, 120.08295210008272, 99.0176645778653, 175.38120394973015, 129.53642345056147, 126.0213174362556, 184.57954316846138, 1004.3479208681533, 298.4321985936426, 155.00561212259288, 2257.430807619236, 1446.5740770018142, 460.0027947799535, 147.23239604221527, 60.11454138570557, 59.6229104319469, 1004.3479208681533, 2257.430807619236, 153.26389067558455, 86.86655933601875, 73.34723456892276, 133.9238422228383, 252.79439405536846, 1446.5740770018142, 154.24376878309283, 75.51489785661009, 118.19104522795459, 74.01099893540065, 137.53100917480486, 320.16898342254615, 298.4321985936426, 35.60105918359967, 73.35209775338265, 64.04952121615904, 57.377526713444865, 87.09088622381142, 80.69948968104227, 119.78731907445518, 112.07643606479033, 59.68570475084367, 56.43260609270635, 71.89388078830805, 84.86009624149446, 58.36422066640428, 99.60787955220502, 126.72051434635196, 109.81454932072413, 168.84676193429584, 116.21443836284126, 185.57878897165895, 112.05840792717855, 785.996312630443, 184.57954316846138, 133.11547938262143, 130.58452609063346, 178.94832503051006, 744.8854446727778, 1700.1381589352945, 1874.2741549297057, 691.0625863499661, 144.8797435063469, 85.28734241013116, 166.22157456522294, 181.51315542706627, 148.74498726289156, 84.21241923060192, 73.88609932471685, 30.455542412514255, 141.71493926516126, 118.53585470563232, 62.95037343145343, 56.4574539105247, 52.43906240607936, 59.84912399595962, 38.95577182847963, 88.10525669559195, 30.803066195475274, 55.21672180670281, 46.28709516337572, 37.93886969713928, 123.55737971732786, 69.52352900805829, 49.75866184853634, 68.1054045460508, 53.88013038125371, 35.27859032648664, 46.18217391002329, 117.09399019529779, 260.69994394342103, 75.44845816195205, 78.29478305922042, 760.0130661859155, 312.54487169983537, 460.0027947799535, 164.850244723472, 126.02099461516539, 147.16547865544598, 124.8178548307091, 162.70295553929182, 178.94832503051006, 133.11547938262143, 785.996312630443, 173.85244745632983, 2257.430807619236, 744.8854446727778, 154.24376878309283, 185.76538437859347, 68.80518460750312, 106.31405700510402, 60.53247084423565, 175.38120394973015, 129.53642345056147, 69.46122085820912, 56.43260609270635, 75.01362579342535, 40.374687147326846, 50.26918850242463, 92.03253805760795, 48.01899357753669, 123.68823655727863, 36.58582655330022, 68.00641290412733, 65.62171329537361, 116.90949838157314, 121.07182570127895, 136.7646721569443, 75.76131125300728, 60.08298687748726, 56.290473676637525, 72.22091042504309, 1446.5740770018142, 68.97586954592089, 116.74386191906126, 87.09088622381142, 64.68193337150474, 95.27730497119998, 122.27506557584205, 85.78291635024578, 2257.430807619236, 185.57878897165895, 184.57954316846138, 173.08267757658194, 178.94832503051006, 298.4321985936426, 785.996312630443, 115.31424766257186, 96.17556446062906, 120.08295210008272, 206.65932348237558, 116.21443836284126, 105.94235782157293, 760.0130661859155, 744.8854446727778, 168.84676193429584, 112.66094671930534, 320.16898342254615, 260.69994394342103, 1004.3479208681533, 252.79439405536846, 312.54487169983537, 460.0027947799535, 147.23239604221527], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -3.9556, -4.1954, -3.9349, -3.9327, -4.7004, -4.1277, -4.2229, -4.6276, -5.3932, -4.7864, -5.3112, -4.9121, -5.1991, -4.333, -4.8719, -4.9745, -4.8875, -4.543, -4.7346, -5.1712, -3.9761, -5.1386, -5.7296, -5.4238, -3.4525, -5.1803, -5.3392, -5.4833, -4.5463, -5.3522, -4.4811, -4.8385, -4.3873, -4.8159, -4.0943, -3.6828, -3.8628, -4.7903, -5.1361, -3.655, -2.717, -4.3953, -4.8345, -4.6796, -2.8453, -5.2274, -2.8603, -4.4322, -4.9754, -5.3464, -5.0993, -5.4228, -5.2154, -3.9463, -5.2042, -5.1901, -4.9862, -5.6692, -5.0071, -5.0067, -6.0975, -4.8901, -5.3201, -5.9892, -4.9654, -4.3625, -5.5297, -5.6006, -5.7501, -5.1822, -5.3765, -4.8995, -5.1648, -5.1895, -4.9168, -3.753, -4.7454, -5.0843, -3.8726, -4.1722, -4.8577, -5.1357, -5.0467, -5.066, -2.3741, -1.6496, -4.386, -4.9601, -5.1573, -4.5664, -3.97, -2.2538, -4.5384, -5.3683, -4.9883, -5.4615, -4.8986, -4.0979, -4.1856, -6.3126, -5.5911, -5.7303, -5.8549, -5.4794, -5.5663, -5.1714, -5.2432, -5.8848, -5.957, -5.7363, -5.5939, -5.9693, -5.4807, -5.2665, -5.3962, -5.0759, -5.3663, -5.0756, -5.4476, -4.5711, -5.3099, -5.432, -5.4641, -5.4549, -5.4179, -1.5992, -1.5112, -2.6111, -4.3877, -5.0524, -4.4065, -4.3329, -4.5631, -5.3678, -5.5179, -6.5155, -5.0882, -5.2724, -5.9783, -6.1874, -6.3163, -6.1938, -6.6619, -5.8565, -6.9349, -6.3642, -6.5523, -6.7708, -5.5951, -6.1762, -6.5152, -6.2055, -6.4471, -6.8785, -6.6125, -5.6848, -4.9184, -6.1319, -6.1056, -4.0439, -4.9099, -4.6331, -5.5488, -5.786, -5.6827, -5.812, -5.6498, -5.6427, -5.8211, -5.1073, -5.7706, -5.0542, -5.7258, -4.7353, -4.6697, -5.675, -5.257, -5.8398, -4.7776, -5.0944, -5.7274, -5.9848, -5.7074, -6.3351, -6.1188, -5.526, -6.1822, -5.2456, -6.467, -5.8536, -5.8906, -5.3165, -5.2827, -5.1663, -5.7592, -5.9915, -6.0571, -5.8091, -2.8124, -5.856, -5.3335, -5.6265, -5.9291, -5.5542, -5.3243, -5.6597, -2.5888, -4.9362, -4.951, -5.0133, -5.0196, -4.5869, -3.7762, -5.4083, -5.5644, -5.3808, -4.9559, -5.4135, -5.4892, -4.2571, -4.2813, -5.2091, -5.4559, -4.9055, -5.0306, -4.3768, -5.064, -5.0688, -5.0571, -5.3486], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.3848, 1.3788, 1.352, 1.3383, 1.2545, 1.2412, 1.2405, 1.2149, 1.1958, 1.1927, 1.1904, 1.1537, 1.1455, 1.1334, 1.1308, 1.1292, 1.1279, 1.1162, 1.088, 1.0759, 1.0679, 1.0456, 1.0316, 1.0182, 0.9877, 0.9556, 0.9514, 0.9176, 0.8669, 0.8425, 0.7593, 0.641, 0.4152, 0.531, -0.0611, -0.6474, -0.7298, -1.4958, 0.639, 1.4709, 1.2412, 1.1977, 1.1662, 1.1509, 1.0928, 1.0495, 1.0442, 1.0292, 1.019, 1.0125, 0.9819, 0.9338, 0.9082, 0.8804, 0.8439, 0.7735, 0.7685, 0.7456, 0.7439, 0.7163, 0.7, 0.6897, 0.6875, 0.6831, 0.6522, 0.6456, 0.6385, 0.6349, 0.6323, 0.6011, 0.5997, 0.505, 0.5426, 0.5455, 0.4366, -0.0936, 0.1275, 0.4436, -1.0231, -0.8777, -0.4175, 0.4438, 1.4285, 1.4174, 1.2853, 1.1998, 1.1533, 1.147, 1.119, 1.1077, 1.0689, 1.0407, 0.9945, 0.8789, 0.8108, 0.8057, 0.749, 0.7047, 0.6873, 0.6864, 0.6851, 0.6815, 0.6669, 0.6251, 0.6145, 0.6143, 0.6091, 0.5976, 0.5814, 0.56, 0.5366, 0.5355, 0.4895, 0.463, 0.4765, 0.3666, 0.4497, 0.2723, 0.4048, -0.6667, 0.0435, 0.2482, 0.2354, -0.0706, -1.4597, 1.5338, 1.5243, 1.4221, 1.2078, 1.073, 1.0516, 1.0372, 1.0062, 0.7703, 0.7511, 0.6397, 0.5294, 0.5238, 0.4508, 0.3506, 0.2955, 0.2858, 0.2471, 0.2364, 0.209, 0.196, 0.1843, 0.1647, 0.1597, 0.1535, 0.149, 0.1449, 0.1376, 0.1297, 0.1263, 0.1237, 0.0896, 0.1161, 0.1054, -0.1058, -0.0832, -0.1929, -0.0824, -0.051, -0.1028, -0.0674, -0.1702, -0.2584, -0.1408, -1.2028, -0.3574, -2.2047, -1.7676, 0.7976, 0.6772, 0.6652, 0.6481, 0.6285, 0.6269, 0.613, 0.6033, 0.5536, 0.5463, 0.5382, 0.5352, 0.5233, 0.5176, 0.5081, 0.5048, 0.4982, 0.4969, 0.4936, 0.4923, 0.4869, 0.4846, 0.4842, 0.4838, 0.4826, 0.4821, 0.4817, 0.478, 0.478, 0.4728, 0.4604, 0.4409, 0.4599, 0.2606, 0.4118, 0.4023, 0.4044, 0.3648, 0.286, 0.1283, 0.4155, 0.4409, 0.4024, 0.2845, 0.4025, 0.4194, -0.319, -0.3231, 0.2333, 0.3911, -0.1029, -0.0225, -0.7174, -0.0251, -0.2421, -0.6169, 0.2308]}, \"token.table\": {\"Topic\": [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5], \"Freq\": [0.19709370055790998, 0.39418740111581996, 0.09096632333442, 0.09096632333442, 0.21225475444698, 0.16691267557713388, 0.12518450668285042, 0.33382535115426776, 0.09736572741999476, 0.2642784029971286, 0.12663100834291832, 0.08058336894549348, 0.6101312220158792, 0.023023819698712422, 0.16116673789098696, 0.3279518174358108, 0.0718370647716538, 0.393542180922973, 0.03748020770694981, 0.16866093468127413, 0.5670833788335752, 0.06915650961385063, 0.08298781153662076, 0.09681911345939088, 0.17980692499601164, 0.7173324354137605, 0.03415868740065526, 0.06831737480131052, 0.10247606220196578, 0.08539671850163816, 0.32841904029251123, 0.15977142500716762, 0.16864761528534358, 0.07100952222540782, 0.27516189862345536, 0.3340749154211896, 0.12991802266379596, 0.11135830514039653, 0.22271661028079306, 0.22271661028079306, 0.2390458903374919, 0.21731444576135628, 0.13038866745681377, 0.09779150059261033, 0.3151059463539666, 0.1561291920707926, 0.1561291920707926, 0.3903229801769815, 0.04683875762123778, 0.24980670731326818, 0.3714362620937852, 0.12919522159783833, 0.0753638792654057, 0.05383134233243264, 0.36605312786054195, 0.5953742049916606, 0.06436477891801737, 0.1126383631065304, 0.1126383631065304, 0.1126383631065304, 0.03889946444732929, 0.006483244074554883, 0.5251427700389455, 0.019449732223664647, 0.4149276207715125, 0.8663820844648351, 0.03208822535054945, 0.026740187792124538, 0.026740187792124538, 0.04278430046739926, 0.3525136692957699, 0.16023348604353177, 0.10415176592829566, 0.17625683464788494, 0.2163152061587679, 0.1331491727652034, 0.2496546989347564, 0.2496546989347564, 0.049930939786951276, 0.2995856387217077, 0.6741292363571322, 0.062227314125273735, 0.031113657062636867, 0.1659395043340633, 0.062227314125273735, 0.6321880322924646, 0.15904101441319862, 0.019880126801649828, 0.07156845648593937, 0.115304735449569, 0.22056743414987037, 0.20586293853987903, 0.14704495609991358, 0.11763596487993087, 0.30879440780981854, 0.7499442217548302, 0.05443143544994735, 0.030239686361081864, 0.07862318453881284, 0.07862318453881284, 0.2914003672367754, 0.06374383033304463, 0.3096128901890739, 0.11838139918994002, 0.2185502754275816, 0.3555861552235623, 0.12368214094732602, 0.15460267618415752, 0.06184107047366301, 0.2937450847498993, 0.7538377524532864, 0.055024653463743536, 0.03301479207824612, 0.0715320495028666, 0.08803944554198966, 0.5847790558069949, 0.13912958948567905, 0.01956509852142362, 0.15652078817138895, 0.09999939244283182, 0.517680373884913, 0.08052805815987533, 0.07477605400559853, 0.13229609554836663, 0.19556814124541155, 0.09210121397084889, 0.3304808266012813, 0.20045558334831814, 0.09210121397084889, 0.2817213603814201, 0.17343910579482974, 0.2775025692717276, 0.1994549716640542, 0.0693756423179319, 0.2861745245614691, 0.12965126253321252, 0.458766005886752, 0.11967808849219616, 0.08975856636914713, 0.19946348082032694, 0.3400270096416456, 0.04690027719195112, 0.01172506929798778, 0.5510782570054257, 0.04690027719195112, 0.24361821999687733, 0.13534345555382074, 0.12180910999843866, 0.40603036666146225, 0.10827476444305659, 0.19044397002229196, 0.3650176092093929, 0.11109231584633697, 0.07935165417595498, 0.2539252933630559, 0.13522093811690802, 0.22536823019484672, 0.2479050532143314, 0.16527003547622093, 0.22536823019484672, 0.15947606130107164, 0.2464630038289289, 0.1884717088103574, 0.10148476628250014, 0.3044542988475004, 0.09173557666116773, 0.4092818035652099, 0.1905277361424253, 0.07762241102098809, 0.23286723306296425, 0.15634136597719314, 0.4273330670043279, 0.10422757731812875, 0.06253654639087725, 0.250146185563509, 0.12269587749567752, 0.19086025388216504, 0.3817205077643301, 0.05453150110919001, 0.24539175499135504, 0.6199855305175881, 0.11071170187814074, 0.04428468075125629, 0.08856936150251259, 0.15499638262939702, 0.5687417273776075, 0.09479028789626792, 0.03554635796110047, 0.17773178980550236, 0.14218543184440188, 0.01726146992365086, 0.9278040083962337, 0.004315367480912715, 0.012946102442738144, 0.03883830732821443, 0.35938191807985015, 0.2567013700570358, 0.025670137005703583, 0.23103123305133225, 0.10268054802281433, 0.14683122531396614, 0.35239494075351874, 0.08809873518837968, 0.2202468379709492, 0.19088059290815598, 0.11287312645235516, 0.2727767222598583, 0.18812187742059192, 0.06584265709720717, 0.35743156709912466, 0.3842996933681555, 0.08354341160177294, 0.1503781408831913, 0.2506302348053188, 0.13366945856283668, 0.10708701133607244, 0.23202185789482363, 0.29448928117419926, 0.10708701133607244, 0.25879361072884177, 0.5405488847811974, 0.1389982846580222, 0.046332761552674066, 0.16988679235980492, 0.1081097769562395, 0.24982950014411115, 0.13383723222005955, 0.3568992859201588, 0.06245737503602779, 0.19629460725608733, 0.2848253207525325, 0.08377215316250955, 0.3518430432825401, 0.08377215316250955, 0.18429873695752103, 0.10593936067013737, 0.15890904100520606, 0.463484702931851, 0.0926969405863702, 0.1853938811727404, 0.15861445223755558, 0.2170513556934971, 0.35896954980078366, 0.07513316158621053, 0.19200696849809357, 0.5026510999914953, 0.11309649749808642, 0.07539766499872429, 0.13822905249766118, 0.17592788499702333, 0.05101455569009419, 0.7356835925834636, 0.04564460245955796, 0.03221971938321738, 0.13559131907103983, 0.09493881416825796, 0.11471773378664503, 0.5656771010858703, 0.04351362316045156, 0.18196606048916109, 0.044325690935911, 0.5466835215429025, 0.1625275334316737, 0.07387615155985168, 0.177302763743644, 0.05696436269314187, 0.24126083022977732, 0.3853471593947832, 0.06701689728604926, 0.24796251995838223, 0.10215054512689803, 0.2724014536717281, 0.1589008479751747, 0.23835127196276207, 0.22700121139310672, 0.6769263028715969, 0.03441998150194561, 0.11473327167315203, 0.06883996300389122, 0.10325994450583682, 0.8282246605650166, 0.024946525920633032, 0.044903746657139455, 0.03991444147301285, 0.06486096739364589, 0.18172065086035558, 0.2643209467059718, 0.1486805325221091, 0.049560177507369706, 0.34692124255158796, 0.40374092456477906, 0.08312313152804275, 0.023749466150869356, 0.40374092456477906, 0.07124839845260807, 0.2597144047034881, 0.2597144047034881, 0.09739290176380805, 0.22725010411555213, 0.1623215029396801, 0.7333512645641899, 0.07952001663949047, 0.026506672213163492, 0.07952001663949047, 0.07952001663949047, 0.6620117893414943, 0.10297961167534356, 0.029422746192955304, 0.13240235786829888, 0.07355686548238825, 0.1249136512524967, 0.39139610725782303, 0.13324122800266316, 0.07494819075149803, 0.2831376095056592, 0.2040336183510232, 0.0057881877546389566, 0.0014470469386597391, 0.7828523938149189, 0.0057881877546389566, 0.20306106908278285, 0.08460877878449286, 0.43996564967936286, 0.06768702302759429, 0.21152194696123214, 0.1377605465055611, 0.4362417306009435, 0.04592018216852037, 0.1607206375898213, 0.22960091084260184, 0.17330184833085885, 0.22662549397112308, 0.19996367115099098, 0.07998546846039639, 0.31994187384158557, 0.08638759565356267, 0.5119264927618529, 0.07998851449403951, 0.17277519130712535, 0.14717886666903268, 0.11364399356399839, 0.009603717765971695, 0.0032012392553238986, 0.8675358381927765, 0.00586893863476048, 0.01639031410181802, 0.07663579296255452, 0.6436520645930156, 0.020820128723930995, 0.24275384129179117, 0.11013940611585951, 0.40384448909148485, 0.14685254148781268, 0.07342627074390634, 0.25699194760367217, 0.0499047307165078, 0.033269820477671866, 0.8151106017029607, 0.016634910238835933, 0.08317455119417966, 0.24599075808491877, 0.13489815765947158, 0.20631482936154477, 0.18250927212752038, 0.23805557234024396, 0.0495666083615851, 0.26022469389832176, 0.35935791062149197, 0.02478330418079255, 0.2850079980791143, 0.5034266887681038, 0.08630171807453209, 0.08630171807453209, 0.2157542951863302, 0.11506895743270945, 0.12910636498172318, 0.4212944541508861, 0.0815408620937199, 0.16987679602858313, 0.19705708339315642, 0.22413545447252017, 0.33280718997434816, 0.10187975203296372, 0.10867173550182796, 0.23771942141024865, 0.4645326345907017, 0.16936085636119333, 0.06774434254447734, 0.0483888161031981, 0.2467829621263103, 0.6733383998682981, 0.04852889368420167, 0.03639667026315125, 0.17591723960523106, 0.06672722881577729, 0.2833413813082248, 0.1378417530688661, 0.24505200545576195, 0.0765787517049256, 0.2527098806262545, 0.04487336695002946, 0.5721354286128757, 0.10096507563756629, 0.11218341737507366, 0.17949346780011785, 0.24953870111609594, 0.08604782797106757, 0.3011673978987365, 0.08604782797106757, 0.2753530495074162, 0.3159854740477179, 0.1451825151030055, 0.11956207126129866, 0.21350369868089045, 0.20496355073365483, 0.0587222467100904, 0.11091979934128188, 0.6133212434164997, 0.03262347039449467, 0.18269143420917014, 0.31180384188257554, 0.1700748228450412, 0.11338321523002746, 0.22676643046005493, 0.19842062665254806, 0.007965367213669184, 0.19415582583318636, 0.7009523148028881, 0.005974025410251888, 0.09160172295719561, 0.19052331490246485, 0.2187489911843115, 0.11290270512738658, 0.31753885817077476, 0.16229763862061822, 0.15839218991241616, 0.2903856815060963, 0.19799023739052019, 0.05279739663747205, 0.3035850306654643, 0.05488567176439132, 0.43908537411513054, 0.18817944604934167, 0.10977134352878264, 0.21170187680550936, 0.05973544267561153, 0.10453702468232018, 0.5898874964216639, 0.029867721337805766, 0.2165409796990918, 0.6216889099665386, 0.03730133459799232, 0.06216889099665386, 0.19894045118929238, 0.07460266919598464, 0.6861610459985584, 0.043797513574376064, 0.08759502714875213, 0.10219419834021082, 0.08759502714875213, 0.16762744292407114, 0.16762744292407114, 0.27429945205757095, 0.07619429223821415, 0.3047771689528566, 0.7269909786140437, 0.018640794323437015, 0.07456317729374806, 0.1304855602640591, 0.05592238297031105, 0.8415103265287287, 0.040554714531505, 0.040554714531505, 0.04562405384794312, 0.03041603589862875, 0.42148402116446937, 0.1532669167870798, 0.0638612153279499, 0.20435588904943972, 0.1404946737214898, 0.1392503083606048, 0.1392503083606048, 0.2983935179155817, 0.09946450597186057, 0.31828641910995387, 0.3314785717800525, 0.15361202106880484, 0.12127264821221434, 0.08893327535562384, 0.3072240421376097, 0.4019400694672882, 0.14067902431355087, 0.04019400694672882, 0.22106703820700851, 0.2009700347336441, 0.09693170999597393, 0.35351564822061077, 0.13684476705313967, 0.06272051823268901, 0.34781378292673, 0.19558718973219014, 0.20676360057402957, 0.17882257346943098, 0.14529334094391266, 0.26823386020414647, 0.24843618438346768, 0.19066032755010312, 0.17332757050009373, 0.1097741279833927, 0.27732411280014996, 0.15538736299605665, 0.3107747259921133, 0.15538736299605665, 0.08996110489245386, 0.29441816146621264, 0.1594822678437884, 0.14176201586114526, 0.35440503965286313, 0.035440503965286314, 0.3189645356875768, 0.31672348582684, 0.0863791324982291, 0.20155130916253455, 0.04318956624911455, 0.3455165299929164, 0.28604630425774014, 0.15255802893746143, 0.13348827532027874, 0.24790679702337481, 0.1716277825546441, 0.13511505240901214, 0.14862655764991334, 0.43236816770883885, 0.054046020963604856, 0.22969558909532062, 0.1514881214776009, 0.38376990774325564, 0.04039683239402691, 0.16158732957610764, 0.2625794105611749, 0.10807770993726103, 0.3628323119322335, 0.10807770993726103, 0.06947852781681066, 0.3473926390840533, 0.10495678905929128, 0.2833833304600864, 0.26239197264822817, 0.06297407343557476, 0.2938790093660156, 0.30966620719536997, 0.3290203451450806, 0.05161103453256166, 0.11612482769826374, 0.19354137949710623, 0.10469737360137359, 0.011175562350708417, 0.0011763749842850966, 0.8758111758002544, 0.0070582499057105785, 0.1684498541975561, 0.11430525820548448, 0.07820886087743675, 0.541445959920716, 0.10227312576280191, 0.13666494571923168, 0.24599690229461701, 0.2186639131507707, 0.081998967431539, 0.3006628805823097, 0.04839019384688739, 0.08848492589145124, 0.5488830559204084, 0.011060615736431405, 0.30278435578480967, 0.12461764808878939, 0.22154248549118113, 0.2907745122071752, 0.055385621372795284, 0.30462091755037407, 0.23543592547035125, 0.2173254696649396, 0.07244182322164654, 0.23543592547035125, 0.23543592547035125, 0.13133898407786657, 0.2955127141751998, 0.09850423805839993, 0.3611822062141331, 0.13133898407786657, 0.14397661237694825, 0.4057522712441269, 0.14397661237694825, 0.06544391471679466, 0.23559809298046078, 0.11015057527151217, 0.7022099173558901, 0.013768821908939022, 0.048190876681286576, 0.11703498622598167, 0.6848661041043123, 0.06627736491332054, 0.07732359239887396, 0.07732359239887396, 0.08836981988442738, 0.8648377924645853, 0.033782726268147864, 0.013513090507259145, 0.05405236202903658, 0.033782726268147864, 0.24954363548159644, 0.31192954435199555, 0.08318121182719881, 0.06238590887039911, 0.29113424139519584, 0.18234653460768327, 0.4254752474179276, 0.10130363033760181, 0.10130363033760181, 0.20260726067520363, 0.24463284543867092, 0.09469658533109843, 0.30776390232606987, 0.10258796744202328, 0.2525242275495958, 0.10383004707641198, 0.3209292364180007, 0.2265382845303534, 0.05663457113258835, 0.28317285566294176, 0.09362460077869063, 0.5266383793801348, 0.10532767587602695, 0.10532767587602695, 0.17554612646004492, 0.761297060419767, 0.029660924431938972, 0.1680785717809875, 0.029660924431938972, 0.15006030512399685, 0.6138830664163507, 0.0272836918407267, 0.0545673836814534, 0.16370215104436017, 0.4114141538035367, 0.10826688257987807, 0.08661350606390246, 0.21653376515975614, 0.1515736356118293, 0.41179338001527505, 0.17209275582727912, 0.08604637791363956, 0.15980041612533064, 0.17209275582727912, 0.17676152472550904, 0.17676152472550904, 0.32995484615428355, 0.03535230494510181, 0.2828184395608145, 0.6496247505780589, 0.06929330672832629, 0.06929330672832629, 0.10393996009248943, 0.11260162343353021, 0.41297799641152866, 0.16519119856461145, 0.07433603935407515, 0.04129779964115286, 0.3056037173445312, 0.06816889592887938, 0.10907023348620702, 0.5998862841741386, 0.05453511674310351, 0.1772391294150864, 0.12383996888335129, 0.32198391909671337, 0.14860796266002155, 0.09907197510668103, 0.32198391909671337, 0.2191336071603078, 0.14806324808128907, 0.27835890639282346, 0.12437312838828281, 0.2369011969300625, 0.1541836950064187, 0.2741043466780777, 0.16274945584010864, 0.11135489083796907, 0.2998016291791475, 0.14926935025775043, 0.12630483483348115, 0.36743224678830877, 0.05741128856067325, 0.29853870051550085, 0.2915512999537168, 0.16660074283069531, 0.10412546426918456, 0.12495055712302149, 0.3123763928075537, 0.026717682592836422, 0.6043285348379667, 0.09923710677339243, 0.057252176984649475, 0.2124691901430325, 0.3888772872107635, 0.12962576240358784, 0.10802146866965652, 0.23764723107324434, 0.15123005613751914, 0.10961890609776044, 0.4541354681192933, 0.10961890609776044, 0.03131968745650299, 0.2818771871085268, 0.08882497647333125, 0.355299905893325, 0.15988495765199626, 0.08882497647333125, 0.3020049200093262, 0.22148932221451062, 0.22148932221451062, 0.1865173239701142, 0.08160132923692497, 0.29143331870330347, 0.6722137994487313, 0.07352338431470498, 0.042013362465545705, 0.10503340616386427, 0.1155367467802507, 0.08720273093120526, 0.23254061581654734, 0.27614198128214995, 0.04360136546560263, 0.36334471221335524, 0.08725304985399869, 0.18904827468366384, 0.4071808993186605, 0.07998196236616546, 0.23267479961066317, 0.1542040636752749, 0.1542040636752749, 0.3255419122033581, 0.0856689242640416, 0.2570067727921248, 0.15626785884689007, 0.20476478055799388, 0.25326170226909767, 0.10238239027899694, 0.2802044365530443, 0.09053615353443326, 0.5975386133272595, 0.06035743568962217, 0.07242892282754661, 0.1810723070688665, 0.14109461637796333, 0.49925787333740873, 0.06512059217444462, 0.11938775231981513, 0.18450834449425976, 0.3250377473691173, 0.15396524875379242, 0.15396524875379242, 0.05132174958459747, 0.30793049750758483, 0.7191318716079355, 0.030385853729912763, 0.060771707459825526, 0.060771707459825526, 0.12154341491965105, 0.08386038124903276, 0.8050596599907146, 0.05031622874941966, 0.05031622874941966, 0.07404540583776541, 0.5923632467021233, 0.05923632467021232, 0.07404540583776541, 0.20732713634574312, 0.15320223224596474, 0.4515434213565277, 0.10482257995776535, 0.06450620305093253, 0.2338349860596304, 0.03815723872424317, 0.6341996229339727, 0.021052269640961747, 0.16973392398025408, 0.13552398581369124, 0.14055112971923597, 0.17066922894478653, 0.32125972507253936, 0.0903542976766517, 0.28110225943847195, 0.39713823186803593, 0.15885529274721438, 0.04765658782416431, 0.3018250562197073, 0.11119870492305006, 0.24202496273957577, 0.08067498757985858, 0.047060409421584175, 0.5176645036374259, 0.114289565738133, 0.3106024273022587, 0.027609104649089663, 0.006902276162272416, 0.6350094069290623, 0.020706828486817246, 0.1342539605900182, 0.40659770921548366, 0.06904489401772364, 0.20713468205317093, 0.18411971738059638, 0.06474724551704028, 0.461324124308912, 0.08093405689630034, 0.21852195362001095, 0.16996151948223073, 0.4480892587393519, 0.07907457507165033, 0.10543276676220044, 0.21086553352440088, 0.15814915014330067, 0.12419742452327512, 0.6830858348780131, 0.020699570753879185, 0.020699570753879185, 0.1552467806540939, 0.6355751602491415, 0.11917034254671403, 0.02648229834371423, 0.11917034254671403, 0.09268804420299981, 0.22587894471634698, 0.09916636597303038, 0.06611091064868692, 0.5343965277435526, 0.07162015320274417, 0.14044525962596496, 0.19662336347635093, 0.39324672695270185, 0.056178103850385984, 0.22471241540154394, 0.072000336191959, 0.5862884518488091, 0.041143049252548004, 0.15428643469705502, 0.133714910070781, 0.21206530113121186, 0.26508162641401484, 0.09277856924490518, 0.21206530113121186, 0.21206530113121186, 0.061116428572743214, 0.6722807143001754, 0.04365459183767373, 0.10477102041041694, 0.12223285714548643, 0.3719615134129387, 0.14169962415730997, 0.07084981207865498, 0.2656867952949562, 0.14169962415730997, 0.10457055825994785, 0.22656954289655365, 0.38342538028647544, 0.06971370550663189, 0.22656954289655365, 0.16872531985927197, 0.28683304376076235, 0.09279892592259958, 0.32057810773261675, 0.13498025588741758, 0.3290323392020437, 0.12430110592077206, 0.12430110592077206, 0.11698927616072666, 0.30709684992190744], \"Term\": [\"acci\\u00f3n\", \"acci\\u00f3n\", \"acci\\u00f3n\", \"acci\\u00f3n\", \"acci\\u00f3n\", \"aclarar\", \"aclarar\", \"aclarar\", \"aclarar\", \"aclarar\", \"acusaci\\u00f3n\", \"acusaci\\u00f3n\", \"acusaci\\u00f3n\", \"acusaci\\u00f3n\", \"acusaci\\u00f3n\", \"acusar\", \"acusar\", \"acusar\", \"acusar\", \"acusar\", \"alcalde\", \"alcalde\", \"alcalde\", \"alcalde\", \"alcalde\", \"antonio\", \"antonio\", \"antonio\", \"antonio\", \"antonio\", \"anunciar\", \"anunciar\", \"anunciar\", \"anunciar\", \"anunciar\", \"aparecer\", \"aparecer\", \"aparecer\", \"aparecer\", \"aparecer\", \"asegurar\", \"asegurar\", \"asegurar\", \"asegurar\", \"asegurar\", \"autoridad\", \"autoridad\", \"autoridad\", \"autoridad\", \"autoridad\", \"a\\u00f1o\", \"a\\u00f1o\", \"a\\u00f1o\", \"a\\u00f1o\", \"a\\u00f1o\", \"bachelet\", \"bachelet\", \"bachelet\", \"bachelet\", \"bachelet\", \"bolsonaro\", \"bolsonaro\", \"bolsonaro\", \"bolsonaro\", \"bolsonaro\", \"boric\", \"boric\", \"boric\", \"boric\", \"boric\", \"buscar\", \"buscar\", \"buscar\", \"buscar\", \"buscar\", \"cadena\", \"cadena\", \"cadena\", \"cadena\", \"cadena\", \"camila\", \"camila\", \"camila\", \"camila\", \"camila\", \"campa\\u00f1a\", \"campa\\u00f1a\", \"campa\\u00f1a\", \"campa\\u00f1a\", \"campa\\u00f1a\", \"canal\", \"canal\", \"canal\", \"canal\", \"canal\", \"candidato\", \"candidato\", \"candidato\", \"candidato\", \"candidato\", \"carabinero\", \"carabinero\", \"carabinero\", \"carabinero\", \"carabinero\", \"cargo\", \"cargo\", \"cargo\", \"cargo\", \"cargo\", \"carrera\", \"carrera\", \"carrera\", \"carrera\", \"carrera\", \"chile\", \"chile\", \"chile\", \"chile\", \"chile\", \"chileno\", \"chileno\", \"chileno\", \"chileno\", \"chileno\", \"circular\", \"circular\", \"circular\", \"circular\", \"circular\", \"ciudadano\", \"ciudadano\", \"ciudadano\", \"ciudadano\", \"ciudadano\", \"ciudadan\\u00eda\", \"ciudadan\\u00eda\", \"ciudadan\\u00eda\", \"ciudadan\\u00eda\", \"ciudadan\\u00eda\", \"clinic\", \"clinic\", \"clinic\", \"clinic\", \"clinic\", \"cnn\", \"cnn\", \"cnn\", \"cnn\", \"cnn\", \"combatir\", \"combatir\", \"combatir\", \"combatir\", \"combatir\", \"compartir\", \"compartir\", \"compartir\", \"compartir\", \"compartir\", \"completo\", \"completo\", \"completo\", \"completo\", \"completo\", \"comunicaci\\u00f3n\", \"comunicaci\\u00f3n\", \"comunicaci\\u00f3n\", \"comunicaci\\u00f3n\", \"comunicaci\\u00f3n\", \"comunidad\", \"comunidad\", \"comunidad\", \"comunidad\", \"comunidad\", \"confirmar\", \"confirmar\", \"confirmar\", \"confirmar\", \"confirmar\", \"constituyente\", \"constituyente\", \"constituyente\", \"constituyente\", \"constituyente\", \"convenci\\u00f3n\", \"convenci\\u00f3n\", \"convenci\\u00f3n\", \"convenci\\u00f3n\", \"convenci\\u00f3n\", \"coronavirus\", \"coronavirus\", \"coronavirus\", \"coronavirus\", \"coronavirus\", \"covid\", \"covid\", \"covid\", \"covid\", \"covid\", \"crear\", \"crear\", \"crear\", \"crear\", \"crear\", \"cuenta\", \"cuenta\", \"cuenta\", \"cuenta\", \"cuenta\", \"daniel\", \"daniel\", \"daniel\", \"daniel\", \"daniel\", \"dato\", \"dato\", \"dato\", \"dato\", \"dato\", \"debate\", \"debate\", \"debate\", \"debate\", \"debate\", \"declaraci\\u00f3n\", \"declaraci\\u00f3n\", \"declaraci\\u00f3n\", \"declaraci\\u00f3n\", \"declaraci\\u00f3n\", \"declarar\", \"declarar\", \"declarar\", \"declarar\", \"declarar\", \"delito\", \"delito\", \"delito\", \"delito\", \"delito\", \"denuncia\", \"denuncia\", \"denuncia\", \"denuncia\", \"denuncia\", \"derecha\", \"derecha\", \"derecha\", \"derecha\", \"derecha\", \"desinformaci\\u00f3n\", \"desinformaci\\u00f3n\", \"desinformaci\\u00f3n\", \"desinformaci\\u00f3n\", \"desinformaci\\u00f3n\", \"desmentir\", \"desmentir\", \"desmentir\", \"desmentir\", \"desmentir\", \"detectar\", \"detectar\", \"detectar\", \"detectar\", \"detectar\", \"difundir\", \"difundir\", \"difundir\", \"difundir\", \"difundir\", \"digital\", \"digital\", \"digital\", \"digital\", \"digital\", \"diputada\", \"diputada\", \"diputada\", \"diputada\", \"diputada\", \"diputado\", \"diputado\", \"diputado\", \"diputado\", \"diputado\", \"director\", \"director\", \"director\", \"director\", \"director\", \"donald\", \"donald\", \"donald\", \"donald\", \"donald\", \"ee\", \"ee\", \"ee\", \"ee\", \"ee\", \"elecci\\u00f3n\", \"elecci\\u00f3n\", \"elecci\\u00f3n\", \"elecci\\u00f3n\", \"elecci\\u00f3n\", \"electoral\", \"electoral\", \"electoral\", \"electoral\", \"electoral\", \"empresa\", \"empresa\", \"empresa\", \"empresa\", \"empresa\", \"empty\", \"empty\", \"empty\", \"empty\", \"empty\", \"entregar\", \"entregar\", \"entregar\", \"entregar\", \"entregar\", \"estudio\", \"estudio\", \"estudio\", \"estudio\", \"estudio\", \"explicar\", \"explicar\", \"explicar\", \"explicar\", \"explicar\", \"facebook\", \"facebook\", \"facebook\", \"facebook\", \"facebook\", \"fake\", \"fake\", \"fake\", \"fake\", \"fake\", \"falso\", \"falso\", \"falso\", \"falso\", \"falso\", \"familia\", \"familia\", \"familia\", \"familia\", \"familia\", \"fiscal\\u00eda\", \"fiscal\\u00eda\", \"fiscal\\u00eda\", \"fiscal\\u00eda\", \"fiscal\\u00eda\", \"foto\", \"foto\", \"foto\", \"foto\", \"foto\", \"fuente\", \"fuente\", \"fuente\", \"fuente\", \"fuente\", \"gabriel\", \"gabriel\", \"gabriel\", \"gabriel\", \"gabriel\", \"generar\", \"generar\", \"generar\", \"generar\", \"generar\", \"gente\", \"gente\", \"gente\", \"gente\", \"gente\", \"gobierno\", \"gobierno\", \"gobierno\", \"gobierno\", \"gobierno\", \"gonzalo\", \"gonzalo\", \"gonzalo\", \"gonzalo\", \"gonzalo\", \"haber\", \"haber\", \"haber\", \"haber\", \"haber\", \"herramienta\", \"herramienta\", \"herramienta\", \"herramienta\", \"herramienta\", \"hijo\", \"hijo\", \"hijo\", \"hijo\", \"hijo\", \"imagen\", \"imagen\", \"imagen\", \"imagen\", \"imagen\", \"incendio\", \"incendio\", \"incendio\", \"incendio\", \"incendio\", \"incluir\", \"incluir\", \"incluir\", \"incluir\", \"incluir\", \"informaci\\u00f3n\", \"informaci\\u00f3n\", \"informaci\\u00f3n\", \"informaci\\u00f3n\", \"informaci\\u00f3n\", \"instagram\", \"instagram\", \"instagram\", \"instagram\", \"instagram\", \"instituci\\u00f3n\", \"instituci\\u00f3n\", \"instituci\\u00f3n\", \"instituci\\u00f3n\", \"instituci\\u00f3n\", \"internet\", \"internet\", \"internet\", \"internet\", \"internet\", \"investigar\", \"investigar\", \"investigar\", \"investigar\", \"investigar\", \"jorge\", \"jorge\", \"jorge\", \"jorge\", \"jorge\", \"jos\\u00e9\", \"jos\\u00e9\", \"jos\\u00e9\", \"jos\\u00e9\", \"jos\\u00e9\", \"joven\", \"joven\", \"joven\", \"joven\", \"joven\", \"juan\", \"juan\", \"juan\", \"juan\", \"juan\", \"kast\", \"kast\", \"kast\", \"kast\", \"kast\", \"lanzar\", \"lanzar\", \"lanzar\", \"lanzar\", \"lanzar\", \"leer\", \"leer\", \"leer\", \"leer\", \"leer\", \"mandatario\", \"mandatario\", \"mandatario\", \"mandatario\", \"mandatario\", \"mapuche\", \"mapuche\", \"mapuche\", \"mapuche\", \"mapuche\", \"medio\", \"medio\", \"medio\", \"medio\", \"medio\", \"mensaje\", \"mensaje\", \"mensaje\", \"mensaje\", \"mensaje\", \"mentira\", \"mentira\", \"mentira\", \"mentira\", \"mentira\", \"mill\\u00f3n\", \"mill\\u00f3n\", \"mill\\u00f3n\", \"mill\\u00f3n\", \"mill\\u00f3n\", \"ministerio\", \"ministerio\", \"ministerio\", \"ministerio\", \"ministerio\", \"ministro\", \"ministro\", \"ministro\", \"ministro\", \"ministro\", \"montaje\", \"montaje\", \"montaje\", \"montaje\", \"montaje\", \"multa\", \"multa\", \"multa\", \"multa\", \"multa\", \"mundial\", \"mundial\", \"mundial\", \"mundial\", \"mundial\", \"mundo\", \"mundo\", \"mundo\", \"mundo\", \"mundo\", \"m\\u00e9dico\", \"m\\u00e9dico\", \"m\\u00e9dico\", \"m\\u00e9dico\", \"m\\u00e9dico\", \"nacional\", \"nacional\", \"nacional\", \"nacional\", \"nacional\", \"new\", \"new\", \"new\", \"new\", \"new\", \"news\", \"news\", \"news\", \"news\", \"news\", \"ni\\u00f1o\", \"ni\\u00f1o\", \"ni\\u00f1o\", \"ni\\u00f1o\", \"ni\\u00f1o\", \"noticia\", \"noticia\", \"noticia\", \"noticia\", \"noticia\", \"oficial\", \"oficial\", \"oficial\", \"oficial\", \"oficial\", \"ojo\", \"ojo\", \"ojo\", \"ojo\", \"ojo\", \"online\", \"online\", \"online\", \"online\", \"online\", \"organizaci\\u00f3n\", \"organizaci\\u00f3n\", \"organizaci\\u00f3n\", \"organizaci\\u00f3n\", \"organizaci\\u00f3n\", \"pandemia\", \"pandemia\", \"pandemia\", \"pandemia\", \"pandemia\", \"parlamentario\", \"parlamentario\", \"parlamentario\", \"parlamentario\", \"parlamentario\", \"partido\", \"partido\", \"partido\", \"partido\", \"partido\", \"pa\\u00eds\", \"pa\\u00eds\", \"pa\\u00eds\", \"pa\\u00eds\", \"pa\\u00eds\", \"peligro\", \"peligro\", \"peligro\", \"peligro\", \"peligro\", \"periodista\", \"periodista\", \"periodista\", \"periodista\", \"periodista\", \"persona\", \"persona\", \"persona\", \"persona\", \"persona\", \"plataforma\", \"plataforma\", \"plataforma\", \"plataforma\", \"plataforma\", \"plebiscito\", \"plebiscito\", \"plebiscito\", \"plebiscito\", \"poblaci\\u00f3n\", \"poblaci\\u00f3n\", \"poblaci\\u00f3n\", \"poblaci\\u00f3n\", \"poblaci\\u00f3n\", \"pol\\u00e9mico\", \"pol\\u00e9mico\", \"pol\\u00e9mico\", \"pol\\u00e9mico\", \"pol\\u00e9mico\", \"pol\\u00edtico\", \"pol\\u00edtico\", \"pol\\u00edtico\", \"pol\\u00edtico\", \"pol\\u00edtico\", \"prensa\", \"prensa\", \"prensa\", \"prensa\", \"prensa\", \"presidencial\", \"presidencial\", \"presidencial\", \"presidencial\", \"presidencial\", \"presidente\", \"presidente\", \"presidente\", \"presidente\", \"presidente\", \"presunto\", \"presunto\", \"presunto\", \"presunto\", \"presunto\", \"principal\", \"principal\", \"principal\", \"principal\", \"principal\", \"publicar\", \"publicar\", \"publicar\", \"publicar\", \"publicar\", \"p\\u00fablico\", \"p\\u00fablico\", \"p\\u00fablico\", \"p\\u00fablico\", \"p\\u00fablico\", \"recibir\", \"recibir\", \"recibir\", \"recibir\", \"recibir\", \"recordar\", \"recordar\", \"recordar\", \"recordar\", \"recordar\", \"red\", \"red\", \"red\", \"red\", \"red\", \"referir\", \"referir\", \"referir\", \"referir\", \"referir\", \"regi\\u00f3n\", \"regi\\u00f3n\", \"regi\\u00f3n\", \"regi\\u00f3n\", \"regi\\u00f3n\", \"relacionado\", \"relacionado\", \"relacionado\", \"relacionado\", \"relacionado\", \"relaci\\u00f3n\", \"relaci\\u00f3n\", \"relaci\\u00f3n\", \"relaci\\u00f3n\", \"relaci\\u00f3n\", \"republicano\", \"republicano\", \"republicano\", \"republicano\", \"republicano\", \"responsable\", \"responsable\", \"responsable\", \"responsable\", \"responsable\", \"revelar\", \"revelar\", \"revelar\", \"revelar\", \"revelar\", \"revisar\", \"revisar\", \"revisar\", \"revisar\", \"revisar\", \"rumor\", \"rumor\", \"rumor\", \"rumor\", \"rumor\", \"salud\", \"salud\", \"salud\", \"salud\", \"salud\", \"sanitario\", \"sanitario\", \"sanitario\", \"sanitario\", \"sanitario\", \"semana\", \"semana\", \"semana\", \"semana\", \"semana\", \"senador\", \"senador\", \"senador\", \"senador\", \"senador\", \"servel\", \"servel\", \"servel\", \"servel\", \"sistema\", \"sistema\", \"sistema\", \"sistema\", \"sistema\", \"situaci\\u00f3n\", \"situaci\\u00f3n\", \"situaci\\u00f3n\", \"situaci\\u00f3n\", \"situaci\\u00f3n\", \"social\", \"social\", \"social\", \"social\", \"social\", \"supuesto\", \"supuesto\", \"supuesto\", \"supuesto\", \"supuesto\", \"tema\", \"tema\", \"tema\", \"tema\", \"tema\", \"the\", \"the\", \"the\", \"the\", \"the\", \"trump\", \"trump\", \"trump\", \"trump\", \"trump\", \"twitter\", \"twitter\", \"twitter\", \"twitter\", \"twitter\", \"usuario\", \"usuario\", \"usuario\", \"usuario\", \"usuario\", \"uu\", \"uu\", \"uu\", \"uu\", \"uu\", \"vacuna\", \"vacuna\", \"vacuna\", \"vacuna\", \"vacuna\", \"vallejo\", \"vallejo\", \"vallejo\", \"vallejo\", \"vallejo\", \"video\", \"video\", \"video\", \"video\", \"video\", \"violaci\\u00f3n\", \"violaci\\u00f3n\", \"violaci\\u00f3n\", \"violaci\\u00f3n\", \"violaci\\u00f3n\", \"viral\", \"viral\", \"viral\", \"viral\", \"viral\", \"viralizar\", \"viralizar\", \"viralizar\", \"viralizar\", \"viralizar\", \"virus\", \"virus\", \"virus\", \"virus\", \"virus\", \"voz\", \"voz\", \"voz\", \"voz\", \"voz\", \"v\\u00edctima\", \"v\\u00edctima\", \"v\\u00edctima\", \"v\\u00edctima\", \"v\\u00edctima\", \"whatsapp\", \"whatsapp\", \"whatsapp\", \"whatsapp\", \"whatsapp\", \"\\u00e9l\", \"\\u00e9l\", \"\\u00e9l\", \"\\u00e9l\", \"\\u00e9l\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [5, 4, 3, 2, 1]};\n",
       "\n",
       "function LDAvis_load_lib(url, callback){\n",
       "  var s = document.createElement('script');\n",
       "  s.src = url;\n",
       "  s.async = true;\n",
       "  s.onreadystatechange = s.onload = callback;\n",
       "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
       "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "}\n",
       "\n",
       "if(typeof(LDAvis) !== \"undefined\"){\n",
       "   // already loaded: just create the visualization\n",
       "   !function(LDAvis){\n",
       "       new LDAvis(\"#\" + \"ldavis_el352261402038358370083290274933\", ldavis_el352261402038358370083290274933_data);\n",
       "   }(LDAvis);\n",
       "}else if(typeof define === \"function\" && define.amd){\n",
       "   // require.js is available: use it to load d3/LDAvis\n",
       "   require.config({paths: {d3: \"https://d3js.org/d3.v5\"}});\n",
       "   require([\"d3\"], function(d3){\n",
       "      window.d3 = d3;\n",
       "      LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.1/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
       "        new LDAvis(\"#\" + \"ldavis_el352261402038358370083290274933\", ldavis_el352261402038358370083290274933_data);\n",
       "      });\n",
       "    });\n",
       "}else{\n",
       "    // require.js not available: dynamically load d3 & LDAvis\n",
       "    LDAvis_load_lib(\"https://d3js.org/d3.v5.js\", function(){\n",
       "         LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.3.1/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
       "                 new LDAvis(\"#\" + \"ldavis_el352261402038358370083290274933\", ldavis_el352261402038358370083290274933_data);\n",
       "            })\n",
       "         });\n",
       "}\n",
       "</script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pyLDAvis\n",
    "prepared = pyLDAvis.prepare(doc_lengths = doc_l,\n",
    "                        vocab = diccionario,\n",
    "                        term_frequency = term_f,\n",
    "                        topic_term_dists = dist_topic,\n",
    "                        doc_topic_dists = dist_doc)\n",
    "pyLDAvis.display(prepared)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.06359574299466038\n",
      "0.656\n"
     ]
    }
   ],
   "source": [
    "topic_coherence = etm_instance.get_topic_coherence()\n",
    "print(topic_coherence)\n",
    "topic_diversity = etm_instance.get_topic_diversity()\n",
    "print(topic_diversity)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
